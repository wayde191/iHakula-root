<?xml version="1.0" encoding="UTF-8"?><!--
  ~ Copyright (c) 2001-2009, TIBCO Software Inc.
  ~ Use, modification, and distribution subject to terms of license.
  --><serialization xmlns="urn:tibco.com/v3.0">
 <onAfterDeserialize><![CDATA[objJSX.doBrowse=function(j,o){var
ub={a:"jsx3.io.browser",b:"mergetooldialog",c:"Save Document",d:"Save",e:"Open Document",f:"Open"};var
Ba=jsx3.ide.getProjectDirectory();if(o){(jsx3.ide.getPlugIn(ub.a)).saveFile((this.getServer()).getRootBlock(),{name:ub.b,modal:true,folder:Ba,title:ub.c,okLabel:ub.d,onChoose:(jsx3.$F(function(f){this.onBrowseChoose(f,Ba,j,o);jsx3.ide.setCurrentDirectory(f.getParentFile());})).bind(this)});}else (jsx3.ide.getPlugIn(ub.a)).chooseFile((this.getServer()).getRootBlock(),{name:ub.b,modal:true,folder:Ba,title:ub.e,okLabel:ub.f,onChoose:(jsx3.$F(function(q){this.onBrowseChoose(q,Ba,j,o);jsx3.ide.setCurrentDirectory(q.getParentFile());})).bind(this)});};objJSX.onBrowseChoose=function(q,m,c,h){if(h){jsx3.ide.writeUserFile(q,c.getValue());}else{var
L=(jsx3.ide.getSystemDirFile()).relativePathTo(q);c.setValue(jsx3.net.URIResolver.USER.relativizeURI(L));}};objJSX.getCacheList=function(o){var
W=this.getDescendantOfName(o);W.clearXmlData(false);var
bb=jsx3.ide.getAllEditors();for(var
u=0;u<bb.length;u++){var
Ta=bb[u];var
Ab=Ta.getServer();if(Ab){var
ua=Ab.getCache();var
Q=ua.keys();for(var
A=0;A<Q.length;A++){var
zb=Q[A];if(W.getRecordNode(zb)==null){var
aa={};aa.jsxid=zb;aa.jsxtext=zb;W.insertRecord(aa,null,false);}}}}var
H=(jsx3.ide.SERVER.getCache()).keys();for(var
_=0;_<H.length;_++){var
zb=H[_];if(W.getRecordNode(zb)==null){var
aa={};aa.jsxid=zb;aa.jsxtext=zb;W.insertRecord(aa,null,false);}}W.repaint();};objJSX.doMerge=function(){jsx3.require("jsx3.xml.Template");var
jb=this.getMergeDocument("jsx_merge_xml");var
Ha=this.getMergeDocument("jsx_merge_xsl");if(jb&&Ha){(this.getDescendantOfName("jsx_merge_xml_raw")).setValue(jb.toString());(this.getDescendantOfName("jsx_merge_xsl_raw")).setValue(Ha.toString());var
ca=new
jsx3.xml.Template(Ha);var
Mb=(ca.transform(jb,true)).toString();(this.getDescendantOfName("jsx_merge_rendered")).setText(Mb,true);(this.getDescendantOfName("jsx_merge_raw")).setValue(Mb);}};objJSX.getMergeDocument=function(d){d=jsx3.gui.RadioButton.getValue(d);var
ha=(this.getDescendantOfName(d)).getValue();var
ka;if(d.indexOf("_url")>-1){ka=new
jsx3.xml.Document();ka.setAsync(false);ka.load(ha);if(ka.hasError()){jsx3.util.Logger.doLog("MERGE01","The XML document located at, <b>"+ha+"</b>, could not be parsed due to the following reason(s):<br/>"+ka.getError());return;}}else if(d.indexOf("_cache")>-1){ka=(jsx3.ide.SERVER.getCache()).getDocument(ha);}else if(d.indexOf("_script")>-1){ka=jsx3.eval(ha);if(ka==null){jsx3.util.Logger.doLog("MERGE02","The script used to generate the source document for the 'Merge Tool' is returning null.");return;}else if(typeof ka.getRootNode!="function"){jsx3.util.Logger.doLog("MERGE03","The script used to generate the source document for the 'Merge Tool' is not returning a valid <b>jsx3.xml.Entity</b> or <b>jsx3.xml.Document</b> instance.");return;}}else{ka=new
jsx3.xml.Document();ka.loadXML(ha);if((ka.getError()).code!="0"){jsx3.util.Logger.doLog("MERGE01","The document that was entered into the 'Merge Tool' could not be parsed due to the following reason(s):<br/>"+ka.getError());return;}}return ka;};]]></onAfterDeserialize>
  <object type="jsx3.gui.Dialog">
   <dynamics jsxbgcolor="@Solid Medium"/>
   <variants jsxheight="475" jsxminx="720" jsxminy="475" jsxwidth="750" jsxzindex="5004"/>
   <strings jsxhelpid="ide.merge" jsxname="jsxdialog"/>
    <object type="jsx3.gui.WindowBar">
     <variants/>
     <strings jsxname="jsxcbar" jsxtext="XML/XSL Merge Tool"/>
      <object type="jsx3.gui.ToolbarButton">
       <dynamics/>
       <strings jsximage="jsxapp:/images/prototypes/menubar.gif" jsxname="jsxtoolbutton" jsxtip="Show/hide input controls"/>
       <events jsxexecute="var&#10;zb=(this.getAncestorOfType(jsx3.gui.Dialog)).getDescendantOfName(&quot;jsxlayout_merge&quot;);if((zb.getDimensionArray())[0]==0){zb.setDimensionArray([&quot;48&quot;,&quot;160&quot;,&quot;32&quot;,&quot;*&quot;],true);}else zb.setDimensionArray([0,0,0,&quot;*&quot;],true);"/>
      </object>
      <object type="jsx3.gui.ToolbarButton">
       <dynamics jsximage="@Min Icon" jsxtip="jsx3.gui.Dialog.min"/>
       <variants jsxdivider="1"/>
       <strings jsxname="jsxminbutton"/>
       <events jsxexecute="(this.getAncestorOfType(jsx3.gui.Dialog)).doToggleState();"/>
      </object>
      <object type="jsx3.gui.ToolbarButton">
       <dynamics jsxtip="jsx3.gui.Dialog.max"/>
       <strings jsximage="JSX/images/dialog/max.gif" jsxname="jsxmaxbutton"/>
       <events jsxexecute="(this.getAncestorOfType(jsx3.gui.Dialog)).doMaximize(this);"/>
      </object>
      <object type="jsx3.gui.ToolbarButton">
       <dynamics jsximage="@Close Icon" jsxtip="jsx3.gui.Dialog.close"/>
       <strings jsxname="jsxclosebutton"/>
       <events jsxexecute="(this.getAncestorOfType(jsx3.gui.Dialog)).doClose();"/>
      </object>
    </object>
    <include async="true" src="_merge.xml"/>
  </object>
</serialization>