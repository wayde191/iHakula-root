<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ Copyright (c) 2001-2009, TIBCO Software Inc.
  ~ Use, modification, and distribution subject to terms of license.
  -->
<plugins xmlns="http://www.generalinterface.org/gi/amp" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.generalinterface.org/gi/amp http://www.generalinterface.org/xsd/plugins.xsd">
  
  <plugin id="jsx3.ide.progress" name="IDE Progress Plug-In" version="0.1" xmlns="http://www.generalinterface.org/gi/amp" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.generalinterface.org/gi/amp http://www.generalinterface.org/xsd/plugin.xsd">

  <method id="setProgress" params="pct"><![CDATA[
    if (this._off) return;

    var canvas = this.getServer().getEnv("GUIREF");

    if (!canvas.firstChild || canvas.firstChild.id != "JSX") {
      if (this._ct == null)
        this._ct = 0;

      this._ct++;
      var maxPct = this._ct * 4; // smooth out progress if initial graph looks very small
                                 // minimum of 25 progress updates

      var thisPct = Math.min(pct, maxPct);

      if (this._lastpct == null || this._lastpct < thisPct) {
        this._lastpct = thisPct;
        this._setPCT(canvas, pct);
      }
    } else {
      this._off = true;
    }
  ]]></method>

  <method id="_setPCT" params="gui, pct"><![CDATA[
    if (!this._firsttime) {
      this._firsttime = true;

      var w = 450;
      var h = 225;
      var l = Math.round((gui.offsetWidth - w) / 2);
      var t = Math.round((gui.offsetHeight - h) / 3);
      gui.style.backgroundColor = "#ffffff";
      gui.innerHTML = '<div style="position:absolute;left:' + l + 'px;top:' + t + 'px;font-family:Verdana,Arial,sans-serif;font-size:12px;">' +
          '<img src="' + this.resolveURI('splash.jpg') + '" alt="General Interface Builder"/>' +
          '<div style="position:absolute;left:45px;top:113px;width:0px;overflow:hidden;height:10px;' +
             'background-image:url(' + this.resolveURI("progress.jpg") + ');">&#160;</div>' +
          '<div style="position:absolute;left:45px;top:135px;color:white;">' +
            'Loading Builder Plug-ins...</div>' +
          '</div>';
    }

    var bar = gui.firstChild.childNodes[1];
    bar.style.width = Math.round(360 * pct / 100) + "px";
  ]]></method>

  <method id="onComplete" params="pct">
  </method>

  <requires>
  </requires>
  
  <resources>
  </resources>

  <extension point="jsx3.amp.main.progress">
    <eval>this.getPlugIn()</eval>
  </extension>
  
</plugin>
  <plugin id="jsx3.ide" name="IDE Plug-In" version="0.1" xmlns="http://www.generalinterface.org/gi/amp" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.generalinterface.org/gi/amp http://www.generalinterface.org/xsd/plugin.xsd">

  <method id="getFileTypes">
    if (!this._types)
      this._types = this.getExtPoint("file-type").processExts();
    return this._types;
  </method>

  <method id="getFileType" params="id">
    return this.getFileTypes().find(function(e) { return e.getId() == id; }) || this.getDefaultFileType();
  </method>

  <method id="getTypeForFile" params="objFile">
    var t = this.getFileTypes();

    var xml = new jsx3.xml.Document().load(objFile.toURI());
    if (xml.hasError()) xml = null;

    var matching = t.filter(function(e) { return e.isTypeOf(objFile, xml); });
    matching.sort(function(a, b) {
      var va = a.getPrecedence(), vb = b.getPrecedence();
      return va &gt; vb ? 1 : (va == vb ? 0 : -1);
    });

    return matching[matching.length - 1];
  </method>

  <method id="getDefaultFileType">
    if (!this._defaulttype) {
      this._defaulttype = new jsx3.ide.FileType(this.getExt("type.component"),
          new jsx3.amp.XML({"@id":"_default", "@reloadable":"false",
              "@label":"Unknown", "@img":"jsxapp:/images/resourcefiles/other.gif"}));
    }
    return this._defaulttype;
  </method>

  <requires>
    <plugin id="jsx3.app.UserSettings"/>
    <plugin id="jsx3.gui.Dialog"/>
  </requires>
  
  <resources>
    <script id="filetype" load="early">
      <data><![CDATA[jsx3.Class.defineClass("jsx3.ide.FileType",null,null,function(m,l){var
ub={a:"id",b:"label",c:"img",d:"slow-reload",e:"true",f:"reloadable",g:"precedence"};l.init=function(i,h){this.u1=h;this.DI=i;};l.getExt=function(){return this.DI;};l.getId=function(){return this.u1.attr(ub.a);};l.getLabel=function(){return this.u1.attr(ub.b);};l.getImage=function(){return this.u1.attr(ub.c);};l.isSlowReload=function(){return this.u1.attr(ub.d)==ub.e;};l.isReloadable=function(){return this.u1.attr(ub.f)==ub.e;};l.toString=function(){return this.getId();};l.isTypeOf=function(h,o){return (this.getId()).toLowerCase()==(h.getExtension()).toLowerCase();};l.getPrecedence=function(){return parseInt(this.u1.attr(ub.g))||0;};});jsx3.Class.defineClass("jsx3.ide.FileType.Script",jsx3.ide.FileType,null,function(d,b){var
ub={a:"js"};b.isTypeOf=function(j,m){return ub.a==(j.getExtension()).toLowerCase();};});jsx3.Class.defineClass("jsx3.ide.FileType.XML",jsx3.ide.FileType,null,function(i,p){p.isTypeOf=function(c,a){return a!=null;};});jsx3.Class.defineClass("jsx3.ide.FileType.XSL",jsx3.ide.FileType,null,function(p,i){var
ub={a:"http://www.w3.org/1999/XSL/Transform",b:"http://www.w3.org/TR/WD-xsl"};i.isTypeOf=function(a,c){if(c){var
L=(c.getRootNode()).getNamespaceURI();return L==ub.a||L==ub.b;}return false;};});jsx3.Class.defineClass("jsx3.ide.FileType.Component",jsx3.ide.FileType,null,function(s,f){f.isTypeOf=function(m,q){if(q){var
rb=(q.getRootNode()).getNamespaceURI();return rb==jsx3.app.Model.CURRENT_VERSION||rb==jsx3.app.Model.CIF_VERSION;}return false;};});jsx3.Class.defineClass("jsx3.ide.FileType.JSS",jsx3.ide.FileType,null,function(n,k){var
ub={a:"jsxns",b:"urn:tibco.com/v3.0/dynamicproperties/1"};k.isTypeOf=function(d,i){return i!=null&&(i.getRootNode()).getAttribute(ub.a)==ub.b;};});jsx3.Class.defineClass("jsx3.ide.FileType.LJSS",jsx3.ide.FileType,null,function(o,j){var
ub={a:"jsxnamespace",b:"propsbundle"};j.isTypeOf=function(e,r){return r!=null&&r.getAttribute(ub.a)==ub.b;};});]]></data>
    </script>
    <script id="prefs">
      <data><![CDATA[jsx3.Class.defineClass("jsx3.ide.Preferences",jsx3.app.Settings,null,function(e,l){var
ub={a:"Error reading preferences XML ",b:": ",c:"data",d:"Corrupt preferences file ",e:"Saved settings to ",f:".",g:"Error saving settings.",h:"[jsx3.ide.Preferences ",i:"]"};l.init=function(a,d){this._file=a;if(!d){var
Ib=null;if(a&&a.isFile()){var
Xa=new
jsx3.xml.Document();Xa.load(a.toURI());if(Xa.hasError()){Xa=new
jsx3.xml.Document();Xa.loadXML(a.read());}if(Xa.hasError()){jsx3.ide.LOG.warn(ub.a+a.toURI()+ub.b+Xa.getError());}else if(Xa.getBaseName()!=ub.c){jsx3.ide.LOG.warn(ub.d+a.toURI()+ub.b+Xa);}else Ib=Xa;}d=new
jsx3.app.Settings(Ib);}this._delegate=d;};l.get=function(){return this._delegate.get.apply(this._delegate,arguments);};l.getNode=function(){return this._delegate.getNode.apply(this._delegate,arguments);};l.set=function(){return this._delegate.set.apply(this._delegate,arguments);};l.remove=function(){return this._delegate.remove.apply(this._delegate,arguments);};l.save=function(){if(this._file){jsx3.ide.writeBuilderXmlFile(this._file,jsx3.ide.makeXmlPretty(this.getNode(),true));jsx3.ide.LOG.debug(ub.e+this._file+ub.f);}else jsx3.ide.LOG.error(ub.g);};l.toString=function(){return ub.h+this._file+ub.i;};});]]></data>
    </script>
    <script id="ide">
      <data><![CDATA[if(jsx3.ide==null)jsx3.ide={};jsx3.util.EventDispatcher.jsxclass.mixin(jsx3.ide);jsx3.ide.RECENT_PROJECT_MAX=10;jsx3.ide.RECENT_FILES_MAX=15;jsx3.ide.LOG=jsx3.util.Logger.getLogger("jsx3.ide");jsx3.ide.onStartUp=function(j){var
ub={a:"ide",b:"startup"};var
ia=jsx3.util.Job;this._addJob(new
ia(null,function(){(jsx3.ide._loadFileSystem()).when((jsx3.$F(this.finish)).bind(this));return ia.WAIT;}));this._addJob(j);this._addJob(function(){jsx3.IDE.subscribe(jsx3.app.Server.HELP,jsx3.ide.onContextHelp);(jsx3.IDE.getRootBlock()).setHelpId(ub.a);});this._addJob(function(){if(!jsx3.ide.verifyUserHome()){this._addJob(jsx3.ide.showLicenseAgreement);this._addJob(jsx3.ide.showNewUserHomeDialog);}else if(jsx3.STARTUP_EVENT&&jsx3.STARTUP_EVENT.ctrlKey()&&jsx3.STARTUP_EVENT.altKey()){jsx3.ide.clearActiveProject();this._addJob(jsx3.ide.showWelcomeDialog);this._addJob(function(){jsx3.ide.publish({subject:ub.b});});this._addJob(function(){jsx3.IDE.publish({subject:ub.b});});}else this._addJob(jsx3.ide.Z5);});this._startJobs();};jsx3.ide._addJob=function(o){var
Fb=jsx3.util.Job;var
X=jsx3.ide.QUEUE;if(!X){X=jsx3.ide.QUEUE=new
jsx3.util.JobGraph();X.pause();}var
wa;if(o instanceof Function){wa=new
Fb(null,function(){o.apply(jsx3.ide);return Fb.SLEEP;});}else wa=o;if(this._LAST_JOB&&this._LAST_JOB.state()!=Fb.FINISHED)X.addJob(wa,this._LAST_JOB);else X.addJob(wa);this._LAST_JOB=wa;};jsx3.ide._startJobs=function(){jsx3.ide.QUEUE.start();};jsx3.ide._pauseJobs=function(){jsx3.ide.QUEUE.pause();};jsx3.ide._loadFileSystem=jsx3.$Y(function(n){((jsx3.ide.getPlugIn("jsx3.io")).loadAvailableFileSystems()).when(n);});jsx3.ide.Z5=function(){this._addJob(new
jsx3.util.Job(null,function(){var
ib=(jsx3.$F(this.finish)).bind(this);(jsx3.ide._initProject()).when(function(){(jsx3.ide._onStartUp3()).when(ib);});return jsx3.util.Job.WAIT;}));};jsx3.ide._initProject=jsx3.$Y(function(c){var
ub={a:"jsx3.ide.project",b:"Could not open the project <b>",c:"</b> because it is not a project directory."};var
La=jsx3.ide.getPlugIn(ub.a);var
ob=jsx3.ide.getActiveProject();if(ob){(La.load()).when(function(){var
Y=jsx3.ide.getHomeRelativeFile(ob);var
Ua=La.getTypeForDir(Y);if(Ua){((Ua.getPlugIn()).load()).when(function(){var
Ka=Ua.getClassObj();var
La=jsx3.ide.PROJECT=Ka.newInstance(Ua,Y);(La.initialize()).when(c);});}else jsx3.IDE.alert(null,ub.b+ob+ub.c,function(p){p.doClose();c.done();});});}else (La.load()).when(c);});jsx3.ide._onStartUp3=jsx3.$Y(function(b){var
ub={a:"lastProject",b:" - ",c:"startup"};var
C=jsx3.ide.PROJECT;jsx3.gui.Event.subscribe(jsx3.gui.Event.BEFOREUNLOAD,jsx3.ide._onBeforeShutdown);if(C){var
qa=jsx3.ide.getIDESettings();qa.set(ub.a,(((jsx3.ide.getCurrentUserHome()).toURI()).relativize((C.getDirectory()).toURI())).toString());jsx3.ide.addToRecentProjects(C);var
t=jsx3.IDE.getRootDocument();t.title=C.getTitle()+ub.b+t.title;var
P=jsx3.ide._checkUpgradeProject(C);P.when(function(){if(P.rv()){var
ha=jsx3.ide.C7(C);ha.when(function(){var
sa=C.load();sa.when(function(){var
Jb=jsx3.ide._onStartUp4();Jb.when(b);});});}else{jsx3.ide.PROJECT=null;jsx3.ide.showWelcomeDialog();}});}else{this._addJob(jsx3.ide.showWelcomeDialog);b.done();}this._addJob(function(){jsx3.ide.publish({subject:ub.c});jsx3.IDE.publish({subject:ub.c});});});jsx3.ide._checkUpgradeProject=jsx3.$Y(function(d){var
ub={a:"This project was created by an earlier version of General Interface Builder. Once this project has been opened by this version of General Interface Builder it may not be compatible with prior versions. Continue?",b:"Continue",c:"Cancel",d:"This project was created by a higher version of General Interface Builder (",e:") and cannot be opened by this version (",f:")."};var
Ha=(d.args())[0];var
Nb=Ha.getGIVersion();var
O=jsx3.util.compareVersions(Nb,jsx3.ide.getProjectAuthorVersion());if(O<0){if(Ha.isNeedsUpgrade()){jsx3.IDE.confirm(null,ub.a,function(l){l.doClose();Ha.upgrade();d.done(true);},function(r){r.doClose();d.done(false);},ub.b,ub.c);}else d.done(true);}else{O=jsx3.util.compareVersions(Nb,jsx3.System.getVersion());if(O>0){jsx3.IDE.alert(null,ub.d+Nb+ub.e+jsx3.System.getVersion()+ub.f,function(c){c.doClose();d.done(false);});}else d.done(true);}});jsx3.ide._onStartUp4=jsx3.$Y(function(c){var
ub={a:"jsx3.ide.ui",b:"prefs",c:"builder",d:"welcome_v",e:"jsxnowelc"};this._addJob(function(){((jsx3.ide.getPlugIn(ub.a)).getPaletteManager()).startup();});var
ra=jsx3.ide.getIDESettings();var
Bb=ra.get(ub.b,ub.c,ub.d,jsx3.getVersion());if((Bb||Bb==null)&&!(jsx3.app.Browser.getLocation()).getQueryParam(ub.e))this._addJob(jsx3.ide.showWelcomeDialog);if(jsx3.STARTUP_EVENT==null||!jsx3.STARTUP_EVENT.ctrlKey())this._addJob(jsx3.ide._openPreviouslyOpenFiles);else this._addJob(function(){jsx3.ide.syncPreviouslyOpenFiles(null,[]);});c.done();});jsx3.ide.C7=jsx3.$Y(function(r){var
ub={a:"Loading Addins",b:"Loading addins, please wait."};var
L=(r.args())[0];var
ja=jsx3.IDE.alert(ub.a,ub.b,null,false,{nonModal:true});jsx3.sleep(function(){var
V=jsx3.ide.loadBuilderAndProjectAddins(L.getRequiredAddins());V.when(function(){ja.doClose();r.done();});});});jsx3.ide.getIDESettings=function(){if(jsx3.ide.B8==null){var
K=null;var
kb="settings/builder.xml";var
ea=jsx3.ide.getCurrentUserHome();if(ea){K=ea.resolve(kb);if(!K.exists()){var
t=jsx3.ide.getBuilderRelativeFile(jsx3.ide.HOME_TEMPLATE_DIR);var
ta=t.resolve(kb);(K.getParentFile()).mkdirs();ta.copyTo(K);K.setReadOnly(false);}}jsx3.ide.B8=new
jsx3.ide.Preferences(K);}return jsx3.ide.B8;};jsx3.ide._onBeforeShutdown=function(d){jsx3.ide._persistSplittersOnShutdown();var
t=jsx3.ide.getIDESettings();t.save();if(jsx3.ide.PROJECT)if(jsx3.ide.isAnyEditorDirty())d.returnValue="WARNING: You have unsaved changes in your project. Click on Cancel to go back to General Interface Builder to save your changes.";else d.returnValue="Unloading the current page will close General Interface Builder and end your session.";};jsx3.ide.onShutdown=function(q){jsx3.IDE.publish({subject:"shutdown"});};jsx3.ide._openPreviouslyOpenFiles=function(){var
ub={a:"Opening Project",b:"Opening component files for project ",c:" ...",d:"Cancel"};var
M=jsx3.ide.getPreviouslyOpenFiles();if(M==null)M=jsx3.ide.PROJECT.getDefaultOpenFiles();if(M.length==0)return;var
Ma=jsx3.IDE.alert(ub.a,ub.b+jsx3.ide.PROJECT.getPathFromHome()+ub.c,jsx3.ide._cancelPreviouslyOpenFiles,ub.d);this._pauseJobs();this._addJob(function(){Ma.doClose();},0);this._addJob(new
jsx3.util.Job(null,function(){var
D=null;(jsx3.$A(M)).each(function(l){var
na=jsx3.ide.getResourceByFile(l);if(na)D=jsx3.ide.doOpenForEdit(l,na.type,false,D);});if(D){D.when((jsx3.$F(this.finish)).bind(this));return jsx3.util.Job.WAIT;}}));this._startJobs();};jsx3.ide._cancelPreviouslyOpenFiles=function(c){this._pauseJobs();c.doClose();(jsx3.ide.closeAll()).when(function(){jsx3.ide.QUEUE.clear();jsx3.ide._startJobs();});};jsx3.ide._getSystemURI=function(){return jsx3.app.Browser.getLocation();};jsx3.ide.getSystemDirFile=function(){if(!jsx3.ide._SYSTEM_DIRFILE)jsx3.ide._SYSTEM_DIRFILE=((jsx3.ide.getPlugIn("jsx3.io")).getFileForURI(jsx3.ide._getSystemURI())).resolve(".");return jsx3.ide._SYSTEM_DIRFILE;};jsx3.ide.getSystemRelativeFile=function(k){var
Mb=jsx3.net.URI.valueOf(k);if(Mb.isAbsolute())return (jsx3.ide.getPlugIn("jsx3.io")).getFileForURI(Mb);else return (this.getSystemDirFile()).resolve(k);};jsx3.ide.getBuilderRelativeFile=function(o){return this.getSystemRelativeFile(jsx3.IDE.resolveURI(o));};jsx3.ide.relativePathTo=function(d){return (jsx3.ide.getSystemDirFile()).relativePathTo(d);};jsx3.ide.open=function(){var
ub={a:"jsxdialog",b:"jsx3.io.browser"};var
u=jsx3.IDE.getJSXByName(ub.a);if(u){u.focus();return;}var
Fb=jsx3.ide.getCurrentUserHome();(jsx3.ide.getPlugIn(ub.b)).chooseFiles(jsx3.IDE.getRootBlock(),{name:ub.a,modal:false,folder:jsx3.ide.getCurrentDirectory(),baseFolder:Fb,onChoose:function(r){for(var
_=0;_<r.length;_++)jsx3.ide.doOpenForEdit(r[_]);if(r.length>0)jsx3.ide.setCurrentDirectory(r[0].getParentFile());}});};jsx3.ide.doOpenResources=function(h){var
u=[];for(var
_a=0;_a<h.length;_a++){var
tb=jsx3.ide.getFileForResource(h[_a]);if(tb!=null&&tb.isFile()){var
qa=jsx3.ide.getResourceById(h[_a]);jsx3.ide.doOpenForEdit(tb,qa.getType(),false);}else u.push(h[_a]);}if(u.length>0){var
Hb=u.length==1?"The file for resource <code>"+u[0]+"</code> was not found. Right-click the file in the Project Files palette, select Edit Profile, and confirm that the resource URI corresponds to a file on disk.":"The files for resources {<code>"+u.join(", ")+"</code>} were not found. Right-click each file in the Project Files palette, select Edit Profile, and confirm that its resource URI corresponds to a file on disk.";jsx3.IDE.alert("File"+(u.length==1?"":"s")+" Not Found",Hb);}};jsx3.ide.saveAndReload=function(r){r=r||jsx3.ide.getActiveEditor();if(r!=null&&jsx3.ide.ComponentEditor&&r instanceof jsx3.ide.ComponentEditor)(jsx3.ide.save(r)).when(function(f){if(f)jsx3.ide.revert(r,true);});else (jsx3.ide.save(r)).when(function(l){if(l)jsx3.ide.reload(r);});};jsx3.ide.saveAll=jsx3.$Y(function(o){var
J=(o.args())[0];var
_=jsx3.ide.getAllEditors();if(J==null)J=0;if(J<_.length){var
na=_[J];(jsx3.ide.save(na)).when(function(d){if(d)(jsx3.ide.saveAll(J+1)).when(o);});}else o.done();});jsx3.ide.save=jsx3.$Y(function(o){var
ub={a:"Save Failed",b:"The file <b>",c:"</b> was not saved because of an error. Check that you have permission to write to the file, that it is ",d:"not locked, and that the path is valid for this operating system.<br/><br/>",e:"Consult the System Log for a more detailed error report."};var
E=(o.args())[0]||jsx3.ide.getActiveEditor();if(!E){o.done(false);}else if(E.isUnsaved()){(jsx3.ide.saveAs(E)).when(o);}else (E.preSaveCheck()).when(function(e){if(e){o.done(false);}else if(E.save()){o.done(true);}else{var
yb=E.getOpenFile();var
J=yb!=null?(jsx3.ide.getActiveProjectDirectory()).relativePathTo(yb):E.getTitle();jsx3.IDE.alert(ub.a,ub.b+jsx3.net.URI.decode(J)+ub.c+ub.d+ub.e,(jsx3.$F(function(q){q.doClose();o.done(false);})).bind(this),null,{width:300,height:175});}});});jsx3.ide.saveAndClose=jsx3.$Y(function(l){var
R=(l.args())[0]||jsx3.ide.getActiveEditor();if(R){(jsx3.ide.save(R)).when(function(h){if(h)jsx3.IDE.EDITOR_MGR.close(R);l.done(h);});}else l.done(false);});jsx3.ide.saveAs=jsx3.$Y(function(s){var
ub={a:"jsx3.io.browser",b:"jsx_ide_file_dialog"};var
Wa=(s.args())[0]||jsx3.ide.getActiveEditor();if(!Wa==null){s.done(false);}else{var
Ha=jsx3.ide.getCurrentUserHome();(jsx3.ide.getPlugIn(ub.a)).saveFile(jsx3.IDE.getRootBlock(),{name:ub.b,modal:true,folder:jsx3.ide.getCurrentDirectory(),baseFolder:Ha,onChoose:(jsx3.$F(function(a){(jsx3.ide._saveAsChoose(a,Wa)).when(s);})).bind(this)});}});jsx3.ide._saveAsChoose=jsx3.$Y(function(e){var
ub={a:"Save Failed",b:"The file <b>",c:"</b> was not saved because of an error. Check that you have permission to write to the file, that it is ",d:"not locked, and that the path is valid for this operating system.<br/><br/>",e:"Consult the System Log for a more detailed error report."};var
za=(e.args())[0],ba=(e.args())[1];var
pb=jsx3.ide.getEditorForFile(za);(ba.preSaveCheck()).when(function(f){if(f){e.done(false);}else if(pb!=null){(jsx3.ide.close(pb)).when(function(){(jsx3.ide._saveAsChoose(za,ba)).when(e);});}else if(ba.saveAs(za)){var
S=ba.getFileType();if(S==null)S=jsx3.ide.getFileType(za);jsx3.ide.addResourceToProject(za,S);jsx3.ide.setCurrentDirectory(za.getParentFile());e.done(true);}else jsx3.IDE.alert(ub.a,ub.b+jsx3.net.URI.decode((jsx3.ide.getActiveProjectDirectory()).relativePathTo(za))+ub.c+ub.d+ub.e,function(g){g.doClose();e.done(false);},null,{width:300,height:175});});});jsx3.ide.close=jsx3.$Y(function(b){var
ub={a:"Confirm Close",b:"Save file ",c:" before closing? Otherwise changes will be lost.",d:"Save",e:"Cancel",f:"Don't Save"};var
v=(b.args())[0]||jsx3.ide.getActiveEditor();if(!v){b.done(false);}else if(!v.isDirty()){jsx3.IDE.EDITOR_MGR.close(v);b.done(true);}else jsx3.IDE.confirm(ub.a,ub.b+v.getTitle()+ub.c,function(g){g.doClose();(jsx3.ide.saveAndClose(v)).when(b);},function(q){q.doClose();b.done(false);},ub.d,ub.e,1,function(r){r.doClose();jsx3.IDE.EDITOR_MGR.close(v);b.done(true);},ub.f);});jsx3.ide.closeAll=jsx3.$Y(function(i){var
fa=(jsx3.ide.getAllEditors()).concat();for(var
D=0;D<fa.length;D++){var
Ra=fa[D];if(Ra.isDirty()){(jsx3.ide.close(Ra)).when(function(){(jsx3.ide.closeAll()).when(i);});return;}else jsx3.IDE.EDITOR_MGR.close(Ra);}i.done();});jsx3.ide.revert=jsx3.$Y(function(n){var
ub={a:"Confirm Revert",b:"Are you sure you want to revert the file <b>",c:"</b> to its last saved state? All changes will be lost.",d:"Revert",e:"Cancel"};var
wb=(n.args())[0]||jsx3.ide.getActiveEditor();var
ja=(n.args())[1];if(ja){wb.revert();n.done();}else jsx3.IDE.confirm(ub.a,ub.b+wb.getTitle()+ub.c,function(l){l.doClose();wb.revert();n.done();},null,ub.d,ub.e,2);});jsx3.ide.revertAll=function(s){var
ub={a:"Confirm Revert All",b:"Are you sure you want to revert each open file to its last saved state? All changes will be lost.",c:"Revert All",d:"Cancel"};if(s){var
Jb=jsx3.ide.getAllEditors();for(var
x=0;x<Jb.length;x++)Jb[x].revert();}else jsx3.IDE.confirm(ub.a,ub.b,function(i){i.doClose();jsx3.ide.revertAll(true);},null,ub.c,ub.d,2);};jsx3.ide.reload=function(c){var
ub={a:"Could not reload resource ",b:" because no resource was found with that path. ",c:"Make sure that the config.xml file is updated to the 3.2+ format."};c=c||jsx3.ide.getActiveEditor();if(c){var
Ua=c.getOpenFile();var
eb=jsx3.ide.getResourceByFile(Ua);if(eb){window.setTimeout(function(){jsx3.ide.doReloadResourceObj(eb);},100);}else jsx3.ide.LOG.error(ub.a+Ua+ub.b+ub.c);}};jsx3.ide.doTextEditorKeyDown=function(q,c,g){var
ub={a:"jsxmenu_typeaheadscript",b:"jsxmenu_typeahead",c:"language/eng/typeahead_script.xml",d:"jsxmenu_typeaheadcss",e:"components/containers/menu-typeahead-script.xml",f:"The JavaScript editor type-ahead menu is disabled because the data file does not exist."};var
eb=c.getRendered();if(q.ctrlKey()&&q.spaceKey()&&!q.shiftKey()&&!q.altKey()){var
jb=null;if(g==null){jb=ub.a;}else{var
t=jsx3.ide.getEditorForTab(g);if(jsx3.ide.TextEditor&&t instanceof jsx3.ide.TextEditor||jsx3.ide.CacheEditor&&t instanceof jsx3.ide.CacheEditor){var
Fb=t.getFileType();jb=ub.b+Fb;}}var
tb=jsx3.IDE.getJSXByName(jb);if(jb==ub.a&&tb==null){var
kb=jsx3.ide.getBuilderRelativeFile(ub.c);if(kb.isFile()){var
fb=(jsx3.IDE.getJSXByName(ub.d)).getParent();tb=fb.load(ub.e);}else jsx3.ide.LOG.warn(ub.f);}if(tb){eb._jsxsel=jsx3.html.getSelection(eb);q.cancelBubble();q.cancelReturn();tb.showContextMenu(q,c,null,{L:eb._jsxsel.getOffsetLeft(),T:eb._jsxsel.getOffsetTop()});}}else if(g!=null){var
ta=jsx3.ide.getEditorForTab(g);if(!ta.isDirty()){var
P=ta.getEditorText();jsx3.sleep(function(){if(ta.isOpen()&&P!=ta.getEditorText())ta.setDirty(true);});}}};jsx3.ide.onTypeAheadClosed=function(f){var
qa=f.target;jsx3.ide.doInsertCode(null,qa.getContextParent());};jsx3.ide.doInsertCode=function(s,n,l){var
nb=n.getRendered();var
Mb=nb._jsxsel;if(Mb!=null){nb._jsxsel=null;var
L=s?s.getAttribute("syntax"):null;if(L==null){var
ca=s.selectSingleNode("syntax");if(ca)L=ca.getValue();}if(L!=null){var
ea=Mb.getText();Mb.setText(ea.charAt(ea.length-1)==" "?L+" ":L);var
X=n.getAncestorOfType(jsx3.gui.Tab);if(X){X=X.getAncestorOfType(jsx3.gui.Tab);if(X){var
la=jsx3.ide.getEditorForTab(X);if(la)la.setDirty(true);}}}Mb.insertCaret("end");}};jsx3.ide.getDocumentType=function(b){if(b.hasError())return "xml";var
ca=(b.getRootNode()).getNamespaceURI();return ca=="http://www.w3.org/1999/XSL/Transform"||ca=="http://www.w3.org/TR/WD-xsl"?"xsl":"xml";};jsx3.ide._adjustSplittersOnStartup=function(){var
I=jsx3.ide.getIDESettings();for(var
Wa=5;Wa>0;Wa--){var
Ia=jsx3.IDE.getJSXByName("jsx_ide_splitter"+Wa);var
ra=I.get("window","splitters",Ia.getName());if(ra!=null)Ia.setSubcontainer1Pct(ra,true);else if(Ia.jsxdefault1pct!=null)Ia.setSubcontainer1Pct(Ia.jsxdefault1pct,true);}};jsx3.ide._persistSplittersOnShutdown=function(){var
ub={a:"window",b:"splitters"};var
G=(jsx3.IDE.getBodyBlock()).findDescendants(function(h){return h instanceof jsx3.gui.Splitter;},false,true);var
Fb=jsx3.ide.getIDESettings();for(var
Nb=0;Nb<G.length;Nb++){var
_a=G[Nb];var
gb=Fb.set(ub.a,ub.b,_a.getName(),_a.getSubcontainer1Pct());}};jsx3.ide.writeUserFile=function(d,e){var
S=jsx3.ide.getIDESettings();var
ya=S.get("prefs","builder")||{};return d.write(e,{charset:ya.outputcharset,linebreakmode:ya.outputlinesep,charsetfailover:true});};jsx3.ide.writeUserXmlFile=function(b,s){var
La=(b.getFileSystem()).createTempFile("gi-ide.xml");var
Gb=jsx3.ide.getIDESettings();var
Ua=Gb.get("prefs","builder")||{};var
Ea=Ua.xmlencodeas?Ua.xmloutputcharset:Ua.outputcharset;var
ea=false;if(Ua.addcharset){if(Ea&&La.write(this.zO(s.serialize(true,Ea)),{charset:Ea,linebreakmode:Ua.outputlinesep}))ea=true;else ea=La.write(this.zO(s.serialize()),{linebreakmode:Ua.outputlinesep,charsetfailover:true});}else ea=La.write(this.zO(s.serialize()),{charset:Ea,linebreakmode:Ua.outputlinesep,charsetfailover:true});if(ea){var
ma=(new
jsx3.xml.Document()).load(La.toURI());ea=!ma.hasError();if(ea){La.renameTo(b);}else{jsx3.ide.LOG.error("The XML file "+b+" was not saved because parsing the written file produced the following error: "+ma.getError());La.deleteFile();}}return ea;};jsx3.ide.writeBuilderFile=function(l,p){return l.write(p,{charset:"utf-8",linebreakmode:"unix",charsetfailover:true,quiet:true});};jsx3.ide.writeBuilderXmlFile=function(c,r){if(c.write(this.zO(r.serialize(true,"utf-8")),{charset:"utf-8",linebreakmode:"unix",quiet:true}))return true;else return c.write(this.zO(r.serialize(true)),{linebreakmode:"unix",charsetfailover:true});};jsx3.ide.Ot=jsx3.IDE.resolveURI("xml/xmlpretty.xsl");jsx3.ide.makeXmlPretty=function(n,q){var
hb=(jsx3.getSystemCache()).getOrOpenDocument(this.Ot,null,jsx3.xml.XslDocument.jsxclass);var
Xa=hb.transform(n);return q?(new
jsx3.xml.Document()).loadXML(Xa):jsx3.ide.zO(Xa);};jsx3.ide.L1=/<([\w\:]+)( [^<>]*)?(?!\/)><\/([\w\:]+)>/g;jsx3.ide.zO=function(e){if(jsx3.getXmlVersion()<=3){var
Qa=e.split("<![CDATA[");for(var
jb=0;jb<Qa.length;jb++)if(jb==0){Qa[jb]=Qa[jb].replace(jsx3.ide.L1,jsx3.ide.gW);}else{var
Q=Qa[jb].split("]]]]><![CDATA[>",2);Q[1]=Q[1].replace(jsx3.ide.L1,jsx3.ide.gW);Qa[jb]=Q.join("]]]]><![CDATA[>");}return Qa.join("<![CDATA[");}else return e;};jsx3.ide.gW=function(q,a,s,r){if(a==r){return "<"+a+(s!=null?s:"")+"/>";}else return q;};jsx3.ide.getPlugIn=function(i){return (jsx3.amp.Engine.getEngine(jsx3.IDE)).getPlugIn(i);};]]></data>
    </script>
    <script id="addins">
      <data><![CDATA[(jsx3.$O(jsx3.ide)).extend({getJsxAddins:function(){var
C=[];var
ua=jsx3.ide.getSystemRelativeFile(jsx3.ADDINSPATH);if(ua.isDirectory()){var
Gb=ua.listFiles();for(var
za=0;za<Gb.length;za++){var
Da=Gb[za];if(jsx3.ide.isFileToIgnore(Da))continue;if(jsx3.ide.lI(Da))C.push(new
jsx3.app.AddIn(Da.getName()));}}var
_=jsx3.ide.getHomeRelativeFile("addins");if(_.isDirectory()){var
Gb=_.listFiles();for(var
za=0;za<Gb.length;za++){var
Da=Gb[za];if(jsx3.ide.isFileToIgnore(Da))continue;if(jsx3.ide.lI(Da))C.push(new
jsx3.app.AddIn("user:"+Da.getName()));}}return C;},lI:function(h){if(h.isDirectory()){var
Xa=h.resolve(jsx3.CONFIG_FILE);if(Xa.isFile())return true;}return false;},loadBuilderAndProjectAddins:jsx3.$Y(function(f){var
ub={a:"Addin ",b:" requires JSX version ",c:" or greater.",d:"jsx3.ide.addins"};var
vb=(f.args())[0];var
Kb=[];for(var
va=0;va<vb.length;va++)if(jsx3.util.compareVersions(vb[va].getJsxVersion(),jsx3.System.getVersion())<=0){var
ta=jsx3.CLASS_LOADER.loadAddin(vb[va]);if(ta)Kb.push(ta);}else jsx3.ide.LOG.error(ub.a+vb[va]+ub.b+vb[va].getJsxVersion()+ub.c);var
ka=null;for(var
va=0;va<Kb.length&&ka==null;va++)ka=Kb[va].graph();if(ka){ka.addJob(new
jsx3.util.Job(ub.d,function(){f.done();}),Kb);}else f.done();})});]]></data>
    </script>
    <script id="dom">
      <prereq id="ide"/>
    <data><![CDATA[(jsx3.$O(jsx3.ide)).extend({ROOT_DOM_NODE_ID:"_jsxdomroot",getForIdOrSelected:function(j,k){if(j==this.ROOT_DOM_NODE_ID){if(k)return [(this.getActiveServer()).getBodyBlock()];}else if(jsx3.$A.is(j)){var
Jb=[];for(var
na=0;na<j.length;na++)if(j[na]==this.ROOT_DOM_NODE_ID){if(k)Jb.push((this.getActiveServer()).getBodyBlock());}else{var
pb=jsx3.GO(j[na]);if(pb)Jb.push(pb);}return Jb;}else if(j){var
Jb=jsx3.GO(j);if(Jb)return [Jb];}else return this.getSelected(k);return [];},getSelected:function(a){var
u=this.getActiveEditor();if(u){var
Ia=u.getSelection();if(!a)Ia=Ia.filter(function(p){return p!=(p.getServer()).getBodyBlock();});return Ia;}else return jsx3.$A();},getRecycleBin:function(m){if(m==null){m=this.getActiveServer();if(m==null)return null;}if(this._TRASH==null){var
kb=jsx3.IDE.getInvisibleRoot();this._TRASH=new
jsx3.gui.Block("recycling",null,null,0,0);kb.setChild(this._TRASH);}var
_=m.getEnv("COMPONENTURL");var
Kb=this._TRASH.getChild(_);if(Kb==null){Kb=new
jsx3.gui.Block(_,null,null,0,0);this._TRASH.setChild(Kb);}return Kb;},maybeSelectNewDom:function(h,l){var
ea=this.getIDESettings();if(ea.get("prefs","builder","domfocus"))this.setDomValue(h);},setDomValue:(jsx3.$F(function(q){(this.getActiveEditor()).setSelection(q);})).throttled()});]]></data>
    </script>
    <script id="editor">
      <data><![CDATA[jsx3.ide.getActiveServer=function(){var
ba=jsx3.ide.getActiveEditor();return ba?ba.getServer():null;};jsx3.ide.getActiveEditor=function(){var
Ca=jsx3.ide.getPlugIn("jsx3.ide.editor");return Ca.getActiveEditor();};jsx3.ide.getEditorForTab=function(s){return s.getEditor();};jsx3.ide.getEditorForJSX=function(j){var
ta=j.getServer();return (jsx3.ide.getAllEditors()).find(function(c){return c.getServer()==ta;});};jsx3.ide.setTabReadWrite=function(h){var
B=jsx3.ide.getEditorForTab(h);if(B)B.setReadOnly(false);};jsx3.ide.getEditorForFile=function(k){return (jsx3.ide.getAllEditors()).find(function(b){return k.equals(b.getOpenFile());});};jsx3.ide.getAllEditors=function(){var
x=jsx3.ide.getPlugIn("jsx3.ide.editor");return x?x.getEditors():jsx3.$A();};jsx3.ide.doNewEditor=function(d){var
ub={a:"jsx3.ide.editor"};var
oa=jsx3.ide.getPlugIn(ub.a);(oa.load()).when(function(){oa.newEditor(d);});};jsx3.ide.isAnyEditorDirty=function(){return (jsx3.ide.getAllEditors()).find(function(i){return i.isDirty();})!=null;};]]></data>
    </script>
    <script id="home">
      <data><![CDATA[(jsx3.$O(jsx3.ide)).extend({DEFAULT_USER_HOME:"TibcoGI",HOME_TEMPLATE_DIR:"GI_User",verifyUserHome:function(){var
O=jsx3.ide.getCurrentUserHome();if(O!=null){if(!jsx3.ide.iN(O)){jsx3.ide.LOG.error("When running in Internet Explorer, your workspace must be on the same drive as the General Interface installation.");return false;}jsx3.setEnv("jsxhomepath",((jsx3.ide.getSystemDirFile()).toURI()).relativize(O.toURI()));jsx3.ide.createUserHome(O);return true;}else return false;},iN:function(i){if(jsx3.CLASS_LOADER.IE){var
L=(jsx3.ide.getSystemDirFile()).getAbsolutePath();var
wb=i.getAbsolutePath();var
Fb=L.indexOf(":");var
Ra=L.indexOf(":");if(Fb>=0&&Ra>=0){var
K=(L.substring(L.lastIndexOf("/",Fb),Fb)).toUpperCase();var
E=(wb.substring(wb.lastIndexOf("/",Ra),Ra)).toUpperCase();return K==E;}else return Fb<0&&Ra<0;}return true;},showNewUserHomeDialog:function(){var
tb=jsx3.IDE.getJSXByName("jsx_ide_newhome");if(tb==null)tb=(jsx3.IDE.getRootBlock()).load("components/newhome.xml");tb.focus();},onSelectNewUserHome:function(q,d){var
ub={a:"File ",b:" already exists and is not a directory.",c:"When running in Internet Explorer, your workspace must be on the same drive as the General Interface installation.",d:"Error creating workspace: ",e:"Error creating user directory ",f:"."};var
Wa=jsx3.ide.getSavedUserHome();if(!q.equals(Wa)||!q.isDirectory()){if((q.getFileSystem()).hasWrite()){if(q.exists()&&!q.isDirectory()){d.alert(null,ub.a+q+ub.b);return false;}if(!jsx3.ide.iN(q)){d.alert(null,ub.c);return false;}var
Ab;jsx3.tcf(function(){q.mkdirs();jsx3.ide.createUserHome(q);},function(g){g=jsx3.NativeError.wrap(g);d.alert(null,ub.d+g);jsx3.ide.LOG.error(ub.e+q+ub.f,g);Ab=false;});if(Ab!=null)return Ab;}jsx3.ide._setCurrentUserHome(q);}return true;},createUserHome:function(j){var
Db=jsx3.ide.getBuilderRelativeFile(jsx3.ide.HOME_TEMPLATE_DIR);if(Db.isDirectory()){if(Db.equals(j)||j.isDescendantOf(Db))throw new
jsx3.Exception("Illegal workspace: "+j);var
qb=Db.listFiles();for(var
wa=0;wa<qb.length;wa++){var
qa=qb[wa];if(jsx3.ide.isFileToIgnore(qa))continue;var
Qa=j.resolve(qa.getName());if(!Qa.exists()){jsx3.ide.LOG.debug("Creating "+Qa+".");this.copyDirectory(qa,Qa);}else jsx3.ide.LOG.debug("Skipping "+Qa+".");}var
ob=["JSXAPPS/launcher.html","JSXAPPS/launcher_ide.html"];var
x=(jsx3.ide.getSystemRelativeFile("shell.html")).toURI();var
jb=(jsx3.ide.getSystemRelativeFile("GI_Builder.html")).toURI();for(var
wa=0;wa<ob.length;wa++){var
Ea=ob[wa];var
qa=Db.resolve(Ea);var
Qa=j.resolve(Ea);var
ua=qa.read();if(ua)ua=(ua.replace(/@SHELLPATH@/g,x)).replace(/@BUILDERPATH@/g,jb);jsx3.ide.writeBuilderFile(Qa,ua);}}else throw new
jsx3.Exception("GI_USER template directory not found: "+Db);},copyDirectory:function(i,m){m.mkdirs();(i.listFiles()).each(function(e){if(!jsx3.ide.isFileToIgnore(e)){var
Gb=m.resolve(e.getName());if(e.isFile()){e.copyTo(Gb);}else if(e.isDirectory())jsx3.ide.copyDirectory(e,Gb);}});},getHomeRelativeFile:function(i){return (this.getCurrentUserHome()).resolve(i);},getSavedUserHome:function(){var
da=(jsx3.ide.getPlugIn("jsx3.amp.persist")).getFirstProvider();if(da){var
eb=da.get("workspace");if(eb){var
ma=(jsx3.ide.getPlugIn("jsx3.io")).getFileForURI(jsx3.net.URI.valueOf(eb));if(ma&&ma.isDirectory())return ma;}}else jsx3.ide.LOG.error("No provider is available for persisting data between browser sessions.");return null;},getCurrentUserHome:function(){if(!jsx3.ide._CURRENT_USER_HOME){var
Gb=(jsx3.app.Browser.getLocation()).getQueryParam("jsxhome");if(Gb){var
Pa=jsx3.ide.getSystemRelativeFile(Gb);if(Pa.isDirectory())jsx3.ide._CURRENT_USER_HOME=Pa;}if(!jsx3.ide._CURRENT_USER_HOME)jsx3.ide._CURRENT_USER_HOME=jsx3.ide.getSavedUserHome();}return jsx3.ide._CURRENT_USER_HOME;},_setCurrentUserHome:function(b){var
T=(jsx3.ide.getPlugIn("jsx3.amp.persist")).getFirstProvider();if(T){if(b)T.put("workspace",(b.toURI()).toString());else T.remove("workspace");}else jsx3.ide.LOG.error("No provider is available for persisting data between browser sessions.");}});]]></data>
    </script>
    <script id="palettes">
      <data><![CDATA[(jsx3.$O(jsx3.ide)).extend({rebalancePaletteDocks:function(q,m){if(m&&(m.getName()).indexOf("jsx_ide_quadrant")==0)jsx3.ide.SU(m.getName());if(q&&((q.getParent()).getName()).indexOf("jsx_ide_quadrant")==0)jsx3.ide.SU((q.getParent()).getName());},rebalanceAllPaletteDocks:function(d,s){jsx3.ide.SU();},SU:function(l){var
va=((jsx3.IDE.getJSXByName("jsx_ide_quadrant_q1")).getChildren()).length;var
nb=((jsx3.IDE.getJSXByName("jsx_ide_quadrant_q2")).getChildren()).length;var
vb=((jsx3.IDE.getJSXByName("jsx_ide_quadrant_q3")).getChildren()).length;var
R=((jsx3.IDE.getJSXByName("jsx_ide_quadrant_q4")).getChildren()).length;var
Fa=((jsx3.IDE.getJSXByName("jsx_ide_quadrant_q5")).getChildren()).length;if(l=="jsx_ide_quadrant_q1"){this.wT(jsx3.IDE.getJSXByName("jsx_ide_splitter3"),jsx3.IDE.getJSXByName("jsx_ide_splitter2"),va,nb,"0%","100%","0%","20%");}else if(l=="jsx_ide_quadrant_q2"){this.wT(jsx3.IDE.getJSXByName("jsx_ide_splitter3"),jsx3.IDE.getJSXByName("jsx_ide_splitter2"),nb,va,"100%","0%","0%","20%");}else if(l=="jsx_ide_quadrant_q3"){this.wT(jsx3.IDE.getJSXByName("jsx_ide_splitter5"),jsx3.IDE.getJSXByName("jsx_ide_splitter4"),vb,R,"0%","100%","100%","75%");}else if(l=="jsx_ide_quadrant_q4"){this.wT(jsx3.IDE.getJSXByName("jsx_ide_splitter5"),jsx3.IDE.getJSXByName("jsx_ide_splitter4"),R,vb,"100%","0%","100%","75%");}else{if(va==0){(jsx3.IDE.getJSXByName("jsx_ide_splitter3")).setSubcontainer1Pct("0%",true);if(nb==0)(jsx3.IDE.getJSXByName("jsx_ide_splitter2")).setSubcontainer1Pct("0%",true);}else if(nb==0)(jsx3.IDE.getJSXByName("jsx_ide_splitter3")).setSubcontainer1Pct("100%",true);if(vb==0){(jsx3.IDE.getJSXByName("jsx_ide_splitter5")).setSubcontainer1Pct("0%",true);if(R==0)(jsx3.IDE.getJSXByName("jsx_ide_splitter4")).setSubcontainer1Pct("100%",true);}else if(R==0)(jsx3.IDE.getJSXByName("jsx_ide_splitter5")).setSubcontainer1Pct("100%",true);}},wT:function(d,c,b,a,p,j,i,l){if(b==0){d.setSubcontainer1Pct(p,true);if(a==0)c.setSubcontainer1Pct(i,true);}else if(a==0){d.setSubcontainer1Pct(j,true);}else{var
U=parseInt(d.getSubcontainer1Pct());if(U<5||U>95)d.setSubcontainer1Pct("50%",true);}var
v=parseInt(c.getSubcontainer1Pct());var
M=parseInt(i);if(b+a>0&&(M>=50&&v>95||M<50&&v<5))c.setSubcontainer1Pct(l,true);},toggleStageOnly:function(f){var
Y=jsx3.IDE.getJSXByName("jsx_ide_splitter1");var
Oa=jsx3.IDE.getJSXByName("jsx_ide_splitter2");var
S=jsx3.IDE.getJSXByName("jsx_ide_splitter4");var
Ka=parseInt(Y.getSubcontainer1Pct());var
Da=parseInt(Oa.getSubcontainer1Pct());var
tb=parseInt(S.getSubcontainer1Pct());if(f==null)f=Ka>95||Da<5||tb>95;if(f){if(Ka>95)Y.setSubcontainer1Pct(Y._jsxlastopen||Y.jsxdefault1pct,true);if(Da<5)Oa.setSubcontainer1Pct(Oa._jsxlastopen||Oa.jsxdefault1pct,true);if(tb>95)S.setSubcontainer1Pct(S._jsxlastopen||S.jsxdefault1pct,true);jsx3.ide.rebalanceAllPaletteDocks();}else{Y._jsxlastopen=Ka>95?null:Ka;Oa._jsxlastopen=Da<5?null:Da;S._jsxlastopen=tb>95?null:tb;Y.setSubcontainer1Pct("100%",true);Oa.setSubcontainer1Pct("0%",true);S.setSubcontainer1Pct("100%",true);}},Gr:function(){if(!this.c6)this.c6={prop:{pathMethod:"getPropertiesPath"},event:{pathMethod:"getModelEventsPath"},xsl:{pathMethod:"getXslParamPath"}};return this.c6;},getTemplateForObject:function(e,i){var
Lb=(this.Gr())[e];var
jb=null,K=null;if(typeof i[Lb.pathMethod]=="function")jb=i[Lb.pathMethod]();if(jb)K=this.zv(jb,i);if(!K){var
Y=(i.getClass()).getInheritance();Y.unshift(i.getClass());var
ja=null;for(var
ob=0;ja==null&&ob<Y.length;ob++)ja=Lb.registry[Y[ob].getName()];if(ja)K=ja(i);}return K;},loadTemplateCatalog:function(b,d,j){var
Ya=(this.Gr())[b];if(j==null)j=jsx3.IDE;var
wa=(new
jsx3.xml.Document()).load(j.resolveURI(d));for(var
Y=wa.selectNodeIterator("/data/record");Y.hasNext();){var
Ta=Y.next();var
wb=Ta.getAttribute("jsxid");var
Za=Ta.getAttribute("handler");if(Za){this.registerTemplateForClass(b,wb,new
Function("objJSX",Za));}else this.registerTemplateForClass(b,wb,j.resolveURI(Ta.getAttribute("jsxtext")));}},registerTemplateForClass:function(p,q,l){var
qa=(this.Gr())[p];if(qa.registry==null)qa.registry={};qa.registry[q]=typeof l=="function"?l:(jsx3.$F(this.zv)).bind(this,[l]);},zv:function(i,e){var
u=(jsx3.IDE.getCache()).getDocument(i);if(u==null){u=(new
jsx3.xml.CDF.Document()).load(i);(jsx3.IDE.getCache()).setDocument(i,u);}if(u.hasError()){(this.getLog()).warn("Error loading "+i+": "+u.getError());}else return u;},registerCatalogAt:function(i,h){var
ub={a:"/"};h=h.toString();var
Ia=h.lastIndexOf(ub.a);this.loadTemplateCatalog(i,h.substring(Ia+1),{resolveURI:function(f){return h.substring(0,Ia)+ub.a+f;}});}});]]></data>
    </script>
    <script id="projects">
      <data><![CDATA[jsx3.ide.newProject=function(){(this.getPlugIn("jsx3.ide.project")).showNew();};jsx3.ide.getActiveProject=function(){if(this._ACTIVEPROJCLEARED)return null;var
Pa=(jsx3.app.Browser.getLocation()).getQueryParam("jsxproject");if(!Pa){var
ua=jsx3.ide.getIDESettings();if(ua.get("prefs","builder","openlastproject")!==false)Pa=ua.get("lastProject");}if(Pa)if(jsx3.util.strEndsWith(Pa,"/"))Pa=Pa.substring(0,Pa.length-1);return Pa;};jsx3.ide.clearActiveProject=function(){jsx3.ide._ACTIVEPROJCLEARED=true;};jsx3.ide.getActiveProjectDirectory=function(){var
sa=jsx3.ide.PROJECT;return sa?sa.getDirectory():null;};jsx3.ide.getCurrentDirectory=function(){if(jsx3.ide.ut!=null)return jsx3.ide.ut;else return jsx3.ide.getActiveProjectDirectory();};jsx3.ide.setCurrentDirectory=function(l){jsx3.ide.ut=l;};jsx3.ide._PROJECT_PREFS={};jsx3.ide.getProjectSettings=function(k){var
S=jsx3.ide.SERVER;var
Qa=S.getSettings();if(k){var
Ta=S.getAppPath();if(!jsx3.ide._PROJECT_PREFS[Ta]){var
cb=(S.getDirectory()).resolve(jsx3.CONFIG_FILE);jsx3.ide._PROJECT_PREFS[Ta]=new
jsx3.ide.Preferences(cb,Qa);}return jsx3.ide._PROJECT_PREFS[Ta];}else return Qa;};jsx3.ide.addToRecentProjects=function(a){var
Y=a.getPathFromHome();var
ia=jsx3.ide.getIDESettings();var
Wa=ia.get("recentProjects")||[];for(var
M=0;M<Wa.length;M++)if(Wa[M]==Y){Wa.splice(M,1);break;}Wa.unshift(Y);if(Wa.length>jsx3.ide.RECENT_PROJECT_MAX)Wa.pop();ia.set("recentProjects",Wa);};jsx3.ide.getProjectDirectory=function(){return (jsx3.ide.getCurrentUserHome()).resolve(jsx3.APP_DIR_NAME+"/");};jsx3.ide.isFileToIgnore=function(c){return (c.getName()).indexOf(".")==0;};jsx3.ide.getRecentProjects=function(){var
db=jsx3.ide.getIDESettings();return db.get("recentProjects")||[];};jsx3.ide.runProject=function(i,s){var
ub={a:"http",b:"base",c:"Local HTTP Server Not Configured",d:"The local HTTP server is not configured. You must configure an HTTP server in IDE Settings : Paths before running this project from a local HTTP server.",e:"Configure",f:"Cancel",g:"home",h:"Save Before Running?",i:"There are unsaved changes to your project that will not be reflected in the running project. Save these changes before running project?",j:"Save and Run",k:"Run Without Saving"};var
zb=null,kb=null;if(i){zb=(jsx3.ide.getIDESettings()).get(ub.a,ub.b);if(!zb){jsx3.IDE.confirm(ub.c,ub.d,function(c){c.doClose();jsx3.ide.doOpenSettings(2);},null,ub.e,ub.f,2);return;}kb=(jsx3.ide.getIDESettings()).get(ub.a,ub.g);}if(!s&&jsx3.ide.isAnyEditorDirty()){jsx3.IDE.confirm(ub.h,ub.i,function(b){b.doClose();(jsx3.ide.saveAll()).when(function(){jsx3.ide.runProject(i,true);});},null,ub.j,ub.f,3,function(a){a.doClose();jsx3.ide.runProject(i,true);},ub.k,{width:350});}else jsx3.sleep(function(){jsx3.ide.R0(zb,kb);});};jsx3.ide.R0=function(r,h){var
xa=jsx3.util.strEndsWith((jsx3.app.Browser.getLocation()).getPath(),".xhtml");var
W="shell"+(xa?".xhtml":".html");var
ga=(((jsx3.ide.getSystemDirFile()).toURI()).relativize((jsx3.ide.getActiveProjectDirectory()).toURI())).toString();if(!jsx3.util.strEmpty(h)){var
Cb=ga.indexOf(jsx3.APP_DIR_NAME);if(Cb>=0)ga=h+"/"+ga.substring(Cb);}var
F=jsx3.net.URI.fromParts(null,null,null,null,W,"jsxapppath="+ga,null);if(r)F=(new
jsx3.net.URI(r)).resolve(F);var
C=window.open(F.toString());if(C)C.focus();else jsx3.ide.LOG.error("The application did not run properly. Check that no popup blockers are running.");};jsx3.ide.openProject=function(){var
ub={a:"jsx3.io.browser",b:"openproject",c:"Choose Project Folder",d:"Choose",e:"jsx3.ide.project",f:" is not a valid project directory."};(jsx3.ide.getPlugIn(ub.a)).chooseFolder(jsx3.IDE.getRootBlock(),{name:ub.b,modal:true,title:ub.c,okLabel:ub.d,folder:jsx3.ide.getProjectDirectory(),onChoose:(jsx3.$F(function(b){var
Y=(jsx3.ide.getPlugIn(ub.e)).getProjectTypes();if(Y.find(function(s){return s.isProjectDir(b);})){var
Db=(jsx3.ide.getCurrentUserHome()).relativePathTo(b);jsx3.ide.doOpenProject(Db,false,true);}else jsx3.IDE.alert(null,b.getAbsolutePath()+ub.f);})).bind(this)});};jsx3.ide.doOpenProject=function(e,h,o){var
ub={a:"Could not open project <b>",b:"</b> because the configuration file could not be found.",c:"jsxproject=",d:"&jsxnowelc=true",e:"The project ",f:" did not open properly. Check that no pop-up blockers are running.",g:"The opening of project ",h:" was cancelled. "};var
A=jsx3.ide.getHomeRelativeFile(e);if(!jsx3.ide.checkProjectExists(A)){jsx3.IDE.alert(null,ub.a+e+ub.b,function(k){k.doClose();jsx3.ide._startJobs();});jsx3.ide._pauseJobs();return false;}var
aa=jsx3.ide.PROJECT!=null;if(o||!aa){var
Aa=jsx3.app.Browser.getLocation();var
Ma=jsx3.net.URI.fromParts(Aa.getScheme(),Aa.getUserInfo(),Aa.getHost(),Aa.getPort(),Aa.getPath(),ub.c+e+ub.d,null);if(h){var
na=window.open(Ma.toString());if(!na)jsx3.ide.LOG.error(ub.e+e+ub.f);}else try{window.location.href=Ma.toString();}catch(Kb){jsx3.ide.LOG.warn(ub.g+e+ub.h+jsx3.NativeError.wrap(Kb));}}else (jsx3.ide._closeDownProject()).when(function(){jsx3.ide.doOpenProject(e,h,true);});};jsx3.ide._closeDownProject=jsx3.$Y(function(a){var
fa=jsx3.ide.getPreviouslyOpenFiles()||[];(jsx3.ide.closeAll()).when(function(){jsx3.ide.syncPreviouslyOpenFiles(null,fa);a.done();});});jsx3.ide.checkProjectExists=function(o){var
ub={a:"jsx3.ide.project"};var
oa=(jsx3.ide.getPlugIn(ub.a)).getProjectTypes();return oa.find(function(a){return a.isProjectDir(o);})!=null;};jsx3.ide.showDeploymentOptions=function(){var
ub={a:"jsx3.ide.deploytool"};var
nb=jsx3.ide.getPlugIn(ub.a);(nb.load()).when(function(){nb.openTool();});};jsx3.ide.syncPreviouslyOpenFiles=function(c,j){var
ga=jsx3.ide.getIDESettings();var
Ca=jsx3.ide.PROJECT;var
ja=[];if(jsx3.$A.is(j)){for(var
I=0;I<j.length;I++)ja.push((Ca.getDirectory()).relativePathTo(j[I]));}else{var
D=jsx3.ide.getAllEditors();for(var
I=0;I<D.length;I++)if(!D[I].isUnsaved()){var
H=D[I].getOpenFile();if(H&&H.toURI)ja.push((Ca.getDirectory()).relativePathTo(H));}}ga.set("projects",Ca.getPathFromHome(),"openFiles",ja);};jsx3.ide.getPreviouslyOpenFiles=function(){var
_=jsx3.ide.getIDESettings();var
bb=jsx3.ide.PROJECT;var
ja=_.get("projects",bb.getPathFromHome(),"openFiles");if(ja!=null){var
u=[];for(var
cb=0;cb<ja.length;cb++){var
Ga=jsx3.ide.getSystemRelativeFile(bb.resolveURI(ja[cb]));if(Ga.isFile())u.push(Ga);}return u;}return null;};jsx3.ide.showWelcomeDialog=function(){var
ub={a:"jsx3.ide.welcome"};var
cb=jsx3.ide.getPlugIn(ub.a);if(cb)(cb.load()).when(function(){cb.openTool();});};jsx3.ide.getProjectAuthorVersion=function(){return "3.2";};]]></data>
    </script>
    <script id="resources">
      <data><![CDATA[(jsx3.$O(jsx3.ide)).extend({addResourceToProject:function(s,p,d){var
qb=jsx3.net.URI.decode((this.PROJECT.getDirectory()).relativePathTo(s));var
va=this.getResourceByFile(s)==null;if(va){this.LOG.debug("Adding resource to project: "+qb);var
C=this.PROJECT.getResources();var
_a=(s.getName()).replace(/\./g,"_");while(this.getResourceById(_a)!=null)_a=_a+"_";var
Lb=new
jsx3.ide.ProjectRsrc(_a,p,d?1:0,qb);C.push(Lb);this.PROJECT.setResources(C);}},getResourceBySrc:function(o){var
Ha=this.getSystemRelativeFile(o);return this.getResourceByFile(Ha);},getResourceByFile:function(i){var
v=this.PROJECT.getResources();var
A=((this.getSystemDirFile()).toURI()).relativize(i.toURI());return v.find(function(a){return (jsx3.ide.PROJECT.resolveURI(a.getPath())).equals(A);});},getResourceById:function(o){return (this.PROJECT.getResources()).find(function(g){return g.getId()==o;});},getFileForResource:function(g){var
G=this.getResourceById(g);return G&&this.getSystemRelativeFile(this.PROJECT.resolveURI(G.getPath()));},doOpenUrlForEdit:function(m,p){var
Ia=this.getSystemRelativeFile(m);this.doOpenForEdit(Ia,p);},doOpenForEdit:jsx3.$Y(function(j){var
ub={a:"jsx3.ide.editor"};var
Db=j.args();var
ta=Db[0],Da=Db[1],N=Db[2];if(Da==null)Da=jsx3.ide.getFileType(ta);var
na=this.getPlugIn(ub.a);(na.load()).when(function(){if(N!==false)jsx3.ide.addResourceToProject(ta,Da,false);var
Ab=na.getOpenEditor(ta);if(Ab){na.reveal(Ab);j.done(Ab);}else{if(ta.toURI)jsx3.ide._addToRecentFiles(ta);(na.openEditor(ta,Da)).when(j);}});}),_addToRecentFiles:function(k){var
B=this.getIDESettings();var
ja=this.PROJECT;var
_a=(ja.getDirectory()).relativePathTo(k);var
J=B.get("projects",ja.getPathFromHome(),"recentFiles")||[];for(var
qa=0;qa<J.length;qa++)if(J[qa]==_a){J.splice(qa,1);break;}J.unshift(_a);if(J.length>this.RECENT_FILES_MAX)J.pop();B.set("projects",ja.getPathFromHome(),"recentFiles",J);},getRecentFiles:function(){var
ea=this.PROJECT;if(!ea)return [];var
G=this.getIDESettings();return G.get("projects",ea.getPathFromHome(),"recentFiles")||[];},getFileType:function(j){var
Bb=(this.getPlugIn("jsx3.ide")).getTypeForFile(j);return Bb?Bb.getId():j.getExtension();},doReloadResourceObj:jsx3.$Y(function(p){var
ub={a:"jsx3.ide",b:"resourceReloaded",c:"Confirm Reload",d:"Reloading this type of file can be very slow. Reload?",e:"Reload",f:"Cancel"};var
Ib=(p.args())[0];Ib=jsx3.$A(Ib);var
cb=Ib.find(function(e){return ((jsx3.ide.getPlugIn(ub.a)).getFileType(e.getType())).isSlowReload();})!=null;var
Db=function(){Ib.each(function(s){jsx3.ide.SERVER.loadInclude(jsx3.ide.PROJECT.resolveURI(s.getPath()),s.getId(),s.getType(),true);(jsx3.ide.getPlugIn(ub.a)).publish({subject:ub.b,resource:s});});p.done(true);};if(cb){jsx3.IDE.confirm(ub.c,ub.d,function(k){k.doClose();Db();},function(b){b.doClose();p.done(false);},ub.e,ub.f);}else Db();})});]]></data>
    </script>
    <script id="tools">
      <data><![CDATA[(jsx3.$O(jsx3.ide)).extend({openConsoleWindow:function(j,n,c,m,o,l,h,k,e,f,a){var
ub={a:"scrollbars=",b:",",c:"",d:"menubar=",e:"status=",f:"location=",g:"toolbar=",h:"width=",i:"height=",j:"left=",k:"top=",l:"directories=no,resizable=yes,"};if(this.CONSOLES==null)this.CONSOLES={};if(n)try{var
E=this.CONSOLES[n];if(E&&!E.closed){jsx3.sleep(function(){E.focus();});return;}}catch(Kb){}var
Bb=o?ub.a+o+ub.b:ub.c;var
ab=l?ub.d+l+ub.b:ub.c;var
Ka=h?ub.e+h+ub.b:ub.c;var
Eb=k?ub.f+k+ub.b:ub.c;var
Y=e?ub.g+e+ub.b:ub.c;var
Fa=c?ub.h+c+ub.b:ub.c;var
ca=m?ub.i+m+ub.b:ub.c;var
Cb=f?ub.j+f+ub.b:ub.c;var
Xa=a?ub.k+a+ub.b:ub.c;this.CONSOLES[n]=window.open(j,n,ub.l+Bb+ab+Ka+Eb+Y+Fa+ca+Cb+Xa);jsx3.sleep(function(){jsx3.ide.CONSOLES[n].focus();});return this.CONSOLES[n];},E7:{},registerSound:function(s,b){jsx3.require("jsx3.gui.Sound");if(this.E7[s]==null)this.E7[s]=new
jsx3.gui.Sound("idesound_"+s,b);},playSound:function(c,e){var
ob=this.E7[c];if(ob){ob.setVolume(e!=null?e:100);if(ob.getParent()==null){var
Kb=jsx3.IDE.getBodyBlock();Kb.setChild(ob);Kb.paintChild(ob);window.setTimeout(function(){ob.play();},1000);}else ob.play();}},onContextHelp:function(k){jsx3.ide.LOG.debug("Open context sensitive help: "+k.helpid);var
Na="http://www.generalinterface.org/alias/search/"+jsx3.getVersion()+"/"+k.helpid;var
la=window.open(Na,"jsxidectxhelp");if(!la)jsx3.ide.LOG.warn("A pop-up blocker may have prevented context help from opening.");},openUserGuides:function(){var
Cb="http://www.generalinterface.org/alias/userguide/"+jsx3.getVersion();var
Jb=window.open(Cb,"jsxideguides");if(!Jb)jsx3.ide.LOG.warn("A pop-up blocker may have prevented the site from opening.");},doOpenSettings:function(f){var
ub={a:"jsx3.ide.settings.ide"};var
E=jsx3.ide.getPlugIn(ub.a);if(E)(E.load()).when(function(){E.showPane(f);});},doOpenProjectSettings:function(m){var
ub={a:"jsx3.ide.settings.project"};var
V=jsx3.ide.getPlugIn(ub.a);if(V)(V.load()).when(function(){V.showPane(m);});}});]]></data>
    </script>
    <script id="version">
      <data><![CDATA[jsx3.ide.showLicenseAgreement=function(){var
ub={a:"jsx3.ide.ui.license"};jsx3.ide._pauseJobs();var
M=jsx3.ide.getPlugIn(ub.a);(M.load()).when(function(){M.openTool();});};jsx3.Package.definePackage("jsx3.ide",function(){});if(!jsx3.app.Browser.win32)jsx3.ide.LOG.warn("General Interface Builder is optimized for Microsoft Internet Explorer 6/7 and Firefox 1.5/2 for Windows. Results in other browsers may be inconsistent.");]]></data>
    </script>
    <jss id="cssxml">
      <data>
        <data xmlns="" jsxid="jsxroot" jsxns="urn:tibco.com/v3.0/dynamicproperties/1">
  <record jsxid="@Matrix HeaderCol BG" jsxtext="#c8c8d5"/>
  <record jsxid="@Matrix HeaderCol Border" jsxtext="0px;1px solid #a8a8b5;1px solid #a8a8b5;0px"/>
  <record jsxid="@Matrix ValueCol BG" jsxtext="#fffeff"/>
  <record jsxid="@Matrix ValueCol Border" jsxtext="0px;0px;1px solid #b8b8c5;0px"/>
  <record jsxid="@Matrix AllCol Border" jsxtext="0px;1px solid #d8d8e5;1px solid #d8d8e5;0px"/>
  <record jsxid="@Matrix AllCol BG" jsxtext="#fffeff"/>
  <record jsxid="@Matrix AllCol Light Border" jsxtext="0px;0px;1px solid #d8d8e5;0px"/>
  <record jsxid="@Matrix AllCol Light BG" jsxtext="#fffeff"/>
  <record jsxid="@Outset NoRight" jsxtext="1px solid #d8d8e5;0px solid;1px solid #9898a5;1px solid #d8d8e5" type="jsxborder"/>
  <record jsxid="@Outset NoLeft" jsxtext="1px solid #d8d8e5;1px solid #9898a5;1px solid #9898a5;0px solid" type="jsxborder"/>
  <record jsxid="@Outset NoBottom" jsxtext="1px solid #d8d8e5;1px solid #9898a5;0px solid;1px solid #d8d8e5" type="jsxborder"/>
  <record jsxid="@Matrix Edit Color" jsxtext="#003399" type="jsxcolor"/>
  <record jsxid="@Tree Padding" jsxtext="5 5 5 3" type="jsxpadding"/>
</data>
      </data>
    </jss>
    <jss id="eng">
      <data>
        <data xmlns="" jsxid="jsxroot" jsxns="urn:tibco.com/v3.0/dynamicproperties/1">
  <record jsxid="_script_title" jsxtext="JavaScript Test Utility"/>
  <record jsxid="_script_execute" jsxtext="Execute script"/>
  <record jsxid="_script_step" jsxtext="Step through script..."/>
  <record jsxid="_script_history" jsxtext="History"/>
  <record jsxid="_script_result" jsxtext="Return Value (if applicable)"/>
  <record jsxid="mnuTextEditor" jsxtext="language/eng/textarea.xml"/>
  <record jsxid="mnuComponent" jsxtext="language/eng/component.xml"/>
  <record jsxid="mnuTypeAheadScript" jsxtext="language/eng/typeahead_script.xml"/>
  <record jsxid="mnuTypeAheadCSS" jsxtext="language/eng/typeahead_css.xml"/>
  <record jsxid="mnuTypeAheadXML" jsxtext="language/eng/typeahead_xml.xml"/>
  <record jsxid="mnuAppPath" jsxtext="language/eng/apppath_menu.xml"/>
  <record jsxid="mnuTipProject" jsxtext="Create and manage projects"/>
  <record jsxid="mnuTipFile" jsxtext="Create and manage files for this project"/>
  <record jsxid="mnuTipTools" jsxtext="Tools and IDE settings"/>
  <record jsxid="mnuTipPalettes" jsxtext="Palettes"/>
  <record jsxid="mnuTipHelp" jsxtext="API documentation, internet resources"/>
  <record jsxid="treeCache" jsxtext="language/eng/cache_tree.xml"/>
  <record jsxid="treeResources" jsxtext="language/eng/resources_tree.xml"/>
  <record jsxid="_atted_title" jsxtext="Attributes Editor"/>
  <record jsxid="_gen_name" jsxtext="Name"/>
  <record jsxid="_gen_value" jsxtext="Value"/>
  <record jsxid="_atted_add" jsxtext="Add attribute"/>
  <record jsxid="_cch_title" jsxtext="Local Data Cache"/>
  <record jsxid="_gen_viewedit" jsxtext="View / edit"/>
  <record jsxid="_gen_viewformat" jsxtext="View formatted"/>
  <record jsxid="_cch_merge" jsxtext="Merge tool..."/>
  <record jsxid="_gen_closedoc" jsxtext="Remove document from cache"/>
  <record jsxid="_lib_title" jsxtext="Component Libraries"/>
  <record jsxid="_lib_reload" jsxtext="Reload component libraries from disk"/>
  <record jsxid="_dpl_title" jsxtext="Project Deployment Options"/>
  <record jsxid="_dpl_tx1" jsxtext="Caption"/>
  <record jsxid="_gen_browse" jsxtext="Browse..."/>
  <record jsxid="_dpl_tp1" jsxtext="The title text for the browser's caption bar"/>
  <record jsxid="_dpl_tp2" jsxtext="The initial GUI component to load when the app first initializes"/>
  <record jsxid="_dpl_tp3" jsxtext="The initial code to execute when the application first initializes and AFTER the initial component has painted on-screen"/>
  <record jsxid="_dpl_tp4" jsxtext="If 'Yes', any JavaScript errors in the browser will be intercepted by the jsx3.ERROR controller for handling and tracking"/>
  <record jsxid="_dpl_tp5" jsxtext="If 'Yes', a right-click event will not show the default browser context menu"/>
  <record jsxid="_dpl_tp6" jsxtext="As a single browser can contain multiple JSX Applications, this is the unique identifier for the application"/>
  <record jsxid="_dpl_tp7" jsxtext="If set to 'Static', the various Service classes will use any registered test data instead of contacting a live service"/>
  <record jsxid="_dpl_tp8" jsxtext="The Registry Key for which XML parser version to use"/>
  <record jsxid="_dpl_tp9" jsxtext="The Registry Key for which XSL parser version to use"/>
  <record jsxid="_dpl_tp10" jsxtext="The Registry Key for which HTTP transport control to use"/>
  <record jsxid="_dpl_tp11" jsxtext="The version of the application (e.g., 3.0)"/>
  <record jsxid="_dpl_tp12" jsxtext="If yes, all saves within builder for this application will save in Unicode (UTF-16LE; UnicodeLittleUnmarked; Sixteen-bit Unicode Transformation Format; little-endian byte order). Default is No."/>
  <record jsxid="_dpl_tx2" jsxtext="Initial Component"/>
  <record jsxid="_dpl_tx3" jsxtext="onLoad Script"/>
  <record jsxid="_dpl_tx4" jsxtext="Cancel Error"/>
  <record jsxid="_dpl_tx5" jsxtext="Cancel Right-click"/>
  <record jsxid="_dpl_tx6" jsxtext="Namespace"/>
  <record jsxid="_dpl_tx7" jsxtext="Mode"/>
  <record jsxid="_dpl_tx8" jsxtext="XML Reg Key"/>
  <record jsxid="_dpl_tx9" jsxtext="XSL Reg Key"/>
  <record jsxid="_dpl_tx10" jsxtext="HTTP Reg Key"/>
  <record jsxid="_dpl_tx11" jsxtext="Project Version"/>
  <record jsxid="_dpl_tx12" jsxtext="Unicode"/>
  <record jsxid="_gen_save" jsxtext="Save"/>
  <record jsxid="_gen_cancel" jsxtext="Cancel"/>
  <record jsxid="_gen_yes" jsxtext="Yes"/>
  <record jsxid="_gen_no" jsxtext="No"/>
  <record jsxid="_dpl_live" jsxtext="Live"/>
  <record jsxid="_dpl_static" jsxtext="Static"/>
  <record jsxid="_dom_title" jsxtext="Component Hierarchy"/>
  <record jsxid="_dom_refresh" jsxtext="Refresh/synchronize Component Hierarchy tree"/>
  <record jsxid="_dom_clone" jsxtext="Clone"/>
  <record jsxid="_dom_recycle" jsxtext="Recycle"/>
  <record jsxid="_dom_focus" jsxtext="Show/hide focus rectangle (shift+alt+r)"/>
  <record jsxid="_dom_snap" jsxtext="Toggle snap to grid"/>
  <record jsxid="_dom_repaint" jsxtext="Repaint"/>
  <record jsxid="_dom_fetchrepaint" jsxtext="Re-Fetch Data and Repaint"/>
  <record jsxid="_palettes_toggle_on" jsxtext="Show Edit Pane and Palettes"/>
  <record jsxid="_palettes_toggle_off" jsxtext="Show Edit Pane Only"/>
  <record jsxid="_evt_title" jsxtext="Events Editor"/>
  <record jsxid="_prp_title" jsxtext="Properties Editor"/>
  <record jsxid="_res_title" jsxtext="Project Files"/>
  <record jsxid="_gen_id" jsxtext="ID"/>
  <record jsxid="_pfl_autoload" jsxtext="Auto Load"/>
  <record jsxid="_gen_uri" jsxtext="URI"/>
  <record jsxid="_gen_type" jsxtext="Type"/>
  <record jsxid="_pfl_title" jsxtext="{0} File Profile"/>
  <record jsxid="_xslparam_title" jsxtext="XSL Parameters"/>
  <record jsxid="_sysout_restore" jsxtext="Restore Log"/>
  <record jsxid="_sysout_clear" jsxtext="Clear Log"/>
  <record jsxid="_sysout_docking" jsxtext="Docking Options"/>
  <record jsxid="_api_cbar" jsxtext="API Documentation"/>
  <record jsxid="_api_viewall" jsxtext="Display Local Methods"/>
  <record jsxid="_api_viewalltip" jsxtext="When checked, only those methods and constants declared locally in a class are displayed. Otherwise, all available methods (those that were inherited) will also be displayed."/>
  <record jsxid="_edit_view_live" jsxtext="Live Component"/>
  <record jsxid="_edit_view_expert" jsxtext="Source XML (Expert)"/>
  <record jsxid="_edit_view_formatted" jsxtext="Formatted Source XML (Read Only)"/>
  <record jsxid="_edit_view_html" jsxtext="Rendered HTML (Read Only)"/>
  <record jsxid="_edit_view_profile" jsxtext="Component Profile"/>
  <record jsxid="_edit_view_grid" jsxtext="Grid View"/>
  <record jsxid="_gen_eval" jsxtext="Eval"/>
  <record jsxid="_edit_view_source" jsxtext="Source Text"/>
  <record jsxid="_gen_project" jsxtext="Project"/>
  <record jsxid="_gen_file" jsxtext="File"/>
  <record jsxid="_gen_tools" jsxtext="Tools"/>
  <record jsxid="_gen_palettes" jsxtext="Palettes"/>
  <record jsxid="_gen_help" jsxtext="Help"/>
  <record jsxid="_edit_profile_title" jsxtext="Component Profile"/>
  <record jsxid="_edit_profile_tip1" jsxtext="The name of the component"/>
  <record jsxid="_edit_profile_tip2" jsxtext="The 16x16 icon to use when this component is displayed within the Component Libraries palette of General Interface Builder"/>
  <record jsxid="_edit_profile_txt1" jsxtext="Icon URL"/>
  <record jsxid="_gen_desc" jsxtext="Description"/>
  <record jsxid="_edit_profile_tip3" jsxtext="The description of the component"/>
  <record jsxid="mnuTypeAheadXSL" jsxtext="language/eng/typeahead_xsl.xml"/>
  <!-- builder links to external sites -->
  <record jsxid="signup_url" jsxtext="http://www.generalinterface.org/alias/signup"/>
  <record jsxid="welcome_text" jsxtext="&lt;a href=&quot;http://www.generalinterface.org/alias/samples&quot; target=&quot;_blank&quot;&gt;Sample Applications&lt;/a&gt;&lt;br/&gt;     &lt;a href=&quot;http://www.generalinterface.org/alias/forums&quot; target=&quot;_blank&quot;&gt;Forums&lt;/a&gt;&lt;br/&gt;     &lt;a href=&quot;http://www.generalinterface.org/alias/support&quot; target=&quot;_blank&quot;&gt;Support &amp;amp; Training&lt;/a&gt;"/>
  <record jsxid="rss_announce_url" jsxtext="http://www.generalinterface.org/alias/announce_rss"/>
  <record jsxid="rss_popular_url" jsxtext="http://www.generalinterface.org/alias/forums_rss"/>
  
  <record jsxid="hk.newProject" jsxtext="ctrl+alt+n"/>
  <record jsxid="hk.projSettings" jsxtext="ctrl+shift+,"/>

  <record jsxid="hk.new" jsxtext="ctrl+n"/>
  <record jsxid="hk.close" jsxtext="ctrl+w"/>
  <record jsxid="hk.closeAll" jsxtext="ctrl+shift+w"/>
  <record jsxid="hk.save" jsxtext="ctrl+s"/>
  <record jsxid="hk.saveAll" jsxtext="ctrl+shift+s"/>
  <record jsxid="hk.open" jsxtext="ctrl+g"/>

  <record jsxid="hk.find" jsxtext="ctrl+f"/>
  <record jsxid="hk.script" jsxtext="ctrl+e"/>
  <record jsxid="hk.settings" jsxtext="ctrl+,"/>
  <record jsxid="hk.api" jsxtext="shift+ctrl+/"/>
  <record jsxid="hk.trash" jsxtext="ctrl+9"/>
  <record jsxid="hk.syslog" jsxtext="ctrl+l"/>

</data>
      </data>
    </jss>
    <jss id="eng_errors">
      <data>
        <data xmlns="" jsxid="jsxroot" jsxns="urn:tibco.com/v3.0/dynamicproperties/1">
  <record jsxid="jsxerr_launchpage_directory" jsxtext="The launch page must be placed directly within the GI installation directory."/>
  <record jsxid="jsxerr_exportxml_writefail" jsxtext="The XML export failed because the file could not be written to disk. Please consult the System Log for more information."/>
  <record jsxid="jsxerr_exporthtml_writefail" jsxtext="The HTML export failed because the file could not be written to disk. Please consult the System Log for more information."/>
  <record jsxid="jsxerr_exporthtml_directory" jsxtext="The HTML export must be placed directly within the GI installation directory in order for the HTML to render correctly."/>
  <record jsxid="jsxerr_filenotloaded" jsxtext="A resource required by General Interface Builder is not available. This is typically because the ActiveX control needed for file system access was not loaded. Ensure that your browser security settings allow for the loading of ActiveX. Also, ensure that you are running General Interface Builder from your local file system and that you have access rights to the files."/>
</data>
      </data>
    </jss>
    <css id="" path="../../css/ide.css"/> <!-- don't inline because of relative URIs -->
  </resources>

  <!-- Published when a project resource is reloaded into memory. -->
  <event id="resourceReloaded">
    <param id="resource" type="jsx3.ide.ProjectRsrc"/>
  </event>

  <subscribe event="jsx3.ide.editor.opened">
    jsx3.ide.syncPreviouslyOpenFiles();
  </subscribe>

  <subscribe event="jsx3.ide.editor.closed">
    jsx3.ide.syncPreviouslyOpenFiles();
  </subscribe>

  <subscribe event="jsx3.ide.editor.renamed">
    jsx3.ide.syncPreviouslyOpenFiles();
  </subscribe>

  <extension-point id="file-type">
    <processor instance-class="jsx3.ide.FileType" type="instantiator"/>
  </extension-point>

  <extension id="type.component" point="jsx3.ide.file-type">
    <type ext-class="jsx3.ide.FileType.Component" id="component" img="jsxapp:/images/resourcefiles/component.gif" label="GUI Component" precedence="10" reloadable="false"/>
    <type ext-class="jsx3.ide.FileType.XML" id="xml" img="jsxapp:/images/resourcefiles/xml.gif" label="XML File" precedence="5" reloadable="true"/>
    <type ext-class="jsx3.ide.FileType.XSL" id="xsl" img="jsxapp:/images/resourcefiles/xsl.gif" label="XSL File" precedence="5" reloadable="true"/>
    <type ext-class="jsx3.ide.FileType.Script" id="script" img="jsxapp:/images/resourcefiles/script.gif" label="JavaScript File" precedence="0" reloadable="true"/>
    <type id="css" img="jsxapp:/images/resourcefiles/css.gif" label="CSS File" precedence="0" reloadable="true" slow-reload="true"/>
    <type ext-class="jsx3.ide.FileType.JSS" id="jss" img="jsxapp:/images/resourcefiles/jss.gif" label="Dynamic Properties File" precedence="10" reloadable="true"/>
    <type ext-class="jsx3.ide.FileType.LJSS" id="ljss" img="jsxapp:/images/resourcefiles/ljss.gif" label="Properties Bundle" precedence="10" reloadable="true"/>
  </extension>

</plugin>
  <plugin global="true" id="jsx3.io" name="IO Plug-In" property="jsx3.io.PLUGIN" version="0.1" xmlns="http://www.generalinterface.org/gi/amp" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.generalinterface.org/gi/amp http://www.generalinterface.org/xsd/plugin.xsd">

  <method id="getFileForURI" params="objURI"><![CDATA[
    var fs = this.getFileSystemsForURI(objURI);
    var fsw = fs.filter(function(e) { return e.hasWrite(); });
    if (fsw.length == 0) fsw = fs;
    if (fsw.length > 0)
      return fsw[0].getInstance().getFile(objURI);
    return null;
  ]]></method>

  <method id="getFileSystemById" params="id"><![CDATA[
    return this.getAvailableFileSystems().find(
        function(e) { return e.getId() == id; });
  ]]></method>

  <method id="getFileSystemsForURI" params="objURI"><![CDATA[
    var objURI = jsx3.net.URI.valueOf(objURI);
    return jsx3.$A(this._fss).filter(function (fs) {
      return jsx3.$A(fs.getSchemes()).contains(objURI.getScheme());
    });
  ]]></method>

  <method id="getAvailableFileSystems"><![CDATA[
    if (!this._fss) {
      this._fss = this.getExtPoint("file-system").processExts().filter(
          function(e) { return e.isAvailable(); });
    }
    return this._fss;
  ]]></method>

  <method async="true" id="loadAvailableFileSystems" params="cb"><![CDATA[
    var fss = this.getAvailableFileSystems();

    var condition = null;

    fss.each(function(e) {
      var c1 = e.load();
      condition = condition ? condition.and(c1) : c1;
    });

    if (condition)
      condition.when(cb);
    else
      cb.done();
  ]]></method>

  <resources>
    <script id="FileSystem">
      <data><![CDATA[jsx3.Class.defineClass("jsx3.io.FileSystemDesc",null,null,function(f,g){var
ub={a:"id",b:"label",c:"class",d:"true",e:"read",f:"write",g:"list",h:"scheme",i:/\s*,\s*/g};var
vb=jsx3.amp;g.init=function(d,c){this.DI=d;this.C6=c;};g.getExt=function(){return this.DI;};g.getId=function(){return this.C6.attr(ub.a);};g.getLabel=function(){return this.C6.attr(ub.b);};g.getFSClass=function(){return this.C6.attr(ub.c);};g.hasRead=function(){return ub.d==this.C6.attr(ub.e);};g.hasWrite=function(){return ub.d==this.C6.attr(ub.f);};g.hasList=function(){return ub.d==this.C6.attr(ub.g);};g.load=jsx3.$Y(function(e){((this.DI.getPlugIn()).load()).when(e);});g.getSchemes=function(){return (this.C6.attr(ub.h)).split(ub.i);};g.getInstance=function(){if(!this._inst){this._inst=new
(jsx3.lang.getVar(this.getFSClass()))();this._inst._desc=this;}return this._inst;};g.isAvailable=function(){return !this.DI.isAvailable||this.DI.isAvailable();};g.toString=function(){return this.getId();};});jsx3.Class.defineClass("jsx3.io.FileSystem",null,null,function(a,j){var
ub={a:"strPath"};j.getFile=jsx3.Method.newAbstract(ub.a);j.getUserDocuments=jsx3.Method.newAbstract();j.getRoots=jsx3.Method.newAbstract();j.createTempFile=jsx3.Method.newAbstract();j.hasRead=function(){return this._desc.hasRead();};j.hasWrite=function(){return this._desc.hasWrite();};j.hasList=function(){return this._desc.hasList();};});]]></data>
    </script>
    <script id="File">
      <data><![CDATA[jsx3.Class.defineClass("jsx3.io.File",null,null,function(j,m){var
ub={a:"\r\n",b:"\r",c:"\n",d:"Not implemented",e:"/",f:"",g:"..",h:".",i:"May not resolve an absolute path: "};j.FIND_INCLUDE=1;j.FIND_RECURSE=2;j.LINE_SEP={dos:ub.a,mac:ub.b,unix:ub.c};m.init=function(s,d){this._fs=s;this._uri=jsx3.net.URI.valueOf(d);};m.getFileSystem=function(){return this._fs;};m.write=function(h,i){throw new
jsx3.Exception(ub.d);};m.read=function(){throw new
jsx3.Exception(ub.d);};m.isDirectory=function(){return false;};m.isFile=function(){return false;};m.getParentFile=function(){var
Ka=this.toURI();var
bb=Ka.getPath();if(bb==ub.e||bb==ub.f)return null;if(this.isDirectory()&&(jsx3.$S(bb)).endsWith(ub.e)){Ka=Ka.resolve(ub.g);}else Ka=Ka.resolve(ub.h);var
pa=this._fs.getFile(Ka);return this.equals(pa)?null:pa;};m.resolve=function(c){c=jsx3.net.URI.valueOf(c);if(c.isAbsolute())throw new
jsx3.Exception(ub.i+c);return this._fs.getFile((this.toURI()).resolve(c));};m.getParentPath=function(){var
kb=this.getParentFile();return kb!=null?kb.getAbsolutePath():null;};m.listFiles=function(){return jsx3.$A();};m.mkdir=function(){throw new
jsx3.Exception(ub.d);};m.mkdirs=function(){var
x=this.getParentFile();if(x)x.mkdirs();if(!this.isDirectory())this.mkdir();};m.deleteFile=function(){throw new
jsx3.Exception(ub.d);};m.getAbsolutePath=function(){return (this.toURI()).getPath();};m.getName=function(){var
t=(this.toURI()).getPath();var
qb=t.lastIndexOf(ub.e);if(qb==t.length-1){qb=t.lastIndexOf(ub.e,qb-1);return t.substring(qb>=0?qb+1:0,t.length-1);}else return qb>=0?t.substring(qb+1):t;};m.getExtension=function(){var
Na=this.getName();if(Na){var
Z=Na.lastIndexOf(ub.h);if(Z>=0)return Na.substring(Z+1);}return ub.f;};m.exists=function(){return this.isFile()||this.isDirectory();};m.renameTo=function(r){throw new
jsx3.Exception(ub.d);};m.copyTo=function(i){if(this.isFile()){i.write(this.read());}else if(this.isDirectory()){i.mkdir();(this.listFiles()).each(function(c){c.copyTo(i.resolve(c.getName()));});}};m.isHidden=function(){return false;};m.isReadOnly=function(){return false;};m.setReadOnly=function(h){throw new
jsx3.Exception(ub.d);};m.isRoot=function(){return this.getParentFile()==null;};m.getType=function(){return this.getExtension();};m.getStat=function(){return {mtime:null,size:null};};m.equals=function(d){if(d&&d.toURI){var
K=this.toURI();var
Sa=d.toURI();if(K.getScheme()==Sa.getScheme()&&K.getPath()==Sa.getPath()&&K.getQuery()==Sa.getQuery()){var
C=K.getAuthority()||ub.f;var
R=Sa.getAuthority()||ub.f;return C==R;}}return false;};m.isDescendantOf=function(e){var
J=e.toURI();var
A=this.toURI();if(J.getScheme()!=A.getScheme())return false;if((J.getAuthority()||ub.f)!=(A.getAuthority()||ub.f))return false;var
Ma=J.getPath();var
t=A.getPath();return t.length>Ma.length&&t.indexOf(Ma)==0&&(t.charAt(Ma.length)==ub.e||t.charAt(Ma.length-1)==ub.e);};m.relativePathTo=function(i){return ((this.toURI()).relativize(i.toURI())).toString();};j.WW=function(k){return j.FIND_INCLUDE|j.FIND_RECURSE;};m.find=function(h,f,o){if(o==null)o=[];if(!h)h=j.WW;var
Ya=this.listFiles();for(var
jb=0;jb<Ya.length;jb++){var
pb=h.call(null,Ya[jb]);if((pb&j.FIND_INCLUDE)>0)o.push(Ya[jb]);if(f&&Ya[jb].isDirectory()&&(pb&j.FIND_RECURSE)>0)Ya[jb].find(h,f,o);}return jsx3.$A(o);};m.toURI=function(){return this._uri;};m.getRootDirectory=function(){var
db=this;while(true){var
_=db.getParentFile();if(!_){if(db.isDirectory())return db;else return null;}else db=_;}};m.toString=function(){return this.getAbsolutePath();};});]]></data>
    </script>
    <script id="FileRequest">
      <data><![CDATA[jsx3.Class.defineClass("jsx3.io.FileRequest",jsx3.net.Request,null,function(c,q){q.open=function(m,k,s,a,o){this._url=jsx3.net.URIResolver.DEFAULT.resolveURI(k);this._async=s;return this;};q.send=function(j,s){var
W=jsx3.io.PLUGIN.getFileForURI(this._url);if(W.isFile()){this._response=W.read();}else this._status=jsx3.net.Request.STATUS_ERROR;if(this._async)jsx3.sleep(function(){this.publish({subject:jsx3.net.Request.EVENT_ON_RESPONSE});},null,this);return this;};q.getURL=function(){return this._url&&this._url.toString();};q.getStatus=function(){return this._status||200;};q.getResponseText=function(){return this._response;};q.getResponseXML=function(){return (new
jsx3.xml.Document()).loadXML(this.getResponseText());};});]]></data>
    </script>
    <script id="XmlReqFile">
      <prereq id="FileSystem"/>
      <prereq id="File"/>
    <data><![CDATA[jsx3.Class.defineClass("jsx3.io.XmlReqFileSystem",jsx3.io.FileSystem,null,function(r,q){var
ub={a:/^[a-zA-Z]:\\/,b:"string",c:"file:///",d:/\\/g,e:"/",f:"file://",g:"",h:"/tmp/"};r._TMPSER=1;r._WINPATH=ub.a;q.getFile=function(a){if(typeof a==ub.b&&a.match(r._WINPATH))a=ub.c+a.replace(ub.d,ub.e);var
O=jsx3.net.URI.valueOf(a);if(!O.getScheme())O=new
jsx3.net.URI(ub.f+((O.getPath()).indexOf(ub.e)!=0?ub.e:ub.g)+O.getPath());return new
jsx3.io.XmlReqFile(this,O);};q.getUserDocuments=function(){return null;};q.getRoots=function(){return [this.getFile(ub.c)];};q.createTempFile=function(g){return this.getFile(ub.h+g+r._TMPSER++);};});jsx3.Class.defineClass("jsx3.io.XmlReqFile",jsx3.io.File,null,function(l,f){var
ub={a:".manifest",b:/\/[^\.\/]+$/,c:"/",d:"jsx3.io",e:"XmlReqFile.write not implemented.",f:"GET",g:"",h:/[ \t\r]*\n[ \t\r]*/,i:/\S/,j:"XmlReqFile.mkdir not implemented.",k:"XmlReqFile.deleteFile not implemented.",l:"XmlReqFile.renameTo not implemented.",m:"XmlReqFile.setReadOnly not implemented."};var
xb=jsx3.io.File;l.MANIFEST=ub.a;f.init=function(j,n){var
x=n.getPath();if(x.match(ub.b))n=jsx3.net.URI.fromParts(n.getScheme(),n.getUserInfo(),n.getHost(),n.getPort(),x+ub.c,n.getQuery(),null);this.jsxsuper(j,n);};f.write=function(k,s){((jsx3.ide.getPlugIn(ub.d)).getLog()).error(ub.e);return false;};f.read=function(){var
Ya=new
jsx3.net.Request();Ya.open(ub.f,this._uri,false);Ya.send();this._exists=Ya.getStatus()==200;return Ya.getStatus()==200?Ya.getResponseText():null;};f.isDirectory=function(){return this.getExtension()==ub.g;};f.isFile=function(){return this.exists()&&this.getExtension()!=ub.g;};f.exists=function(){if(this._exists==null){this._exists=false;this.read();}return this._exists;};f.listFiles=function(){var
Va=new
jsx3.net.Request();Va.open(ub.f,this._uri+l.MANIFEST,false);Va.send();if(Va.getStatus()==200){var
bb=Va.getResponseText()||ub.g;return ((jsx3.$A(bb.split(ub.h))).filter(function(b){return b.match(ub.i);})).map((jsx3.$F(function(o){return this.resolve(o);})).bind(this));}return [];};f.mkdir=function(){((jsx3.ide.getPlugIn(ub.d)).getLog()).error(ub.j);};f.deleteFile=function(){((jsx3.ide.getPlugIn(ub.d)).getLog()).error(ub.k);};f.renameTo=function(n){((jsx3.ide.getPlugIn(ub.d)).getLog()).error(ub.l);};f.isHidden=function(){return false;};f.isReadOnly=function(){return true;};f.setReadOnly=function(r){((jsx3.ide.getPlugIn(ub.d)).getLog()).error(ub.m);};});]]></data>
    </script>
  </resources>

  <extension-point id="file-system">
    <processor instance-class="jsx3.io.FileSystemDesc" type="instantiator"/>
  </extension-point>

  <extension point="jsx3.io.file-system">
    <method id="isAvailable"><![CDATA[
      return true;
    ]]></method>

    <!-- The default read-only file system allows for some fall-through behavior -->
    <file-system class="jsx3.io.XmlReqFileSystem" id="xmlhttp" label="Read-Only (XmlHttpRequest)" list="false" read="true" scheme="file,http,https" write="false"/>
  </extension>

</plugin>
  <plugin id="jsx3.io.fso" name="Internet Explorer FileSystemObject Plug-In" version="0.1" xmlns="http://www.generalinterface.org/gi/amp" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.generalinterface.org/gi/amp http://www.generalinterface.org/xsd/plugin.xsd">

  <method id="isAvailable"><![CDATA[
    try {
      if (window.ActiveXObject) {
        return new ActiveXObject("Scripting.FileSystemObject") != null;
      }
    } catch (e) {}
    return false;
  ]]></method>

  <requires>
    <plugin id="jsx3.io"/>
  </requires>

  <resources>
    <script id="js" path="File.js"/>
  </resources>

  <extension point="jsx3.io.file-system">
    <method id="isAvailable"><![CDATA[
      return this.getPlugIn().isAvailable();
    ]]></method>

    <file-system class="jsx3.io.FSOFileSystem" id="fso" label="Local Disk (ActiveX)" list="true" read="true" scheme="file" write="true"/>
  </extension>

  <extension point="jsx3.amp.autoreg.dirlist">
    <method id="isAvailable" params="scheme"><![CDATA[
      return scheme == "file" && this.getPlugIn().isAvailable();
    ]]></method>

    <method id="getDirNames" params="baseURI"><![CDATA[
      var dir = (new jsx3.io.FSOFileSystem()).getFile(baseURI);
      return dir.listFiles().filter(
          function(e) { return e.isDirectory(); }).map(
          function(e) { return e.getName(); });
    ]]></method>
  </extension>

</plugin>
  <plugin id="jsx3.io.xpcom" name="Mozilla XPCOM File System Plug-In" version="0.1" xmlns="http://www.generalinterface.org/gi/amp" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.generalinterface.org/gi/amp http://www.generalinterface.org/xsd/plugin.xsd">

  <method id="isAvailable"><![CDATA[
    if (window.netscape && window.Components) {
      try {
        netscape.security.PrivilegeManager.enablePrivilege("UniversalXPConnect");
        return new Components.Constructor("@mozilla.org/file/local;1", "nsILocalFile", "initWithPath") != null;
      } catch (e) {}
      return false;
    }
  ]]></method>

  <requires>
    <plugin id="jsx3.io"/>
  </requires>

  <resources>
    <script id="js" path="File.js"/>
  </resources>

  <extension point="jsx3.io.file-system">
    <method id="isAvailable"><![CDATA[
      return this.getPlugIn().isAvailable();
    ]]></method>

    <file-system class="jsx3.io.XPCOMFileSystem" id="xpcom" label="Local Disk (Firefox)" list="true" read="true" scheme="file" write="true"/>
  </extension>

  <extension point="jsx3.amp.autoreg.dirlist">
    <method id="isAvailable" params="scheme"><![CDATA[
      return scheme == "file" && this.getPlugIn().isAvailable();
    ]]></method>

    <method id="getDirNames" params="baseURI"><![CDATA[
      var dir = (new jsx3.io.XPCOMFileSystem()).getFile(baseURI);
      return dir.listFiles().filter(
          function(e) { return e.isDirectory(); }).map(
          function(e) { return e.getName(); });
    ]]></method>
  </extension>

</plugin>
  <plugin id="jsx3.io.browser" name="File System Browser Plug-In" version="0.1" xmlns="http://www.generalinterface.org/gi/amp" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.generalinterface.org/gi/amp http://www.generalinterface.org/xsd/plugin.xsd">

  <method id="chooseFile" params="container, objParam"><![CDATA[
    this.open("TYPE_OPEN_FILE", container, objParam);
  ]]></method>

  <method id="chooseFiles" params="container, objParam"><![CDATA[
    this.open("TYPE_OPEN_FILES", container, objParam);
  ]]></method>

  <method id="chooseFolder" params="container, objParam"><![CDATA[
    this.open("TYPE_OPEN_FOLDER", container, objParam);
  ]]></method>

  <method id="saveFile" params="container, objParam"><![CDATA[
    this.open("TYPE_SAVE_FILE", container, objParam);
  ]]></method>

  <method id="open" params="type, container, objParam"><![CDATA[
    this.load().when(jsx3.$F(function() {
      try {
        var dialog = container.loadXML(this.getResource("ui").getData(), false, this);
        dialog.showFileDialog(jsx3.io.FileDialog[type], objParam);
      } catch (e) {
        this.getLog().error("Error opening file dialog", jsx3.NativeError.wrap(e));
      }
    }).bind(this));
  ]]></method>

  <requires>
    <plugin id="jsx3.gui.Matrix"/>
    <plugin id="jsx3.gui.ImageButton"/>
    <plugin id="jsx3.io"/>
  </requires>

  <resources>
    <script id="js" path="FileDialog.js"/>
    <xml id="ui" path="browser.xml"/>
  </resources>

</plugin>
  <plugin class="jsx3.ide.ui.PlugIn" id="jsx3.ide.ui" name="UI Plug-In" version="0.1" xmlns="http://www.generalinterface.org/gi/amp" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.generalinterface.org/gi/amp http://www.generalinterface.org/xsd/plugin.xsd">

  <requires>
    <plugin id="jsx3.gui.Alerts.alert"/>
    <plugin id="jsx3.gui.Image"/>
    <plugin id="jsx3.gui.LayoutGrid"/>
    <plugin id="jsx3.gui.Menu"/>
    <plugin id="jsx3.gui.WindowBar"/>
    <plugin id="jsx3.gui.Dialog"/>
    <plugin id="jsx3.gui.Sound"/>
    <plugin id="jsx3.gui.Splitter"/>
    <plugin id="jsx3.gui.StackGroup"/>
    <plugin id="jsx3.ide"/>
    <plugin id="jsx3.io"/>
    <plugin id="jsx3.amp.util.menumgr"/>
  </requires>

  <resources>
    <xml id="layout">
      <data>
        <serialization xmlns="urn:tibco.com/v3.0" jsxversion="3.5">
  <object type="jsx3.gui.LayoutGrid">
    <variants jsxleft="0" jsxoverflow="2" jsxrelativeposition="0" jsxtop="0"/>
    <strings jsxheight="100%" jsxname="mainLayout" jsxrows="26,*,26" jsxwidth="100%"/>
    <object type="jsx3.gui.WindowBar">
      <variants jsxbartype="2"/>
      <strings jsxname="mainMenu"/>
    </object>
    <object type="jsx3.gui.Block">
      <variants jsxoverflow="1"/>
      <strings jsxheight="100%" jsxname="mainContent" jsxwidth="100%"/>
    </object>
    <object type="jsx3.gui.WindowBar">
      <variants jsxbartype="3"/>
      <strings jsxname="mainTaskBar"/>
      <object type="jsx3.gui.Menu">
        <variants jsxshare="1"/>
        <strings jsxdisplay="none" jsxname="jsxmenu_apppath" jsxxmlid="jsx3.ide.ui.menu-path" jsxxmlurl="menu-path.xml"/>
      </object>
    </object>
  </object>
</serialization>
      </data>
    </xml>
    <xml id="mainContent">
      <data>
        <serialization xmlns="urn:tibco.com/v3.0">
  <onAfterDeserialize/>
    <object type="jsx3.gui.LayoutGrid">
      <variants jsxoverflow="2" jsxrelativeposition="0"/>
      <strings jsxheight="100%" jsxrows="5,*" jsxwidth="100%"/>
        <object type="jsx3.gui.Block">
          <dynamics jsxbgcolor="@Solid Disabled"/>
          <variants jsxoverflow="2" jsxrelativeposition="1"/>
          <strings jsxborder="1px solid #e8e8f5;0px;0px;0px" jsxheight="100%" jsxname="jsxpad" jsxwidth="100%"/>
        </object>
        <object type="jsx3.gui.Block">
          <variants jsxoverflow="2" jsxrelativeposition="1"/>
          <strings jsxheight="100%" jsxwidth="100%"/>
            <object type="jsx3.gui.Splitter">
              <variants jsxleft="0" jsxorientation="1" jsxrelativeposition="0" jsxtop="0"/>
              <strings jsxdefault1pct="80%" jsxname="jsx_ide_splitter1" jsxsubcontainer1pct="100%" jsxsubcontainer2pct="0%"/>
                <object type="jsx3.gui.Splitter">
                  <variants jsxleft="0" jsxrelativeposition="0" jsxtop="0"/>
                  <strings jsxdefault1pct="20%" jsxname="jsx_ide_splitter2" jsxsubcontainer1pct="0%" jsxsubcontainer2pct="100%"/>
                    <object type="jsx3.gui.Splitter">
                      <variants jsxorientation="1"/>
                      <strings jsxname="jsx_ide_splitter3" jsxsubcontainer1pct="50%" jsxsubcontainer2pct="50%"/>
                        <object type="jsx3.gui.Block">
                          <variants jsxoverflow="2" jsxrelativeposition="1"/>
                          <strings jsxheight="100%" jsxname="jsxquad1" jsxwidth="100%"/>
                            <object type="jsx3.gui.StackGroup">
                              <variants jsxleft="0" jsxoverflow="2" jsxrelativeposition="1" jsxtop="0"/>
                              <strings jsxheight="100%" jsxname="jsx_ide_quadrant_q1" jsxwidth="100%"/>
                            </object>
                        </object>
                        <object type="jsx3.gui.Block">
                          <variants jsxoverflow="2" jsxrelativeposition="1"/>
                          <strings jsxheight="100%" jsxname="jsxquad2" jsxwidth="100%"/>
                            <object type="jsx3.gui.StackGroup">
                              <variants jsxleft="0" jsxoverflow="2" jsxrelativeposition="1" jsxtop="0"/>
                              <strings jsxheight="100%" jsxname="jsx_ide_quadrant_q2" jsxwidth="100%"/>
                            </object>
                        </object>
                    </object>
                    <object type="jsx3.gui.Splitter">
                      <variants jsxleft="0" jsxtop="0"/>
                      <strings jsxdefault1pct="75%" jsxname="jsx_ide_splitter4" jsxsubcontainer1pct="100%" jsxsubcontainer2pct="0%"/>
                        <object type="jsx3.gui.Block">
                          <dynamics jsxbgcolor="@Solid Shadow"/>
                          <variants jsxoverflow="2" jsxrelativeposition="1"/>
                          <strings jsxheight="100%" jsxname="jsx_ide_quadrant_qmain" jsxwidth="100%"/>
                        </object>
                        <object type="jsx3.gui.Splitter">
                          <variants jsxorientation="1"/>
                          <strings jsxname="jsx_ide_splitter5" jsxsubcontainer1pct="50%" jsxsubcontainer2pct="50%"/>
                            <object type="jsx3.gui.Block">
                              <variants jsxoverflow="2" jsxrelativeposition="1"/>
                              <strings jsxheight="100%" jsxname="jsxquad3" jsxwidth="100%"/>
                                <object type="jsx3.gui.StackGroup">
                                  <variants jsxleft="0" jsxoverflow="2" jsxrelativeposition="1" jsxtop="0"/>
                                  <strings jsxheight="100%" jsxname="jsx_ide_quadrant_q3" jsxwidth="100%"/>
                                </object>
                            </object>
                            <object type="jsx3.gui.Block">
                              <variants jsxoverflow="2" jsxrelativeposition="1"/>
                              <strings jsxheight="100%" jsxname="jsxquad4" jsxwidth="100%"/>
                                <object type="jsx3.gui.StackGroup">
                                  <variants jsxleft="0" jsxoverflow="2" jsxrelativeposition="1" jsxtop="0"/>
                                  <strings jsxheight="100%" jsxname="jsx_ide_quadrant_q4" jsxwidth="100%"/>
                                </object>
                            </object>
                        </object>
                    </object>
                </object>
                <object type="jsx3.gui.Block">
                  <dynamics jsxborder="@Inset"/>
                  <variants jsxoverflow="2" jsxrelativeposition="1"/>
                  <strings jsxbgcolor="#ffffff" jsxheight="100%" jsxname="jsx_ide_quadrant_q5" jsxwidth="100%"/>
                </object>
            </object>
        </object>
    </object>
</serialization>
      </data>
    </xml>
    <script id="main" load="early">
      <data><![CDATA[jsx3.Class.defineClass("jsx3.ide.ui.PlugIn",jsx3.amp.PlugIn,null,function(r,f){var
ub={A:'<nobr><a target="_new" style="color:darkblue;" href="',B:'">',C:"</a></nobr>",D:"0 1 0 5",E:"0 4 0 0",F:"jsxapp:/images/icon_48.gif",G:"jsx3.ide.toggleStageOnly(true);",H:"jsxexecute",I:"jsxtip",J:"_palettes_toggle_on",K:"jsxapp:/images/icon_49.gif",L:"jsx3.ide.toggleStageOnly(false);",M:"_palettes_toggle_off",N:"jsx:/images/icons/logo_234_18.gif",O:"3",P:"forumSearchDialog",Q:"search-forums",a:".",b:"mainContent",c:"layout",d:"mainMenu",e:"mainTaskBar",f:"menubar-ext",g:"float:right;",h:"taskbar-ext",i:"/",j:"menu",k:"action",l:"palette",m:"Error initializing the menu manager.",n:"ready",o:"jsx3.ide.log",p:"images/progress_off.gif",q:"5 0 0 4",r:"vertical-align:top;",s:"Indicates when AMP plug-in resources are loading",t:"images/progress_on.gif",u:"6 16 1 8",v:"100%",w:"0px;2px dotted #9898a5;0px;0px",x:"jsxmenu_apppath",y:"startup",z:"_setProjectPath"};var
la=jsx3.ide.ui;var
da=jsx3.amp;la.CONTENT={};f.onLoaded=function(){this._menuManager=new
da.util.MenuManager();this._paletteManager=new
la.PaletteManager();this._paletteManager.setMenuManager(this._menuManager);this._paletteManager.setPlugIn(this);};f.getMenuManager=function(){return this._menuManager;};f.getPaletteManager=function(){return this._paletteManager;};f.getPalette=function(l,d){return this._paletteManager?this._paletteManager.getPalette(l.getId()+ub.a+d):null;};f.paintLayout=function(n){jsx3.ide.onStartUp((jsx3.$F(function(){this._paintLayout(n);})).bind(this));};f.paintIDELayout=function(c){((this.getResource(ub.b)).load()).when((jsx3.$F(function(){this.loadRsrcComponent(ub.b,c);})).bind(this));};f._paintLayout=function(l){(this.getServer()).paint();var
ga=this.loadRsrcComponent(ub.c,l,false);var
x=ga.getDescendantOfName(ub.d);var
pb=ga.getDescendantOfName(ub.e);((this.getExtPoint(ub.f)).processExts()).each(function(i){i.setCSSOverride(ub.g);x.setChild(i);});((this.getExtPoint(ub.h)).processExts()).each(function(a){pb.setChild(a);});l.paintChild(ga);jsx3.sleep((jsx3.$F(this._paintLayout2)).bind(this,[ga]));};f._paintLayout2=function(g){var
ma=g.getDescendantOfName(ub.d);var
U=g.getDescendantOfName(ub.b);var
Q=this.getMenuManager();Q.addMenuBar(ub.i,ma);((this.getExtPoint(ub.j)).processExts()).each(function(j){Q.addMenu(j);});((this.getExtPoint(ub.k)).processExts()).each(function(d){Q.addItem(d);});var
_=this.getPaletteManager();((this.getExtPoint(ub.l)).processExts()).each(function(i){_.addPalette(i);});var
xb=(this.getExtPoint(ub.c)).processExts();if(xb.length>0)xb[0](U);try{Q.finishInit();}catch(Kb){(this.getLog()).error(ub.m,jsx3.NativeError.wrap(Kb));}(this.getExtPoint(ub.n)).processExts();jsx3.ide._addJob(function(){var
Ea=this.getPlugIn(ub.o);if(Ea)Ea.load();});jsx3.ide._addJob(jsx3.ide._adjustSplittersOnStartup);};f.createAmpProgress=function(){var
E=this._progimage=new
jsx3.gui.Image();E.setSrc(ub.p);E.setHeight(16);E.setWidth(16);E.setMargin(ub.q);E.setCSSOverride(ub.r);E.setTip(ub.s);return E;};f.setProgress=function(){if(this._progimage&&!this._progimage._progon){this._progimage._progon=true;this._progimage.setSrc(ub.t);this._progimage.repaint();}};f.onComplete=function(){if(this._progimage&&this._progimage._progon){this._progimage._progon=false;this._progimage.setSrc(ub.p);this._progimage.repaint();jsx3.html.updateCSSOpacity(this._progimage.getRendered(),0.25);}};f.createProjectPathExt=function(){var
Wa=this._projectpath=new
jsx3.gui.Block();Wa.setText();Wa.setPadding(ub.u);Wa.setHeight(ub.v);Wa.setBorder(ub.w);Wa.setMenu(ub.x);if(jsx3.ide.PROJECT)this._setProjectPath();else jsx3.IDE.subscribe(ub.y,this,ub.z);return Wa;};f._setProjectPath=function(){var
xa=jsx3.ide.getActiveProjectDirectory();if(xa)this._projectpath.setText(ub.A+xa.toURI()+ub.B+jsx3.ide.PROJECT.getPathFromHome()+ub.C,true);};f.createSnapBtnsExt=function(){var
ob=new
jsx3.gui.Block();ob.setPadding(ub.D);ob.setMargin(ub.E);ob.setHeight(ub.v);ob.setBorder(ub.w);ob.setCSSOverride(ub.r);var
cb=new
jsx3.gui.ToolbarButton();cb.setImage(ub.F);cb.setEvent(ub.G,ub.H);cb.setDynamicProperty(ub.I,ub.J);ob.setChild(cb);var
Q=new
jsx3.gui.ToolbarButton();Q.setImage(ub.K);Q.setEvent(ub.L,ub.H);Q.setDynamicProperty(ub.I,ub.M);ob.setChild(Q);return ob;};f.createMenuLogo=function(){var
rb=new
jsx3.gui.Image();rb.setSrc(ub.N);rb.setPadding(ub.O);return rb;};f.searchForums=function(){var
zb=this.getServer();var
cb=zb.getJSXByName(ub.P);if(cb){cb.focus();}else{var
Eb=this.getResource(ub.Q);(Eb.load()).when((jsx3.$F(function(){this.loadRsrcComponent(Eb,zb.getRootBlock(),true);})).bind(this));}};});jsx3.Class.defineClass("jsx3.ide.ui.DialogToolPlugIn",jsx3.amp.PlugIn,null,function(s,e){var
ub={a:"ui"};e._compname=null;e.openTool=function(){var
w=this.isMultiInstance()?null:this.getSingleInstance();if(!w){w=this.loadRsrcComponent(this.getToolResource(),this.getToolContainer());w.getPlugIn=(jsx3.$F(function(){return this;})).bind(this);if(w.initTool)w.initTool();this._compname=w.getName();jsx3.sleep(function(){if(w.getFirstResponder)(w.getFirstResponder()).focus();else w.focus();});}else{w.focus();if(w.toolRefocus)w.toolRefocus();}};e.getSingleInstance=function(){return (this.getServer()).getJSXByName(this._compname);};e.getToolResource=function(){return this.getResource(ub.a);};e.getToolContainer=function(){return (this.getServer()).getRootBlock();};e.isMultiInstance=function(){return false;};});]]></data>
    </script>
    <script id="Menus">
      <data><![CDATA[jsx3.Class.defineClass("jsx3.ide.ui.IdeMenuItem",jsx3.amp.util.MenuItem,null,function(i,e){var
ub={a:"enabled",b:/\W+/g,c:"project",d:"editor",e:"reload",f:"home",g:"file",h:"enabled-file",i:"eval",j:"enabled-eval",k:"selected",l:"jsx",m:"selected-jsx",n:"selected-eval",o:"hkconfig",p:"id",q:"hotkeys",r:"hotkey",s:"{",t:"}",u:"label",v:"undefined"};e.isEnabled=function(){var
_=this.attr(ub.a);if(_){var
Pa=_.split(ub.b);var
y={};for(var
za=0;za<Pa.length;za++)y[Pa[za]]=1;if(y[ub.c]&&!jsx3.ide.PROJECT)return false;if(y[ub.d]&&!jsx3.ide.getActiveEditor())return false;if(y[ub.e]&&!(jsx3.ide.getActiveEditor()).supportsReload())return false;if(y[ub.f]&&!jsx3.ide.getCurrentUserHome())return false;if(y[ub.g]&&!(jsx3.ide.getBuilderRelativeFile(this.attr(ub.h))).exists())return false;if(y[ub.i]&&!(this.getExt()).eval(this.attr(ub.j),{menu:(this.getMenu()).getNativeMenu()}))return false;}return true;};e.isSelected=function(){var
ua=this.attr(ub.k);if(ua){var
R=ua.split(ub.b);var
Mb={};for(var
Qa=0;Qa<R.length;Qa++)Mb[R[Qa]]=1;if(Mb[ub.l]&&(((this.getExt()).getPlugIn()).getServer()).getJSXByName(this.attr(ub.m)))return true;if(Mb[ub.i]&&(this.getExt()).eval(this.attr(ub.n),{menu:(this.getMenu()).getNativeMenu()}))return true;}return false;};e.getHotKeyId=function(){return this.attr(ub.o)?this.attr(ub.p):null;};e.getHotKey=function(){var
y=this.getHotKeyId();if(y){var
Lb=(jsx3.ide.getIDESettings()).get(ub.q)||{};if(Lb[y])return Lb[y];}return this.getDefaultHotKey();};e.getDefaultHotKey=function(){var
ca=this.attr(ub.r);if(ca&&ca.indexOf(ub.s)==0&&jsx3.util.strEndsWith(ca,ub.t))ca=(((this.getExt()).getPlugIn()).getServer()).getDynamicProperty(ca.substring(1,ca.length-1));return ca;};e.getLabel=function(){var
ka=this.attr(ub.u);if(ka.indexOf(ub.s)==0&&(jsx3.$S(ka)).endsWith(ub.t)){var
Wa=(((this.getExt()).getPlugIn()).getServer()).getDynamicProperty(ka.substring(1,ka.length-1));if(typeof Wa!=ub.v)return Wa;}return ka;};});jsx3.Class.defineClass("jsx3.ide.ui.IdeMenu",jsx3.amp.util.Menu,null,function(c,i){});jsx3.ide.ui.IdeMenu.prototype.isEnabled=jsx3.ide.ui.IdeMenuItem.prototype.isEnabled;jsx3.Class.defineClass("jsx3.ide.ui.RecentProjMenu",jsx3.ide.ui.IdeMenu,null,function(i,q){var
ub={a:'<data jsxid="jsxroot"><record/></data>',b:"jsxid",c:"doOpenProject",d:"recent:",e:"jsx3.ide.",f:"(objRECORD.getAttribute('jsxtext'));"};q.getXML=function(){var
mb=new
jsx3.xml.Document();mb.loadXML(ub.a);return mb;};q.onShow=function(a,e){var
X=jsx3.ide.getRecentProjects();if(X.length==0)return;e.removeChildren();var
I=e.getAttribute(ub.b);var
Xa=ub.c;for(var
aa=0;aa<X.length;aa++){var
cb=X[aa];var
ha={jsxid:ub.d+cb,jsxtext:cb,jsxexecute:ub.e+Xa+ub.f};a.insertRecord(ha,I,false);}};});jsx3.Class.defineClass("jsx3.ide.ui.UserProjMenu",jsx3.ide.ui.IdeMenu,null,function(f,r){var
ub={a:'<data jsxid="jsxroot"><record/></data>',b:"relpath",c:"jsxid",d:"jsx3.ide.project",e:"doOpenProject",f:"user:",g:"jsx3.ide.",h:"(objRECORD.getAttribute('homepath'));",i:"userproj:"};r.getXML=function(){var
v=new
jsx3.xml.Document();v.loadXML(ub.a);return v;};r.onShow=function(p,i){var
tb=jsx3.ide.getProjectDirectory();if(!tb)return;var
ca=tb.resolve(i.getAttribute(ub.b));var
Y=i.getAttribute(ub.c);i.removeChildren();var
Ra=jsx3.ide.getPlugIn(ub.d);var
w=0;if(ca.isDirectory()){var
N=ca.listFiles();var
rb=ub.e;for(var
ma=0;ma<N.length;ma++){var
Qa=N[ma];if(jsx3.ide.isFileToIgnore(Qa))continue;if(Qa.isDirectory()){w++;var
Z=(((jsx3.ide.getCurrentUserHome()).toURI()).relativize(Qa.toURI())).toString();var
z=((tb.toURI()).relativize(Qa.toURI())).toString();if(Ra.getTypeForDir(Qa)!=null){var
E={jsxid:ub.f+z,jsxtext:Qa.getName(),relpath:z,homepath:Z,jsxexecute:ub.g+rb+ub.h};p.insertRecord(E,Y,false);}else{var
_a=ub.i+z;var
E={jsxid:_a,jsxtext:Qa.getName(),relpath:z};p.insertRecord(E,Y,false);p.insertRecord({},_a,false);}}}}if(w==0)p.insertRecord({},Y,false);};});jsx3.Class.defineClass("jsx3.ide.ui.RecentFilesMenu",jsx3.ide.ui.IdeMenu,null,function(a,p){var
ub={a:'<data jsxid="jsxroot"><record/></data>',b:"jsxid",c:"doOpenUrlForEdit",d:"recent:",e:"jsx3.ide.",f:"(jsx3.ide.PROJECT.resolveURI(objRECORD.getAttribute('jsxtext')));"};p.getXML=function(){var
Ya=new
jsx3.xml.Document();Ya.loadXML(ub.a);return Ya;};p.onShow=function(o,j){var
Ga=jsx3.ide.getRecentFiles();if(Ga.length==0)return;j.removeChildren();var
ab=j.getAttribute(ub.b);var
ob=ub.c;for(var
jb=0;jb<Ga.length;jb++){var
xa=Ga[jb];var
L={jsxid:ub.d+xa,jsxtext:xa,jsxexecute:ub.e+ob+ub.f};o.insertRecord(L,ab,false);}};});jsx3.Class.defineClass("jsx3.ide.ui.NewFileMenu",jsx3.ide.ui.IdeMenu,null,function(e,c){var
ub={a:"jsx3.ide",b:"@hotkey",c:"{hk.new}"};var
mb=jsx3.amp;c._initItems=function(){var
Fa=(((this.getExt()).getPlugIn()).getEngine()).getPlugIn(ub.a);var
X=0;(Fa.getFileTypes()).each((jsx3.$F(function(a){var
na={"@id":a.getId(),"@label":a.getLabel(),"@img":a.getImage()};if(X++
==0)na[ub.b]=ub.c;var
tb=new
jsx3.ide.ui.IdeMenuItem(a.getExt(),new
mb.XML(na));tb.execute=function(){jsx3.ide.doNewEditor(a.getId());};this.addItem(tb);})).bind(this));};c.getXML=function(){this._initItems();return this.jsxsuper();};});]]></data>
    </script>
    <script id="PaletteManager">
      <prereq id="Menus"/>
    <data><![CDATA[jsx3.Class.defineClass("jsx3.ide.ui.PaletteManager",null,null,function(g,o){var
ub={a:"/jsx3.ide.palettes/",b:"idegroup",c:"float",d:"default-closed",e:"true",f:"palette-dialog",g:"default-position",h:"palette-stack",i:"jsx_ide_quadrant_",j:"No UI resource for palette: ",k:"paletteMoved",l:"close"};var
Ha=jsx3.ide.ui;o.init=function(){this._palettes={};this._loading=0;};o.setMenuManager=function(d){this._menuManager=d;};o.setPlugIn=function(q){this._plugin=q;};o.getPalette=function(a){return this._palettes[a];};o.addPalette=function(s){this._palettes[s.getId()]=s;s._manager=this;if(this._menuManager){var
N=this._menuManager.getMenu(ub.a);if(N)N.addItem(new
Ha.PaletteMenuItem(s),s.u1&&s.u1.attr(ub.b));}this._loading++;};o.startup=function(){(jsx3.$H(this._palettes)).each((jsx3.$F(function(b,j){var
V=j.getSettings();var
za=V.closed;if(!za){if(V[ub.c])this.openInDialog(j);else if(za===false||j.u1.attr(ub.d)!=ub.e)this.openInStack(j,V.quadrant);}else this._loading--;})).bind(this));};o.openInDialog=function(p){var
ea=this._plugin.getResource(ub.f);(ea.load()).when((jsx3.$F(function(){this._loadPaletteIn(p,(this._plugin.getServer()).getRootBlock(),ea.getData());})).bind(this));};o.openInStack=function(d,r){if(!r)r=d.u1.attr(ub.g);var
Qa=this._getQuadrant(r);if(Qa){var
U=this._plugin.getResource(ub.h);(U.load()).when((jsx3.$F(function(){this._loadPaletteIn(d,Qa,U.getData());})).bind(this));}};o._getQuadrant=function(d){return (this._plugin.getServer()).getJSXByName(ub.i+d);};o._loadPaletteIn=function(h,j,e){var
B=null;var
zb=j.loadXML(e,null,this._plugin);zb.setPaletteLabel(h.getLabel());zb.getPalette=(jsx3.$F(function(){return this;})).bind(h);zb.getManager=(jsx3.$F(function(){return this;})).bind(this);zb.onContainerOpened();this._restorePosition(h,zb);((h.DI.getPlugIn()).load()).when((jsx3.$F(function(){var
ia=h.getUIResource();if(!ia){(this._plugin.getLog()).error(ub.j+h);return;}(ia.load()).when((jsx3.$F(function(){var
na=h.getUIObject();if(na){na.setDisplay(jsx3.gui.Block.DISPLAYBLOCK);(zb.getPaletteContentHolder()).adoptChild(na);var
Ca=na.getContainer();B=Ca.getParent();B.removeChild(Ca);}else{na=h.loadUI(zb.getPaletteContentHolder());na.getPalette=(jsx3.$F(function(){return this;})).bind(h);na.getManager=(jsx3.$F(function(){return this;})).bind(this);if(na.onPaletteLoaded)na.onPaletteLoaded();}na.getContainer=(jsx3.$F(function(){return this;})).bind(zb);this._loading--;if(this._loading<=0)this._plugin.publish({subject:ub.k,container:zb,previousParent:B});})).bind(this));})).bind(this));};o._onPositionMenu=function(m,h,j){var
qa=h.getSettings();if(j==ub.l){this.closePalette(h);}else if(j==ub.c){if(!(jsx3.gui.Dialog&&m instanceof jsx3.gui.Dialog)){this.openInDialog(h);qa[ub.c]=true;}}else{var
D=this._getQuadrant(j);if(D&&D!=m){this.openInStack(h,j);qa[ub.c]=false;qa.quadrant=j;}}h.setSettings(qa);};o.openPalette=function(r){var
F=r.getSettings();if(F[ub.c])this.openInDialog(r);else this.openInStack(r,F.quadrant);F.closed=false;r.setSettings(F);};o.closePalette=function(r){var
ka=r.getUIObject();if(ka.onPaletteUnloaded)ka.onPaletteUnloaded();var
pb=ka.getContainer();var
wa=pb.getParent();wa.removeChild(pb);var
ea=r.getSettings();ea.closed=true;r.setSettings(ea);this._plugin.publish({subject:ub.k,container:null,previousParent:wa});};o._restorePosition=function(p,i){if(jsx3.gui.Dialog&&i instanceof jsx3.gui.Dialog){var
ta=p.getSettings();var
ja=ta.dialog;if(ja)i.setDimensions(ja.left,ja.top,ja.width,ja.height,true);}};o.togglePalette=function(q){var
Ha=q.getUIObject();if(Ha){var
ob=Ha.getContainer();if(ob.isFront&&ob.isFront())this.closePalette(q);else ob.focus();}else this.openPalette(q);};o._afterDialogMove=function(c){var
Ba=c.getPalette();var
sa=Ba.getSettings();sa.dialog={left:c.getLeft(),top:c.getTop(),width:c.getWidth(),height:c.getHeight()};Ba.setSettings(sa);};});jsx3.Class.defineClass("jsx3.ide.ui.Palette",null,null,function(i,n){var
ub={a:"label",b:"resource",c:"palettes",d:"Palette."};var
jb=jsx3.ide.ui;n.init=function(l,k){this.DI=l;this.u1=k;};n.getId=function(){return this.DI.getId();};n.getLabel=function(){return this.u1.attr(ub.a);};n.getUIResource=function(){return (this.DI.getPlugIn()).getResource(this.u1.attr(ub.b));};n.getUIObject=function(){return ((this.DI.getPlugIn()).getServer()).getJSXByName(this._rootname);};n.getUIRootName=function(){return this._rootname;};n.getSettings=function(){var
ob=jsx3.ide.getIDESettings();if(!ob)return {};var
Ba=ob.get(ub.c,this.getId());if(!Ba){Ba={};ob.set(ub.c,this.getId(),Ba);}return Ba;};n.setSettings=function(r){var
gb=jsx3.ide.getIDESettings();gb.set(ub.c,this.getId(),r);};n.loadUI=function(a){var
K=this.DI.getPlugIn();var
jb=K.loadRsrcComponent(this.u1.attr(ub.b),a);this._rootname=jb.getName();return jb;};n.toString=function(){return ub.d+this.getId();};});jsx3.Class.defineClass("jsx3.ide.ui.PaletteMenuItem",jsx3.ide.ui.IdeMenuItem,null,function(a,r){var
ub={a:"idegroup",b:"per-ide"};var
fa=jsx3.ide.ui;r.init=function(f){this.jsxsuper(null,f.u1);this._palette=f;};r.getId=function(){return this._palette.getId();};r.getLabel=function(){return this._palette.getLabel();};r.isEnabled=function(){var
Ma=this._palette;return Ma.u1&&Ma.u1.attr(ub.a)==ub.b||jsx3.ide.PROJECT!=null;};r.isSelected=function(){return this._palette.getUIObject()!=null;};r.getHotKeyId=function(){return this.getId();};r.execute=function(){this._palette._manager.togglePalette(this._palette);};});]]></data>
    </script>
    <xml id="palette-menu" load="manual">
      <data>
        <data xmlns="" jsxid="jsxroot">
  <record jsxid="1" jsximg="jsxapp:/images/icon_81.gif" jsxtext="Fixed">
    <record jsxgroupname="position" jsxid="q1" jsximg="jsxapp:/images/q1.gif" jsxtext="Quadrant 1"/>
    <record jsxgroupname="position" jsxid="q2" jsximg="jsxapp:/images/q2.gif" jsxtext="Quadrant 2"/>
    <record jsxgroupname="position" jsxid="q3" jsximg="jsxapp:/images/q3.gif" jsxtext="Quadrant 3"/>
    <record jsxgroupname="position" jsxid="q4" jsximg="jsxapp:/images/q4.gif" jsxtext="Quadrant 4"/>
  </record>
  <record jsxgroupname="position" jsxid="float" jsximg="jsxapp:/images/icon_32.gif" jsxtext="Floating"/>
  <record jsxdivider="1" jsxid="close" jsximg="jsxapp:/images/icon_55.gif" jsxtext="Close"/>
</data>
      </data>
    </xml>
    <xml id="palette-dialog" load="manual">
      <prereq id="palette-menu"/>
    <data>
        <serialization xmlns="urn:tibco.com/v3.0">
  <onAfterDeserialize><![CDATA[objJSX._doMinimize=function(){this.doToggleState(jsx3.gui.Dialog.MINIMIZED);};objJSX._doCloseMe=function(){(this.getManager())._onPositionMenu(this,this.getPalette(),"close");};objJSX.setPaletteLabel=function(o){titleBar.setText(o,true);};objJSX.onContainerOpened=function(){};objJSX.getPaletteContentHolder=function(){return this;};objJSX.registerHotKey("_doMinimize","m",false,true,false);objJSX.registerHotKey("_doCloseMe","w",false,false,true);]]></onAfterDeserialize>
    <object type="jsx3.gui.Dialog">
      <dynamics jsxbgcolor="@Solid Medium"/>
      <variants jsxheight="300" jsxwidth="300"/>
      <strings jsxname="dialog" jsxvisibility=""/>
      <events jsxaftermove="this.constrainPosition();(this.getManager())._afterDialogMove(this);" jsxafterresize="(this.getManager())._afterDialogMove(this);"/>
        <object type="jsx3.gui.WindowBar">
          <variants/>
          <strings jsxname="titleBar" jsxtext="Palette Title"/>
            <object type="jsx3.gui.ToolbarButton">
              <dynamics jsximage="@Min Icon" jsxtip="jsx3.gui.Dialog.min"/>
              <variants/>
              <strings jsxname="jsx_tbb"/>
              <events jsxexecute="(this.getAncestorOfType(jsx3.gui.Dialog)).doToggleState();"/>
            </object>
            <object type="jsx3.gui.Menu">
              <variants jsxshare="1" jsxtype="0"/>
              <strings jsximage="jsxapp:/images/icon_81.gif" jsxmargin="2 5 0 0" jsxname="jsxmenu_dock" jsxtip="docking options" jsxxmlid="jsx3.ide.ui.palette-menu"/>
              <events jsxexecute="(dialog.getManager())._onPositionMenu(dialog,dialog.getPalette(),strRECORDID);" jsxmenu="this.selectItem(&quot;float&quot;);"/>
            </object>
        </object>
    </object>
</serialization>
      </data>
    </xml>
    <xml id="palette-stack" load="manual">
      <prereq id="palette-menu"/>
    <data>
        <serialization xmlns="urn:tibco.com/v3.0">
  <onAfterDeserialize><![CDATA[objJSX.setPaletteLabel=function(i){this.setText(i,true);};objJSX.getPaletteContentHolder=function(){return this;};objJSX.onContainerOpened=function(){this.doShow();};]]></onAfterDeserialize>
    <object type="jsx3.gui.Stack">
      <variants jsxorientation="0"/>
      <strings jsxname="stack" jsxtext="Palette Title"/>
        <object type="jsx3.gui.Menu">
          <variants jsxshare="1" jsxtype="0"/>
          <strings jsximage="jsxapp:/images/icon_81.gif" jsxmargin="2 5 0 0" jsxname="jsxmenu_dock" jsxtip="docking options" jsxxmlid="jsx3.ide.ui.palette-menu"/>
          <events jsxexecute="(stack.getManager())._onPositionMenu(stack,stack.getPalette(),strRECORDID);" jsxmenu="var&#10;za=this.getAncestorOfType(jsx3.gui.StackGroup);if(za){var&#10;M=za.getName();if(M.indexOf(&quot;jsx_ide_quadrant_&quot;)==0){var&#10;Hb=M.substring(&quot;jsx_ide_quadrant_&quot;.length);this.selectItem(Hb);}}"/>
        </object>
    </object>
</serialization>
      </data>
    </xml>
    <xml id="menu-path">
      <data>
        <data xmlns="" jsxid="jsxroot">
  <record jsxexecute="jsx3.html.copy(jsx3.ide.SERVER.getEnv(&quot;namespace&quot;));" jsxid="copyns" jsxtext="Copy Namespace to Clipboard"/>
  <record jsxexecute="jsx3.html.copy(jsx3.ide.SERVER.getEnv(&quot;apppath&quot;));" jsxid="copyapppath" jsxtext="Copy Path to Clipboard"/>

  <record jsxdivider="1" jsxexecute="jsx3.ide.doOpenProjectSettings();" jsxid="deploy" jsxtext="Project Settings..." jsxtip="Allows edit of application title, namespace, live/static modes, etc."/>
  <record jsxexecute="jsx3.ide.runProject(false);" jsxid="run" jsxtext="Run Project..." jsxtip="Run project in a new browser window..."/>
</data>
      </data>
    </xml>
    <xml id="search-forums" load="manual">
      <data>
        <serialization xmlns="urn:tibco.com/v3.0" jsxversion="3.7">
  <onAfterDeserialize><![CDATA[this.onSearchForums=function(){if(input.getValue()){var
ab=new
jsx3.net.URI.fromParts("http",null,"www.generalinterface.org",null,"/forums/search.php","keywords="+input.getValue(),null);jsx3.ide.openConsoleWindow(ab.toString(),"jsxide_forums",null,null,"yes","yes","yes","yes","yes");this.doClose();}else{this.beep();input.focus();}};this.onOpenForums=function(){jsx3.ide.openConsoleWindow("http://www.generalinterface.org/alias/forums","jsxide_forums",null,null,"yes","yes","yes","yes","yes");this.doClose();};this.onRsrcLoad=function(){window.setTimeout(function(){input.focus();},250);};]]></onAfterDeserialize>
  <object type="jsx3.gui.Dialog">
    <variants jsxheight="110" jsxresize="0" jsxwidth="330"/>
    <strings jsxname="forumSearchDialog"/>
    <dynamics jsxbgcolor="@Solid Medium"/>
    <object type="jsx3.gui.WindowBar">
      <variants/>
      <strings jsxname="bar" jsxtext="Search Forums"/>
      <object type="jsx3.gui.ToolbarButton">
        <variants/>
        <strings jsxname="btnClose"/>
        <dynamics jsximage="@Close Icon" jsxtip="jsx3.gui.Dialog.close"/>
        <events jsxexecute="(this.getAncestorOfType(jsx3.gui.Dialog)).doClose();"/>
      </object>
    </object>
    <object type="jsx3.gui.Block">
      <variants jsxloadtype="1" jsxoverflow="1"/>
      <strings jsxheight="100%" jsxname="block" jsxrelativeposition="1" jsxwidth="100%"/>
      <dynamics jsxpadding="@8Pixel"/>
      <object type="jsx3.gui.LayoutGrid">
        <variants jsxleft="0" jsxoverflow="2" jsxrelativeposition="0" jsxtop="0"/>
        <strings jsxheight="100%" jsxname="layoutRows" jsxrows="*,22" jsxwidth="100%"/>
        <object type="jsx3.gui.Block">
          <variants jsxoverflow="2"/>
          <strings jsxheight="100%" jsxname="pane1" jsxwidth="100%"/>
          <object type="jsx3.gui.LayoutGrid">
            <variants jsxleft="0" jsxoverflow="2" jsxrelativeposition="0" jsxtop="0"/>
            <strings jsxcols="80,*" jsxheight="100%" jsxname="layoutCols" jsxwidth="100%"/>
            <object type="jsx3.gui.Block">
              <variants jsxoverflow="2"/>
              <strings jsxheight="100%" jsxname="pane1" jsxpadding="0 6 0 0" jsxtext="Search Text:" jsxtextalign="right" jsxwidth="100%"/>
            </object>
            <object type="jsx3.gui.Block">
              <variants jsxoverflow="2"/>
              <strings jsxheight="100%" jsxname="pane2" jsxwidth="100%"/>
              <object type="jsx3.gui.TextBox">
                <variants jsxheight="18"/>
                <strings jsxmargin="0 4 0 0" jsxname="input" jsxvalue="" jsxwidth="100%"/>
                <events jsxexecute="forumSearchDialog.onSearchForums();"/>
              </object>
            </object>
          </object>
        </object>
        <object type="jsx3.gui.Block">
          <variants jsxoverflow="1"/>
          <strings jsxheight="100%" jsxname="pane2" jsxwidth="100%"/>
          <object type="jsx3.gui.LayoutGrid">
            <variants jsxleft="0" jsxoverflow="2" jsxrelativeposition="0" jsxtop="0"/>
            <strings jsxcols="80,*" jsxheight="100%" jsxname="layoutCols" jsxwidth="100%"/>
            <object type="jsx3.gui.Block">
              <variants jsxoverflow="2"/>
              <strings jsxheight="100%" jsxname="pane1" jsxwidth="100%"/>
              <object type="jsx3.gui.Button">
                <variants jsxheight="18" jsxindex="0"/>
                <strings jsxmargin="0 4 0 0" jsxname="button" jsxtext="Cancel"/>
                <events jsxexecute="forumSearchDialog.doClose();"/>
              </object>
            </object>
            <object type="jsx3.gui.Block">
              <variants jsxoverflow="1"/>
              <strings jsxheight="100%" jsxname="pane2" jsxtextalign="right" jsxwidth="100%"/>
              <object type="jsx3.gui.Button">
                <variants jsxheight="18" jsxindex="0"/>
                <strings jsxmargin="0 8 0 0" jsxname="button" jsxtext="Open Forums"/>
                <events jsxexecute="forumSearchDialog.onOpenForums();"/>
              </object>
              <object type="jsx3.gui.Button">
                <variants jsxheight="18" jsxindex="0"/>
                <strings jsxfontweight="bold" jsxname="button" jsxtext="Search"/>
                <events jsxexecute="forumSearchDialog.onSearchForums();"/>
              </object>
            </object>
          </object>
        </object>
      </object>
    </object>
  </object>
</serialization>
      </data>
    </xml>
  </resources>

  <event id="paletteMoved">
    <param id="container"/>
    <param id="previousParent"/>
  </event>

  <subscribe event="jsx3.ide.ui.paletteMoved">
    jsx3.sleep(jsx3.$F(jsx3.ide.rebalancePaletteDocks).bind(null, [evt.container, evt.previousParent]), 
        "jsx3.ide.rebalancePaletteDocks", null, true);
  </subscribe>

  <!-- Extension Points -->

  <extension-point id="menu">
    <processor instance-class="jsx3.ide.ui.IdeMenu" type="instantiator"/>
  </extension-point>

  <extension-point id="action">
    <processor instance-class="jsx3.ide.ui.IdeMenuItem" type="instantiator"/>
  </extension-point>

  <extension-point id="layout">
    <!-- This should return a function with the following signature:
         function(parent : jsx3.app.Model)
        -->
    <processor type="return"/>
  </extension-point>

  <extension-point id="menubar-ext">
    <!-- This should return an object of type jsx3.gui.Painted -->
    <processor type="return"/>
  </extension-point>

  <extension-point id="taskbar-ext">
    <!-- This should return an object of type jsx3.gui.Painted -->
    <processor type="return"/>
  </extension-point>

  <extension-point id="palette">
    <processor instance-class="jsx3.ide.ui.Palette" type="instantiator"/>
  </extension-point>

  <extension-point id="ready" name="UI Ready Extension Point">
    <processor type="eval"/>
  </extension-point>

  <!-- Extensions -->

  <extension id="main-layout" point="jsx3.amp.main.layout">
    <eval load="true">var p = this.getPlugIn(); jsx3.$F(p.paintLayout).bind(p)</eval>
  </extension>

  <extension id="content-layout" point="jsx3.ide.ui.layout">
    <eval>var p = this.getPlugIn(); jsx3.$F(p.paintIDELayout).bind(p)</eval>
  </extension>

  <extension id="menubar-items" point="jsx3.ide.ui.menubar-ext">
    <eval>this.getPlugIn().createMenuLogo()</eval>
  </extension>

  <extension id="taskbar-items" point="jsx3.ide.ui.taskbar-ext">
    <eval>this.getPlugIn().createAmpProgress()</eval>
    <eval>this.getPlugIn().createProjectPathExt()</eval>
    <eval>this.getPlugIn().createSnapBtnsExt()</eval>
  </extension>

  <extension point="jsx3.amp.main.progress">
    <eval>this.getPlugIn()</eval>
  </extension>

  <extension id="menus" point="jsx3.ide.ui.menu">
    <menu id="jsx3.ide.project" label="Project" path="/">
      <section id="new"/>
      <section id="open"/>
      <section id="recent"/>
      <divider id="settings"/>
      <section id="additions"/>
      <divider id="run"/>
    </menu>
    <menu enabled="home" ext-class="jsx3.ide.ui.RecentProjMenu" id="recentProjects" label="Recent Projects" path="/jsx3.ide.project/recent"/>
    <menu enabled="home" ext-class="jsx3.ide.ui.UserProjMenu" id="userProjects" label="User Projects" path="/jsx3.ide.project/recent"/>
    <menu id="jsx3.ide.file" label="File" path="/">
      <section id="new"/>
      <section id="recent"/>
      <divider id="close"/>
      <divider id="save"/>
      <section id="additions"/>
    </menu>
    <menu enabled="project" ext-class="jsx3.ide.ui.NewFileMenu" id="new" label="New" path="/jsx3.ide.file/new"/>
    <menu enabled="project" ext-class="jsx3.ide.ui.RecentFilesMenu" id="recentFiles" label="Recent Files" path="/jsx3.ide.file/recent"/>
    <menu id="jsx3.ide.tools" label="Tools" path="/">
      <section id="ide"/>
      <divider id="links"/>
      <section id="additions"/>
      <divider id="settings"/>
    </menu>
    <menu id="jsx3.ide.palettes" label="Palettes" path="/">
      <section id="per-file"/>
      <divider id="per-node"/>
      <divider id="per-project"/>
      <section id="per-ide"/>
      <divider id="misc"/>
      <section id="additions"/>
    </menu>
    <menu id="jsx3.ide.help" label="Help" path="/">
      <section id="api"/>
      <section id="apisub"/>
      <section id="additions"/>
      <divider id="links"/>
      <divider id="about"/>
      <divider id="license"/>
    </menu>
  </extension>

  <extension id="menu.project" point="jsx3.ide.ui.action">
    <action execute="jsx3.ide.openProject(false)" hkconfig="true" id="jsx3.ide.openProject" label="Open Project..." menupath="/jsx3.ide.project/open"/>
    <action enabled="project" execute="jsx3.ide.runProject(false)" hkconfig="true" id="jsx3.ide.run" label="Run Project..." menupath="/jsx3.ide.project/run" tip="Run project in a new browser window"/>
    <action enabled="project" execute="jsx3.ide.runProject(true)" hkconfig="true" id="jsx3.ide.runhttp" label="Run Project From HTTP..." menupath="/jsx3.ide.project/run" tip="Run project from a local HTTP server in a new browser window"/>

  </extension>

  <extension id="menu.file" point="jsx3.ide.ui.action">
    <action enabled="project" execute="jsx3.ide.open()" hkconfig="true" hotkey="{hk.open}" id="jsx3.ide.open" img="jsxapp:/images/icon_60.gif" label="Open..." menupath="/jsx3.ide.file/new"/>

    <!-- sleep this commands because of editarea ...
         Removing the IFRAME invalidates the Event object which is in a loop for check hot keys.
         There is no way of escaping the loop when the event is suddenly invalid. -->
    <action enabled="editor" execute="jsx3.sleep(jsx3.ide.close)" hkconfig="true" hotkey="{hk.close}" id="jsx3.ide.close" label="Close" menupath="/jsx3.ide.file/close"/>
    <action enabled="editor" execute="jsx3.sleep(jsx3.ide.closeAll)" hkconfig="true" hotkey="{hk.closeAll}" id="jsx3.ide.closeall" label="Close All" menupath="/jsx3.ide.file/close"/>
    <action enabled="editor" execute="jsx3.sleep(jsx3.ide.revert)" hkconfig="true" id="jsx3.ide.revert" label="Revert..." menupath="/jsx3.ide.file/close"/>
    <action enabled="editor" execute="jsx3.sleep(jsx3.ide.revertAll)" hkconfig="true" id="jsx3.ide.revertall" label="Revert All..." menupath="/jsx3.ide.file/close"/>

    <action enabled="editor" execute="jsx3.ide.save()" hkconfig="true" hotkey="{hk.save}" id="jsx3.ide.save" img="jsxapp:/images/icon_13.gif" label="Save" menupath="/jsx3.ide.file/save"/>
    <action enabled="editor reload" execute="jsx3.sleep(jsx3.ide.saveAndReload)" hkconfig="true" id="jsx3.ide.savereload" img="jsxapp:/images/icon_72.gif" label="Save and Reload" menupath="/jsx3.ide.file/save"/>
    <action enabled="editor" execute="jsx3.ide.saveAs()" hkconfig="true" id="jsx3.ide.saveas" img="jsxapp:/images/icon_14.gif" label="Save As..." menupath="/jsx3.ide.file/save"/>
    <action enabled="editor" execute="jsx3.ide.saveAll()" hkconfig="true" hotkey="{hk.saveAll}" id="jsx3.ide.saveall" img="jsxapp:/images/icon_75.gif" label="Save All" menupath="/jsx3.ide.file/save"/>

  </extension>

  <extension id="menu.tools" point="jsx3.ide.ui.action">
    <action execute="jsx3.ide.openConsoleWindow('http://www.generalinterface.org/alias/gitak','jsxide_gitak',null,null,'yes','yes','yes','yes','yes')" id="jsx3.ide.gitak" label="Test Automation Kit (GITAK)" menupath="/jsx3.ide.tools/links"/>
    <action execute="jsx3.ide.openConsoleWindow('http://www.generalinterface.org/alias/gipp','jsxide_gipp',null,null,'yes','yes','yes','yes','yes')" id="jsx3.ide.gipp" label="Performance Profiler (GIPP)" menupath="/jsx3.ide.tools/links"/>
  </extension>

  <extension id="menu.help" point="jsx3.ide.ui.action">
    <action execute="jsx3.ide.openConsoleWindow('http://www.generalinterface.org/alias/learning', 'jsxide_power',null,null,'yes','yes','yes','yes','yes');" id="jsx3.ide.help8a" label="Learning Center" menupath="/jsx3.ide.help/links"/>
    <action execute="jsx3.ide.openConsoleWindow('http://www.generalinterface.org/alias/samples','jsxide_samples',null,null,'yes','yes','yes','yes','yes');" id="jsx3.ide.help8b" label="&amp;#160; &amp;#160;Sample Applications" menupath="/jsx3.ide.help/links"/>
    <action execute="jsx3.ide.openConsoleWindow('http://www.generalinterface.org/alias/tutorials','jsxide_tutorials',null,null,'yes','yes','yes','yes','yes');" id="jsx3.ide.help8b1" label="&amp;#160; &amp;#160;Tutorials" menupath="/jsx3.ide.help/links"/>

    <action execute="jsx3.ide.openConsoleWindow('http://www.generalinterface.org/alias/forums','jsxide_forums',null,null,'yes','yes','yes','yes','yes');" id="jsx3.ide.help8c" label="Forums" menupath="/jsx3.ide.help/links"/>
    <action execute="this.getPlugIn().searchForums();" id="jsx3.ide.help8d" label="&amp;#160; &amp;#160;Search Forums..." menupath="/jsx3.ide.help/links"/>

    <action execute="jsx3.ide.openConsoleWindow('http://www.generalinterface.org/alias/os_home','jsxide_gios',null,null,'yes','yes','yes','yes','yes');" id="jsx3.ide.help9a" label="Open Source Project" menupath="/jsx3.ide.help/links"/>
    <action execute="jsx3.ide.openConsoleWindow('http://www.generalinterface.org/alias/bugs','jsxide_jira',null,null,'yes','yes','yes','yes','yes');" id="jsx3.ide.help9b" label="&amp;#160; &amp;#160;Bug and Enhancement Tracking" menupath="/jsx3.ide.help/links"/>
  </extension>

  <extension id="editor-container" point="jsx3.ide.editor.container">
    <container id="jsx_tpan_component"/>
  </extension>

</plugin>
  <plugin id="jsx3.ide.project" name="Project Type Plug-In" version="0.1" xmlns="http://www.generalinterface.org/gi/amp" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.generalinterface.org/gi/amp http://www.generalinterface.org/xsd/plugin.xsd">

  <method id="showNew">
    var dialog = this.getServer().getJSXByName(this._dialogid);
    if (dialog) {
      dialog.focus();
    } else {
      this.getResource("wizard").load().when(jsx3.$F(function() {
        var dialog = this.loadRsrcComponent("wizard", this.getServer().getRootBlock());
        this._dialogid = dialog.getName();
      }).bind(this));
    }
  </method>

  <requires>
  </requires>

  <resources>
    <script eval="true" id="js">
      <data><![CDATA[(function(r){var
ub={a:"project-type"};(jsx3.$O(r)).extend({getProjectTypes:function(){if(!this._types)this._types=(this.getExtPoint(ub.a)).processExts();return this._types;},getTypeById:function(f){return (this.getProjectTypes()).find(function(p){return p.getId()==f;});},getTypeForDir:function(b){return (jsx3.$A((this.getProjectTypes()).reverse())).find(function(h){return h.isProjectDir(b);});},getTypeForProject:function(n){}});})(this);jsx3.Class.defineClass("jsx3.ide.ProjectType",null,null,function(q,p){var
ub={a:"id",b:"panes",c:"label",d:"description",e:"class"};p.init=function(d,a){this.u1=a;this.DI=d;};p.getId=function(){return this.u1.attr(ub.a);};p.getPanes=function(){return this.u1.attr(ub.b);};p.getPlugIn=function(){return this.DI.getPlugIn();};p.getLabel=function(){return this.u1.attr(ub.c);};p.getDescription=function(){return this.u1.attr(ub.d);};p.toString=function(){return this.getId();};p.getClassObj=function(){return jsx3.Class.forName(this.u1.attr(ub.e));};p.isProjectDir=function(n){return false;};});jsx3.Class.defineClass("jsx3.ide.Project",null,[jsx3.util.EventDispatcher],function(g,f){var
ub={a:"loaded",b:"/"};g.LOADED=ub.a;f.init=function(k,s){this.hD=k;this.q0=s;this.FD=(((jsx3.ide.getCurrentUserHome()).toURI()).relativize(this.q0.toURI())).toString();if(jsx3.util.strEndsWith(this.FD,ub.b))this.FD=this.FD.substring(0,this.FD.length-1);};f.initialize=jsx3.$Y(function(a){a.done();});f.getProjectType=function(){return this.hD;};f.getDirectory=function(){return this.q0;};f.getPathFromHome=function(){return this.FD;};f.getRequiredAddins=function(){return [];};f.getGIVersion=function(){return jsx3.ide.getProjectAuthorVersion();};f.isNeedsUpgrade=function(){return false;};f.upgrade=function(){};f.load=jsx3.$Y(function(h){h.done();});f.getResources=function(){return jsx3.$A();};f.setResources=function(l){};f.getTitle=function(){return ((this.getDirectory()).toURI()).toString();};f.getDefaultOpenFiles=function(){return [];};});jsx3.Class.defineClass("jsx3.ide.ProjectRsrc",null,[jsx3.util.EventDispatcher],function(i,h){var
ub={a:"jsx3.ide",b:":"};h.init=function(a,l,c,j){this.ST=a;this.hD=l;this.jV=c;this.h0=j;};h.getId=function(){return this.ST;};h.getType=function(){return this.hD;};h.getLoadType=function(){return this.jV;};h.getPath=function(){return this.h0;};h.getFileType=function(){return (jsx3.ide.getPlugIn(ub.a)).getFileType(this.hD);};h.toString=function(){return this.ST+ub.b+this.hD+ub.b+this.h0;};});]]></data>
    </script>
    <xml id="wizard" load="manual">
      <prereq id="js"/>
    <data>
        <serialization xmlns="urn:tibco.com/v3.0">
  <onAfterDeserialize><![CDATA[var
ga=jsx3.amp;objJSX.onRsrcLoad=function(){var
ub={a:"jsx3.amp.util.wizard",b:"first-pane"};var
Mb=((this.getPlugIn()).getEngine()).getPlugIn(ub.a);(Mb.load()).when((jsx3.$F(function(){var
H=this._wizard=new
ga.util.Wizard();H.subscribe(ga.util.Wizard.CANCEL,this,this.doClose);H.subscribe(ga.util.Wizard.FINISH,this,this._onFinish);var
sb=new
ga.util.WizardPane((this.getPlugIn()).getResource(ub.b),this.getPlugIn());sb.mayNext=function(){return true;};sb.mayFinish=function(){return false;};H.addPane(sb);H.renderIn(contentPane);})).bind(this));};objJSX._onFinish=function(l){var
O=this._wizard.getSession();var
va=O.projectType;((va.getPlugIn()).load()).when((jsx3.$F(function(){var
V=va.getClassObj();var
K=(V.getConstructor()).create(O);var
Jb=K.ok?(jsx3.$F(this._successAndClose)).bind(this,[K.project]):null;if(K.message){this.alert(null,K.message,(jsx3.$F(function(c){c.doClose();if(Jb)Jb();})).bind(this));}else if(Jb)Jb();})).bind(this));};objJSX._successAndClose=function(e){var
ub={a:"The project was successfully created. There are unsaved changes to the open project. Please save your changes and select the new project from the Project menu to open it."};if(jsx3.ide.isAnyEditorDirty()){this.alert(null,ub.a,(jsx3.$F(function(b){b.doClose();this.doClose();})).bind(this));}else{this.doClose();jsx3.ide.doOpenProject(e,false);}};]]></onAfterDeserialize>
  <object type="jsx3.gui.Dialog">
    <dynamics jsxbgcolor="@Solid Medium"/>
    <variants jsxmodal="0" jsxoverflow="2" jsxresize="0"/>
    <strings jsxheight="300" jsxhelpid="ide.newproj" jsxname="newprojectwizard" jsxwidth="400"/>
    <object type="jsx3.gui.WindowBar">
      <variants/>
      <strings jsxtext="Create a New Project"/>
      <object type="jsx3.gui.ToolbarButton">
        <dynamics jsximage="@Close Icon" jsxtip="jsx3.gui.Dialog.close"/>
        <variants/>
        <strings/>
        <events jsxexecute="newprojectwizard._wizard.cancel();"/>
      </object>
    </object>
    <object type="jsx3.gui.Block">
      <variants jsxoverflow="2"/>
      <strings jsxheight="100%" jsxname="contentPane" jsxpadding="8" jsxwidth="100%"/>
    </object>
  </object>
</serialization>
      </data>
    </xml>
    <xml id="first-pane" load="manual">
      <data>
        <serialization xmlns="urn:tibco.com/v3.0">
  <onAfterDeserialize><![CDATA[objJSX.getTitle=function(){return "Choose a Project Type";};objJSX.getFirstResponder=function(){return typelist;};objJSX.onReveal=function(){if(!this._inited){this._inited=true;var
ca=(this.getPlugIn()).getProjectTypes();ca.each(function(c){typelist.insertRecord({jsxid:c.getId(),label:c.getLabel()});});if(ca.length==1){typelist.setValue(ca[0].getId());this._doSelect(ca[0].getId());}}};objJSX.onConceal=function(f){f.projectType=this._getSelectedType();};objJSX.onTryNext=function(){var
ub={a:/\s*,\s*/g};var
Ba=this._getSelectedType();if(Ba){var
aa=(this.getPane()).getWizard();if(this._lasttype!=Ba){for(var
Fa=aa.getPaneCount()-1;Fa>0;Fa--)aa.removePane(Fa);var
P=(Ba.getPanes()).split(ub.a);(jsx3.$A(P)).each(function(r){var
_a=new
jsx3.amp.util.WizardPane((Ba.getPlugIn()).getResource(r),Ba.getPlugIn());aa.addPane(_a);});this._lasttype=Ba;}}return {ok:Ba!=null};};objJSX.onTryPrevious=function(){};objJSX._getSelectedType=function(){return (this.getPlugIn()).getTypeById(typelist.getValue());};objJSX._doSelect=function(c){var
U=(this.getPlugIn()).getTypeById(c);descr.setText(U?U.getDescription():"",true);};]]></onAfterDeserialize>
  <object type="jsx3.gui.Block">
    <variants jsxoverflow="2"/>
    <strings jsxheight="100%" jsxname="pane" jsxwidth="100%"/>
    <object type="jsx3.gui.LayoutGrid">
      <variants jsxleft="0" jsxoverflow="2" jsxrelativeposition="0" jsxtop="0"/>
      <strings jsxheight="100%" jsxrows="120,*" jsxwidth="100%"/>
      <object type="jsx3.gui.Block">
        <dynamics jsxborder="@Inset"/>
        <variants jsxoverflow="1"/>
        <strings jsxheight="100%" jsxwidth="100%"/>
        <object type="jsx3.gui.Matrix">
          <dynamics jsxbgcolor="@Solid Medium" jsxheaderborder="@Outset NoBottom"/>
          <variants jsxheaderheight="0" jsxreorder="0" jsxresize="0" jsxscalewidth="1" jsxselectionmodel="1"/>
          <strings jsxbodyborder="1px solid #d8d8e5" jsxfocusstyle=";" jsxname="typelist"/>
          <events jsxchange="pane._doSelect(this.getValue());"/>
          <!--<xslparameters jsx_rowbg1="#ffffff"/>-->
          <object type="jsx3.gui.Matrix.Column">
            <dynamics jsxbg="@Fade TopDown" jsxborder="@Outset" jsxcellbgcolor="@Matrix AllCol Light BG" jsxcellborder="@Matrix AllCol Light Border"/>
            <strings jsxcellpadding="3" jsxformathandler="@unescape" jsxname="abclist_col1" jsxpath="label" jsxvaluetemplate="@unescape" jsxwidth="*"/>
          </object>
        </object>
      </object>
      <object type="jsx3.gui.Block">
        <variants jsxoverflow="2"/>
        <strings jsxheight="100%" jsxname="descr" jsxpadding="6 0 6 0" jsxwidth="100%"/>
      </object>
    </object>
  </object>
</serialization>
      </data>
    </xml>
  </resources>

  <extension-point id="project-type">
    <processor instance-class="jsx3.ide.ProjectType" type="instantiator"/>
  </extension-point>

  <extension id="menu.project" point="jsx3.ide.ui.action">
    <action enabled="home" execute="this.getPlugIn().showNew();" hkconfig="true" hotkey="{hk.newProject}" id="jsx3.ide.newproj" label="New Project..." menupath="/jsx3.ide.project/new"/>
  </extension>
  
</plugin>
  <plugin id="jsx3.ide.project.app" name="Application Project Type Plug-In" version="0.1" xmlns="http://www.generalinterface.org/gi/amp" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.generalinterface.org/gi/amp http://www.generalinterface.org/xsd/plugin.xsd">

  <script>
    this.getEngine().getPlugIn("jsx3.ide.project").loaded().when(function() {
      jsx3.Class.defineClass("jsx3.ide.project.Type", jsx3.ide.ProjectType, null, function(Type, Type_prototype) {
        Type_prototype.isProjectDir = function(dir) {
          return dir.resolve("config.xml").isFile();
        };
      });
    });
  </script>

  <requires>
    <plugin id="jsx3.ide.project"/>
  </requires>

  <resources>
    <script id="server">
      <data><![CDATA[jsx3.GO=jsx3.lang.System.GO=function(k,c){if(jsx3.util.strEmpty(k))return null;var
D=k.indexOf("_jsx_")==0;var
_=jsx3.ide.SERVER;if(c){if(c=="jsx3.IDE")return D?jsx3.IDE.getJSXById(k):jsx3.IDE.getJSXByName(k);if(_!=null&&_.getEnv("namespace")==c)return D?_.getJSXById(k):_.getJSXByName(k);}else return _!=null&&(D?_.getJSXById(k):_.getJSXByName(k))||(D?jsx3.IDE.getJSXById(k):jsx3.IDE.getJSXByName(k));return null;};jsx3.require("jsx3.gui.Dialog");jsx3.gui.Dialog.prototype._doClose=jsx3.gui.Dialog.prototype.doClose;jsx3.gui.Dialog.prototype.doClose=function(){if(this.getServer()!=jsx3.IDE)(jsx3.ide.getEditorForJSX(this)).doRecycle(this.getId(),true);else this._doClose();};jsx3.Class.defineClass("jsx3.ide.Server",jsx3.app.Server,null,function(o,a){var
ub={a:"jsx3.ide.project.app",b:"cachedChanged",c:"apppathuri",d:"onunload",e:"_jsx_",f:"",g:"script",h:"css",i:"GET",j:"*",k:"head",l:"beforeEnd",m:'<style type="text/css">\n',n:"\n</style>"};a.init=function(g){g=(((jsx3.ide.getSystemDirFile()).toURI()).relativize(((jsx3.ide.getCurrentUserHome()).toURI()).resolve(g))).toString();this.jsxsuper(g,null,false);this.D3=new
jsx3.util.List();(this.getCache()).subscribe(jsx3.app.Cache.CHANGE,function(){(jsx3.ide.getPlugIn(ub.a)).publish({subject:ub.b});});};a.getDirectory=function(){if(this.iw==null)this.iw=jsx3.ide.getSystemRelativeFile(this.getAppPath());return this.iw;};a.getBaseDirectory=function(){if(this.jt==null)this.jt=jsx3.ide.getSystemRelativeFile(this.getEnv(ub.c));return this.jt;};a.paint=function(){};a.setDimensions=function(){};a.getRootDocument=function(){return jsx3.IDE.getRootDocument();};a.destroy=function(){delete this.ENVIRONMENT[ub.d];this.jsxsuper();};a.getJSX=function(k){var
ia=k.indexOf(ub.e)==0;return ia?this.getJSXById(k):this.getJSXByName(k);};o.trashFinder=function(d){return d!=null&&d==jsx3.ide._TRASH;};a.getJSXByName=function(g){var
ia=jsx3.ide.getActiveServer();var
X=this.D3;if(ia!=null){X=jsx3.util.List.wrap([ia]);X.addAll(this.D3);}var
Mb=null;for(var
ka=X.iterator();ka.hasNext()&&Mb==null;){var
Db=((ka.next()).getDOM()).getAllByName(g);for(var
Za=0;Za<Db.length;Za++){var
yb=Db[Za];if(yb.findAncestor(o.trashFinder)==null){Mb=yb;break;}}}return Mb;};a.getJSXById=function(c){var
Ta=null;for(var
Ia=this.D3.iterator();Ia.hasNext()&&Ta==null;)Ta=((Ia.next()).getDOM()).getById(c);return Ta;};o._I={cancelrightclick:false,caption:ub.f,cancelerror:false,bodyhotkeys:false};a.getEnv=function(d){d=d.toLowerCase();if(o._I[d]!=null)return o._I[d];return this.jsxsuper(d);};a.T9=function(p){this.D3.add(p);};a.Vp=function(e){this.D3.remove(e);e.deactivateView();};a.getViews=function(){return this.D3;};a.loadInclude=function(d,e,r,l){if(r==ub.g||r==ub.h){var
fb=jsx3.net.URI.valueOf(d);var
gb=fb.getScheme();if(gb&&jsx3.net.Request.getSchemeHandler(gb)){var
xa=jsx3.net.Request.open(ub.i,fb,true);xa.subscribe(ub.j,function(){if(xa.getStatus()==200)if(r==ub.g){jsx3.eval(xa.getResponseText());}else jsx3.html.insertAdjacentHTML((document.getElementsByTagName(ub.k))[0],ub.l,ub.m+xa.getResponseText()+ub.n);});xa.send();return;}}return this.jsxsuper(d,e,r,l);};});jsx3.Class.defineClass("jsx3.ide.ViewCache",jsx3.app.Cache,null,function(a,q){var
ya=jsx3.app.Cache;var
Hb=ya.prototype;q.init=function(l,c){this.jsxsuper();this.F2=l;this.E0=c;};q.isMyDocument=function(e){var
qb=Hb.getDocument.call(this,e);var
N=this.E0.getDocument(e);return qb&&(!N||qb==N);};q.clearById=function(n){var
J=this.jsxsuper(n);if(J==this.E0.getDocument(n))this.E0.clearById(n);};q.clearByTimestamp=function(d){if(d instanceof Date)d=d.getTime();var
Ka=this.keys();for(var
I=0;I<Ka.length;I++){var
fb=Ka[I];var
wa=this.getTimestamp(fb);if(wa<d)this.clearById(fb);}};q.getDocument=function(k){return this.jsxsuper(k)||this.E0.getDocument(k);};q.setDocument=function(g,l){this.jsxsuper(g,l);this.E0.setDocument(g,l);};q.destroy=function(){this.jsxsuper();};});jsx3.Class.defineClass("jsx3.ide.ServerView",jsx3.app.Server,null,function(k,s){var
ub={a:"@",b:" ",c:":",d:"namespace",e:"onResizeParent",f:"*",g:"guiref",h:"JSX",i:"GUIREF",j:"COMPONENTURL"};s.init=function(n,a,h){this.mz=n;this.LA=a;this.bC=h;this.H7={};this.EY=h instanceof jsx3.xml.Document;this.DOM=new
jsx3.app.DOM();this.Cache=new
jsx3.ide.ViewCache(this,this.mz.getCache());this.getRootBlock();if(!this.EY)this.mz.T9(this);};s.getStats=function(){return this.H7;};s.toString=function(){return ub.a+this.getClass()+ub.b+this.bC+ub.c+this.getEnv(ub.d);};s.load=function(a){if(!this.EY){var
Ga=jsx3.html.getJSXParent(this.LA);Ga.subscribe(jsx3.gui.Interactive.AFTER_RESIZE_VIEW,this,ub.e);this.Ht=Ga.getId();}this.JSXROOT.tl({left:0,top:0,parentwidth:this.LA.clientWidth,parentheight:this.LA.clientHeight});this.LA.innerHTML=this.JSXROOT.paint();var
B=(new
Date()).getTime();if(this.EY){var
H=this.bC;this._load2(H,B);}else{var
H=new
jsx3.xml.Document();H.setAsync(true);H.subscribe(ub.f,(jsx3.$F(function(){this._load2(H,B);a();})).bind(this));H.load(this.resolveURI(this.bC));}};s._load2=function(r,b){var
Ib=this.JSXBODY.loadXML(r,false);this.H7.unmarshal=(new
Date()).getTime()-b;this.H7.objcount=(this.JSXBODY.findDescendants(function(a){return true;},false,true)).length;this.H7.size=(r.toString()).length;if(jsx3.$A.is(Ib)){for(var
Va=0;Va<Ib.length;Va++)Ib[Va].setPersistence(jsx3.app.Model.PERSISTEMBED);}else if(Ib)Ib.setPersistence(jsx3.app.Model.PERSISTEMBED);};s.paint=function(){var
N=(new
Date()).getTime();this._regHelpKey();var
C=this.JSXROOT.repaint();this.H7.paint=(new
Date()).getTime()-N;this.H7.html=C.length;};s.invokeHelp=function(j){return this.mz.invokeHelp(j);};s.onResizeParent=function(){var
D=this.getEnv(ub.g);(this.getRootBlock()).Ul({left:0,top:0,width:parseInt(D.clientWidth),height:parseInt(D.clientHeight)},true);};s.destroy=function(){this.mz.Vp(this);this.DOM.unsubscribeAllFromAll();for(var
N=0;N<this._jsxje.length;N++){var
hb=this._jsxje[N];hb.removeChildren();}this.DOM.destroy();this.Cache.unsubscribeAll(jsx3.app.Cache.CHANGE);this.Cache.destroy();if(!this.EY)(jsx3.GO(this.Ht)).unsubscribe(jsx3.gui.Interactive.AFTER_RESIZE_VIEW,this,ub.e);var
O=this.JSXROOT.getRendered();if(O){if(O.parentNode.id==ub.h)O=O.parentNode;O.parentNode.removeChild(O);}};s.getEnv=function(p){p=p.toUpperCase();if(p==ub.i)return this.LA;if(p==ub.j)return this.bC;return this.mz.getEnv(p);};s.getProperties=function(){return this.mz.getProperties();};s.getAppPath=function(){return this.mz.getAppPath();};s.getLocale=function(){return this.mz.getLocale();};s.setLocale=function(d){this.mz.setLocale(d);};s.reloadLocalizedResources=function(){this.mz.reloadLocalizedResources();};s.activateView=function(){jsx3.activateApp(this);};s.deactivateView=function(){jsx3.activateApp(this.mz);};});]]></data>
    </script>
    <script id="js">
      <prereq id="server"/>
    <data><![CDATA[jsx3.Class.defineClass("jsx3.ide.project.AppProject",jsx3.ide.Project,null,function(p,c){var
ub={a:"The project folder already exists. Please choose another project name.",b:"<b>",c:"</b> is an illegal project path. Please choose another project path.",d:"Project template folder should exist: ",e:".",f:/\//g,g:/[^A-Za-z0-9\.]/g,h:"",i:/@name@/g,j:/@namespace@/g,k:"addins",l:"jsxversion",m:"includes",n:"caption",o:"namespace",p:"Error loading project resource ",q:": ",r:"resources",s:"js/logic.js",t:"components/appCanvas.xml"};p.create=function(r){var
L=r.templateType;var
wb=r.projectPath;var
t=jsx3.ide.getProjectDirectory();var
ob=t.resolve(wb);if(ob.exists()){return {ok:false,message:ub.a};}else if(!ob.isDescendantOf(t))return {ok:false,message:ub.b+wb+ub.c};var
Wa=jsx3.ide.getSystemRelativeFile(L.getBasePath());if(!Wa.isDirectory()){(jsx3.util.Logger.getLogger((this.getClass()).getName())).error(ub.d+Wa);return {ok:false};}ob.mkdirs();var
u=jsx3.$A(),W=jsx3.$A();var
w=L.getFilePaths();if(w!=null){(jsx3.$A(w)).each(function(g){var
Sa=ob.resolve(w);u.push(g);W.push(Sa);});}else{var
fa=Wa.find(function(j){if((j.getName()).indexOf(ub.e)!=0)return j.isFile()?jsx3.io.File.FIND_INCLUDE:jsx3.io.File.FIND_RECURSE;},true);(jsx3.$A(fa)).each(function(d){var
Sa=ob.resolve((Wa.toURI()).relativize(d.toURI()));u.push(d);W.push(Sa);});}var
ga=(wb.replace(ub.f,ub.e)).replace(ub.g,ub.h);for(var
Ib=0;Ib<u.length;Ib++){var
Q=u[Ib];var
Sa=W[Ib];var
sa=Q.read();if(sa){sa=sa.replace(ub.i,wb);sa=sa.replace(ub.j,ga);}(Sa.getParentFile()).mkdirs();jsx3.ide.writeUserFile(Sa,sa);}var
Kb=((jsx3.ide.getCurrentUserHome()).toURI()).relativize(ob.toURI());return {ok:true,project:Kb};};c.getSettings=function(h){var
ia=this._server.getSettings();if(h){if(!this._settingsrw){var
Ab=this._server.getAppPath();var
va=(this._server.getDirectory()).resolve(jsx3.CONFIG_FILE);this._settingsrw=new
jsx3.ide.Preferences(va,ia);}return this._settingsrw;}else return ia;};c.initialize=jsx3.$Y(function(j){this._server=jsx3.ide.SERVER=new
jsx3.ide.Server((this.getDirectory()).toURI());j.done();});c.getServer=function(){return this._server;};c.resolveURI=function(d){return this._server.resolveURI(d);};c.getRequiredAddins=function(){var
la=(this.getSettings()).get(ub.k);return (jsx3.$A(la)).map(function(l){return new
jsx3.app.AddIn(l);});};c.getGIVersion=function(){return jsx3.ide.getProjectAuthorVersion();};c.isNeedsUpgrade=function(){return false;};c.upgrade=function(){var
ga=this.getSettings(true);var
R=ga.get(ub.l);if(R<3.2){var
La=ga.get(ub.m)||[];for(var
X=0;X<La.length;X++){var
pa=new
jsx3.net.URI(La[X].src);if(!pa.isAbsolute())La[X].src=((this._server.relativizeURI(jsx3.resolveURI(pa))).getPath()).substring(1);}ga.set(ub.m,La);}ga.set(ub.l,jsx3.ide.getProjectAuthorVersion());ga.save();this._server.ENVIRONMENT.jsxversion=jsx3.ide.getProjectAuthorVersion();};c.getTitle=function(){var
Lb=this._server;return Lb.getEnv(ub.n)||Lb.getEnv(ub.o)||this.getPathFromHome();};c.load=jsx3.$Y(function(f){(this._loadProjectResources()).when(f);});c._loadProjectResources=jsx3.$Y(function(d){var
ma=this._server;jsx3.CLASS_LOADER.ne(ma);var
za=ma.getSettings();var
Sa=za.get(ub.m);for(var
Ua=0;Sa&&Ua<Sa.length;Ua++)try{var
K=Sa[Ua];if(jsx3.CLASS_LOADER.passesLoad(K.onLoad||K.load))ma.loadInclude(ma.resolveURI(K.src),K.id,K.type);}catch(Kb){jsx3.ide.LOG.warn(ub.p+K.src+ub.q+jsx3.NativeError.wrap(Kb));}d.done();});c.getResources=function(){if(!this._rsrc)this._rsrc=(jsx3.$A((this.getSettings()).get(ub.m))).map(function(r){return new
jsx3.ide.ProjectRsrc(r.id,r.type,r.onLoad===true||r.load==1?1:0,r.src);});return this._rsrc;};c.setResources=function(q){var
t=this._rsrc;this._rsrc=jsx3.$A(q);var
ua=this._rsrc.map(function(b){return {id:b.getId(),type:b.getType(),load:b.getLoadType(),src:b.getPath()};});var
Q=this.getSettings(true);Q.set(ub.m,ua);Q.save();this.publish({subject:ub.r,value:this._rsrc,oldValue:t});};p._DEFAULT_PROJECT_FILES=[ub.s,ub.t];c.getDefaultOpenFiles=function(){var
R=[];for(var
Mb=0;Mb<p._DEFAULT_PROJECT_FILES.length;Mb++){var
kb=p._DEFAULT_PROJECT_FILES[Mb];var
Za=jsx3.ide.getSystemRelativeFile(this._server.resolveURI(kb));if(Za.isFile())R.push(Za);}return R;};});jsx3.Class.defineClass("jsx3.ide.project.Template",null,null,function(a,d){var
ub={a:".",b:"id",c:"label",d:"description",e:"path",f:"files",g:/\s*,\s*/g};d.init=function(n,j){this.u1=j;this.DI=n;};d.getId=function(){return this.DI.getId()+ub.a+this.u1.attr(ub.b);};d.getPlugIn=function(){return this.DI.getPlugIn();};d.getLabel=function(){return this.u1.attr(ub.c);};d.getDescription=function(){return this.u1.attr(ub.d);};d.getBasePath=function(){return ((this.getPlugIn()).resolveURI(this.u1.attr(ub.e))).toString();};d.getFilePaths=function(){var
Ga=this.u1.attr(ub.f);return Ga?Ga.split(ub.g):null;};});]]></data>
    </script>
    <xml id="wizard1" load="manual">
      <prereq id="js"/>
    <data>
        <serialization xmlns="urn:tibco.com/v3.0">
 <onAfterDeserialize><![CDATA[objJSX.getFirstResponder=function(){return templatelist;};objJSX.getTitle=function(){return "Choose a Project Template";};objJSX.onTryNext=function(){if(!templatelist.getValue())return {ok:false,alert:true,message:"You must select a project template before continuing."};};objJSX.onReveal=function(){var
ub={a:"project-template"};if(!this._types){this._types=((this.getPlugIn()).getExtPoint(ub.a)).processExts();this._types.each(function(b){templatelist.insertRecord({jsxid:b.getId(),label:b.getLabel()});});if(this._types.length==1){templatelist.setValue(this._types[0].getId());this._doSelect(this._types[0].getId());}}};objJSX.onConceal=function(g){g.templateType=this._getTypeById(templatelist.getValue());};objJSX._getTypeById=function(e){return this._types.find(function(o){return o.getId()==e;});};objJSX._doSelect=function(q){var
Ba=this._getTypeById(q);descr.setText(Ba?Ba.getDescription():"",true);};]]></onAfterDeserialize>
  <object type="jsx3.gui.LayoutGrid">
    <variants jsxleft="0" jsxoverflow="2" jsxrelativeposition="0" jsxtop="0"/>
    <strings jsxheight="100%" jsxname="pane" jsxrows="120,*" jsxwidth="100%"/>
    <object type="jsx3.gui.Block">
      <dynamics jsxborder="@Inset"/>
      <variants jsxoverflow="1"/>
      <strings jsxheight="100%" jsxwidth="100%"/>
      <object type="jsx3.gui.Matrix">
        <dynamics jsxbgcolor="@Solid Medium" jsxheaderborder="@Outset NoBottom"/>
        <variants jsxheaderheight="0" jsxreorder="0" jsxresize="0" jsxscalewidth="1" jsxselectionmodel="1"/>
        <strings jsxbodyborder="1px solid #d8d8e5" jsxfocusstyle=";" jsxname="templatelist"/>
        <events jsxchange="pane._doSelect(this.getValue());"/>
        <object type="jsx3.gui.Matrix.Column">
          <dynamics jsxbg="@Fade TopDown" jsxborder="@Outset" jsxcellbgcolor="@Matrix AllCol Light BG" jsxcellborder="@Matrix AllCol Light Border"/>
          <strings jsxcellpadding="3" jsxformathandler="@unescape" jsxname="abclist_col1" jsxpath="label" jsxvaluetemplate="@unescape" jsxwidth="*"/>
        </object>
      </object>
    </object>
    <object type="jsx3.gui.Block">
      <variants jsxoverflow="2"/>
      <strings jsxheight="100%" jsxname="descr" jsxpadding="6 0 6 0" jsxwidth="100%"/>
    </object>
  </object>
</serialization>
      </data>
    </xml>
    <xml id="wizard2" load="manual">
      <data>
        <serialization xmlns="urn:tibco.com/v3.0">
  <onAfterDeserialize><![CDATA[objJSX.getFirstResponder=function(){return projectPath;};objJSX.getTitle=function(){return "Choose a Project Path";};objJSX.onConceal=function(k){k.projectPath=projectPath.getValue();};objJSX.onTryNext=function(){if((jsx3.util.strTrim(projectPath.getValue())).length==0)return {ok:false,alert:true,message:"You must enter a project path before continuing."};};objJSX._doBrowse=function(){var
ub={a:"jsx3.io.browser",b:"newprojectdialog",c:"Create New Project",d:"Create"};var
Z=jsx3.ide.getProjectDirectory();(jsx3.ide.getPlugIn(ub.a)).saveFile((this.getServer()).getRootBlock(),{name:ub.b,modal:true,title:ub.c,okLabel:ub.d,folder:Z,baseFolder:Z,onChoose:(jsx3.$F(function(c){this._onBrowseChoose(c,Z);})).bind(this)});};objJSX._onBrowseChoose=function(s,o){var
C=o.relativePathTo(s);if(s.getName()&&C.match(/^[\w\-\.\/]+$/)){projectPath.setValue(C);}else this.beep();};objJSX._doCreate=function(){var
L=projectPath.getValue();if(!L){this.beep();}else jsx3.ide.doNewProject(this,L);};projectPath._doIncChange=function(f){if(jsx3.util.strEmpty(f))return true;if(f.match(/^[\w\-\.\/]+$/)){return true;}else{this.beep();return false;}};]]></onAfterDeserialize>
  <object type="jsx3.gui.Block">
    <variants/>
    <strings jsxheight="100%" jsxname="wpane" jsxwidth="100%"/>
    <object type="jsx3.gui.Block">
      <variants jsxoverflow="3"/>
      <strings jsxtext="Enter the name of the project you wish to create or click on the folder button to browse to a location for the new project. A directory will be created in JSXAPPS with the name of the new project. The new project will open in the current browser window." jsxwidth="100%"/>
    </object>
    <object type="jsx3.gui.Block">
      <variants jsxoverflow="1" jsxpadding="8"/>
      <strings jsxheight="40" jsxwidth="100%"/>
      <object type="jsx3.gui.LayoutGrid">
        <variants jsxleft="0" jsxoverflow="2" jsxrelativeposition="0" jsxtop="0"/>
        <strings jsxcols="*,32" jsxheight="100%" jsxwidth="100%"/>
        <object type="jsx3.gui.Block">
          <variants jsxoverflow="2"/>
          <strings jsxheight="100%" jsxwidth="100%"/>
          <object type="jsx3.gui.TextBox">
            <variants jsxheight="18"/>
            <strings jsxname="projectPath" jsxtip="The path may contain only the following characters: A-Z a-z 0-9 . / -" jsxwidth="100%"/>
            <events jsxincchange="this._doIncChange(strVALUE);"/>
          </object>
        </object>
        <object type="jsx3.gui.Block">
          <variants jsxoverflow="1"/>
          <strings jsxheight="100%" jsxtextalign="right" jsxwidth="100%"/>
          <object type="jsx3.gui.ToolbarButton">
            <variants/>
            <strings jsximage="jsxapp:/images/icon_60.gif"/>
            <events jsxexecute="wpane._doBrowse();"/>
          </object>
        </object>
      </object>
    </object>
  </object>
</serialization>
      </data>
    </xml>
  </resources>

  <event id="cacheChanged">
  </event>

  <extension-point id="project-template">
    <processor instance-class="jsx3.ide.project.Template" type="instantiator"/>
  </extension-point>

  <extension id="type" point="jsx3.ide.project.project-type">
    <type class="jsx3.ide.project.AppProject" description="A standard General Interface application." ext-class="jsx3.ide.project.Type" id="jsxapp" label="General Interface Application" panes="wizard1, wizard2">
    </type>
  </extension>

  <extension point="jsx3.ide.project.app.project-template">
    <template description="An project with an empty JavaScript logic file and an empty main component file." id="empty" label="Empty Project" path="template"/>
  </extension>

</plugin>
  <plugin id="jsx3.ide.settings.ide" name="IDE Settings Plug-In" version="0.1" xmlns="http://www.generalinterface.org/gi/amp" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.generalinterface.org/gi/amp http://www.generalinterface.org/xsd/plugin.xsd">

  <script><![CDATA[

var amp = jsx3.amp;

this.showPane = function(intPane) {
  this._openDialog(intPane);
};

this._openDialog = function(intPane) {
  var server = this.getServer();
  var dialog = server.getJSXByName('jsx_ide_settings');

  if (!dialog) {
    dialog = this.loadRsrcComponent("container", server.getRootBlock());

    var controller = new amp.util.Prefs();
    this.getExtPoint("pane").processExts().each(function(e) { controller.addPane(e); });

    dialog.getPrefs = function() { return controller; };
    dialog.openPrefs(intPane);
  } else {
    if (intPane != null)
      dialog.showPrefs(intPane);
  }

  dialog.focus();
};

  ]]></script>

  <requires>
    <plugin id="jsx3.amp.util.prefspanel"/>
    <plugin id="jsx3.gui.CheckBox"/>
    <plugin id="jsx3.gui.Button"/>
    <plugin id="jsx3.gui.TextBox"/>
    <plugin id="jsx3.gui.Select"/>
    <plugin id="jsx3.gui.Matrix"/>
  </requires>

  <resources>
    <xml id="container" path="container.xml"/>
    <xml id="pane_builder" load="manual" path="builder.xml"/>
    <xml id="pane_home" load="manual" path="home.xml"/>
    <xml id="pane_hotkeys" load="manual" path="hotkeys.xml"/>
  </resources>

  <event id="saved">
    <param id="pane"/>
  </event>

  <extension-point id="pane">
    <processor instance-class="jsx3.amp.util.PrefsPane" type="instantiator"/>
  </extension-point>

  <extension id="default" point="jsx3.ide.settings.ide.pane">
    <pane img="images/builder.gif" label="IDE Settings" resource="pane_builder" tip="Settings related to General Interface Builder."/>
    <pane img="images/hotkeys.gif" label="IDE Hot Keys" resource="pane_hotkeys" tip="Customize hot key shortcuts of General Interface Builder."/>
    <pane img="images/paths.gif" label="Paths" resource="pane_home" tip="Set the user home directory and the local HTTP server root."/>
  </extension>

  <extension id="menu.tools" point="jsx3.ide.ui.action">
    <action execute="this.getPlugIn()._openDialog()" hotkey="{hk.settings}" id="jsx3.ide.settings" label="IDE Settings..." menupath="/jsx3.ide.tools/settings"/>
  </extension>

</plugin>
  <plugin id="jsx3.ide.settings.project" name="Project Settings Plug-In" version="0.1" xmlns="http://www.generalinterface.org/gi/amp" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.generalinterface.org/gi/amp http://www.generalinterface.org/xsd/plugin.xsd">

  <script><![CDATA[

var amp = jsx3.amp;

this.showPane = function(intPane) {
  this._openDialog(intPane);
};

this._openDialog = function(intPane) {
  var server = this.getServer();
  var dialog = server.getJSXByName('jsx_deployment');
  var projectType = jsx3.ide.PROJECT.getProjectType().getId();

  if (!dialog) {
    dialog = this.loadRsrcComponent("container", server.getRootBlock());

    var controller = new amp.util.Prefs();
    this.getExtPoint("pane").processExts(function(objExt, obj) {
      var a = obj.attr("project-types");
      if (a && jsx3.$A(a.split(/\s*,\s*/g)).indexOf(projectType) >= 0)
        controller.addPane(new amp.util.PrefsPane(objExt, obj));
    });

    dialog.getPrefs = function() { return controller; };
    dialog.openPrefs(intPane);
  } else {
    if (intPane != null)
      dialog.showPrefs(intPane);
  }

  dialog.focus();
};

  ]]></script>

  <requires>
    <plugin id="jsx3.amp.util.prefspanel"/>
    <plugin id="jsx3.gui.CheckBox"/>
    <plugin id="jsx3.gui.RadioButton"/>
    <plugin id="jsx3.gui.Button"/>
    <plugin id="jsx3.gui.TextBox"/>
    <plugin id="jsx3.gui.Select"/>
    <plugin id="jsx3.gui.Matrix"/>
    <plugin id="jsx3.gui.ImageButton"/>
  </requires>

  <resources>
    <xml id="container" path="container.xml"/>
    <xml id="pane_deployment" load="manual" path="deployment.xml"/>
    <xml id="pane_addins" load="manual" path="addins.xml"/>
    <xml id="pane_classpath" load="manual" path="classpath.xml"/>
    <xml id="pane_legacy" load="manual" path="legacy.xml"/>
  </resources>

  <event id="saved">
    <param id="pane"/>
  </event>

  <extension-point id="pane">
    <processor instance-class="jsx3.amp.util.PrefsPane" type="instantiator"/>
  </extension-point>

  <extension id="default" point="jsx3.ide.settings.project.pane">
    <pane img="images/deployment.gif" label="Deployment" project-types="jsxapp" resource="pane_deployment" tip="Project settings related to deployment."/>
    <pane img="images/addins.gif" label="Add-Ins" project-types="jsxapp" resource="pane_addins" tip="Configure what add-ins are activated for this project."/>
    <pane img="images/classpath.gif" label="Classpath" project-types="jsxapp" resource="pane_classpath" tip="Configure the classpaths of dynamically loaded JavaScript classes."/>
    <pane img="images/legacy.gif" label="Legacy Settings" project-types="jsxapp" resource="pane_legacy" tip="Legacy project settings related to deployment."/>
  </extension>

  <extension id="menu.project" point="jsx3.ide.ui.action">
    <action enabled="project" execute="this.getPlugIn()._openDialog();" hotkey="{hk.projSettings}" id="jsx3.ide.deploy" img="jsxapp:/images/icon_101.gif" label="Project Settings..." menupath="/jsx3.ide.project/settings" tip="Allows edit of application title, namespace, live/static modes, etc."/>
  </extension>
  
</plugin>
  <plugin class="jsx3.ide.ui.EditorManager" id="jsx3.ide.editor" name="Editor Plug-In" property="EDITOR_MGR" version="0.1" xmlns="http://www.generalinterface.org/gi/amp" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.generalinterface.org/gi/amp http://www.generalinterface.org/xsd/plugin.xsd">

  <script><![CDATA[
    this.loaded().when(jsx3.$F(function() {
      this.loadRsrcComponent("menus", this.getServer().getRootBlock());
    }).bind(this));
  ]]></script>

  <requires>
    <plugin id="jsx3.gui.Tab"/>
    <plugin id="jsx3.gui.Dialog"/>
    <plugin id="jsx3.gui.Menu"/>
  </requires>

  <resources>
    <script id="EditorManager" load="early">
      <data><![CDATA[jsx3.Class.defineClass("jsx3.ide.ui.EditorManager",jsx3.amp.PlugIn,null,function(n,m){var
ub={A:"closed",B:"//record",C:"reload",D:"1",E:"jsxid",F:/^.*\./,G:"_jsxtext",H:"jsxtext",a:"container",b:"id",c:"type",d:"container_tab",e:"selection",f:"reverted",g:"saved",h:"renamed",i:"mode",j:"modeChanged",k:"dirty",l:"red",m:"",n:"opened",o:"selectionChanged",p:"jsx_ide_quadrant_qmain",q:"tabbedpane",r:"activeChanged",s:"setTabReadWrite",t:"jsx3.IDE.getJSXById('')",u:'<span style="width:12px;height:11px;padding:1px 0px 0px 4px;position:relative;overflow:hidden;" alt="double-click to unlock" ondblclick="jsx3.ide.',v:"(",w:');">',x:'<img src="',y:"jsxapp:/images/icon_91.gif",z:'" width="8" height="10"/></span>'};var
Ha=jsx3.ide.ui;m.init=function(){jsx3.amp.PlugIn.prototype.init.apply(this,arguments);this._defaultType=null;this._editors=jsx3.$A();this._dialogEditors=jsx3.$A();};m.onLoaded=function(){var
ua=((this.getExtPoint(ub.a)).getExts())[0];if(ua)this._container=(this.getServer()).getJSXByName((ua.getData())[0].attr(ub.b));this.Gs=(this.getExtPoint(ub.c)).processExts();this._defaultType=this.Gs.find(function(h){return h.isDefault();});};m.getEditors=function(){return this._editors;};m.getActiveEditor=function(){if(this._tabcontainer){var
ya=this._tabcontainer;var
Ka=ya.getChild(ya.getSelectedIndex());if(Ka)return Ka.getEditor();}return null;};m.focusOrOpen=function(l,i){var
v=this.getOpenEditor(l);if(v)this.reveal(v);else this.openEditor(l,i);};m.getOpenEditor=function(o){var
Fb=function(a){return o.equals(a.getOpenFile());};return this._editors.find(Fb)||this._dialogEditors.find(Fb);};m.newEditor=function(g){this.openEditor(null,g);};m.openEditor=jsx3.$Y(function(s){var
qa=(s.args())[0],ya=(s.args())[1];var
Gb=this.getTypeForFileType(ya);((Gb.DI.getPlugIn()).load()).when((jsx3.$F(function(){var
B,Bb;if(Gb.isDialog()){if(!Gb.isMultiInstance()){var
x=this._dialogEditors.find(function(f){return (f.getClass()).getName()==Gb.getEditorClass();});if(x){x.open(null,qa,ya);(x.getContent()).focus();s.done(x);return;}}B=(this.getServer()).getRootBlock();Bb=this._dialogEditors;}else{var
t=this._getTabPane();B=this.loadRsrcComponent(ub.d,t,false);Bb=this._editors;}var
Ua=(jsx3.Class.forName(Gb.getEditorClass())).newInstance();Ua._editortype=Gb;Bb.push(Ua);Ua.subscribe(ub.e,this,this._onSelectionChanged);Ua.subscribe(ub.f,this,function(){this.publish({subject:ub.f,editor:Ua});});Ua.subscribe(ub.g,this,function(){this.publish({subject:ub.g,editor:Ua});});Ua.subscribe(ub.h,this,function(){this.publish({subject:ub.h,editor:Ua});});Ua.subscribe(ub.i,this,function(){this.publish({subject:ub.j,editor:Ua});});Ua.open(B,qa,ya);if(!Gb.isDialog()){B.getManager=(jsx3.$F(function(){return this;})).bind(this);B.getEditor=(jsx3.$F(function(){return this;})).bind(Ua);Ua.subscribe(ub.h,this,function(r){B.setText(this._getTabTitleHTML(Ua),true);});Ua.subscribe(ub.k,this,function(p){B.setColor(p.v?ub.l:ub.m,true);});B.setText(this._getTabTitleHTML(Ua));t.paintChild(B);B.doShow();}this.publish({subject:ub.n,editor:Ua});s.done(Ua);})).bind(this));});m.onShowEditor=function(a){a.activate();};m.onHideEditor=function(o){o.deactivate();};m._onSelectionChanged=function(o){this.publish({subject:ub.o,editor:o.target,active:o.target==jsx3.ide.getActiveEditor()});};m._getTabPane=function(){if(!this._tabcontainer){var
qa=(this.getServer()).getJSXByName(ub.p);this._tabcontainer=this.loadRsrcComponent(ub.q,qa);}return this._tabcontainer;};m._onTabChanged=function(j){var
t=j.getChild(j.getSelectedIndex());var
za=t?t.getEditor():null;if(this._activeEditor!=za){this.publish({subject:ub.r,editor:za,previous:this._activeEditor});this._activeEditor=za;}};m._getContentForEditor=function(h){return (h.getContent()).getParent();};m._getEditorForContent=function(s){};m._getTabTitleHTML=function(o){var
x=ub.m;if(o.isReadOnly()){var
pa=ub.s;var
wa=ub.t;x=ub.u+pa+ub.v+wa+ub.w+ub.x+this.resolveURI(ub.y)+ub.z;}return o.getTitle()+x;};m.close=function(b){b.onBeforeClose();if(b._editortype.isDialog()){(b.getContent()).doClose();this._dialogEditors.remove(b);}else{var
T=this._getContentForEditor(b);if(T)(T.getParent()).removeChild(T);this._editors.remove(b);}this.publish({subject:ub.A,editor:b});};m.isOpen=function(p){return this._editors.indexOf(p)>=0;};m.reveal=function(j){var
sb=j.getContent();if(jsx3.gui.Dialog&&sb instanceof jsx3.gui.Dialog){sb.focus();}else (sb.getParent()).doShow();};m.getTypeForFileType=function(p){var
B=this.Gs.find(function(B){return B.handlesType(p);});return B||this._defaultType;};m.onComponentTabMenu=function(d,k){if(k==null)return false;for(var
Ba=(d.getXML()).selectNodeIterator(ub.B);Ba.hasNext();){var
Za=Ba.next();if(Za.getAttribute(ub.C)==ub.D)d.enableItem(Za.getAttribute(ub.E),k.supportsReload());var
pa=k?Za.getAttribute(((k.getClass()).getName()).replace(ub.F,ub.m)):null;if(pa){if(Za.getAttribute(ub.G)==null)Za.setAttribute(ub.G,Za.getAttribute(ub.H));Za.setAttribute(ub.H,pa);}else{var
sa=Za.getAttribute(ub.G);if(sa!=null){Za.setAttribute(ub.H,sa);Za.removeAttribute(ub.G);}}}};});jsx3.Class.defineClass("jsx3.ide.ui.EditorType",null,null,function(i,e){var
ub={a:"filetype",b:"id",c:"class",d:"true",e:"default",f:"dialog",g:"multi"};e.init=function(a,d){this.u1=d;this.DI=a;this.Gs={};(d.children()).each((jsx3.$F(function(l){if(l.nname()==ub.a)this.Gs[l.attr(ub.b)]=true;})).bind(this));};e.getEditorClass=function(){return this.u1.attr(ub.c);};e.handlesType=function(f){return this.Gs[f];};e.isDefault=function(){return ub.d==this.u1.attr(ub.e);};e.isDialog=function(){return ub.d==this.u1.attr(ub.f);};e.isMultiInstance=function(){return ub.d==this.u1.attr(ub.g);};e.toString=function(){return this.getEditorClass();};});]]></data>
    </script>
    <script id="js" load="early">
      <data><![CDATA[jsx3.Class.defineClass("jsx3.ide.Editor",null,[jsx3.util.EventDispatcher],function(j,f){var
ub={a:"objContainer",b:"renamed",c:"reverted",d:"dirty",e:"/",f:"[unsaved]",g:"btn",h:"mode_",i:"mode",j:"selection"};f.init=function(){this.DY=jsx3.$A();};f.open=function(d,r,o){this._file=r;this._type=o;if(!this._content){this._content=this.render(d);this._content.getEditor=(jsx3.$F(function(){return this;})).bind(this);}this.loadFromFile();};f.loadFromFile=jsx3.Method.newAbstract();f.render=jsx3.Method.newAbstract(ub.a);f.save=jsx3.Method.newAbstract();f.getContent=function(){return this._content;};f.getOpenFile=function(){return this._file;};f.getFileType=function(){return this._type;};f.activate=function(){};f.deactivate=function(){};f.preSaveCheck=jsx3.$Y(function(c){c.done(false);});f.saveAs=function(b){var
ma=this._file;this._file=b;if(this.save()){this.publish({subject:ub.b,v:b,p:ma});return true;}else{this._file=ma;return false;}};f.revert=function(){this.loadFromFile();this.setDirty(false);this.publish({subject:ub.c});};f.getMode=function(){return this.Cm;};f.isDirty=function(){return this.vJ;};f.setDirty=function(e){if(this.vJ!=e){this.vJ=e;this.publish({subject:ub.d,v:e,p:!e});}};f.isReadOnly=function(){var
ta=this.getOpenFile();return ta&&ta.isReadOnly()&&!this.isUnsaved();};f.setReadOnly=function(r){var
vb=this.getOpenFile();if(vb!=null){vb.setReadOnly(r);this.bl();}};f.isUnsaved=function(){return this.getOpenFile()==null;};f.supportsReload=function(){return false;};f.getTitle=function(){var
K=this.getOpenFile();if(K){var
pb=(K.toURI()).toString();return pb.substring(pb.lastIndexOf(ub.e)+1);}else return ub.f;};f.getServer=function(){return null;};f.getPlugIn=function(){return null;};f.setMode=function(h){if(this.Cm==h)return;if(this.onBeforeSetMode(h)===false)return false;var
Qa=this.Cm;this.Cm=h;var
A=this.getContent();if(A.getModePane){var
z=A.getModePane();if(z){var
y=A.getDescendantOfName(ub.g+h);if(y)y.setState(jsx3.gui.ToolbarButton.STATEON,true);var
Ja=z.getChild(ub.h+h);if(!Ja){var
Ua=this.getPlugIn();var
H=Ua.getResource(ub.h+h);(H.load()).when((jsx3.$F(function(){Ja=Ua.loadRsrcComponent(H,z);this.onSetMode(Ja,Qa);this.publish({subject:ub.i,value:h,oldValue:Qa});})).bind(this));}else{this.publish({subject:ub.i,value:h,oldValue:Qa});this.onSetMode(Ja,Qa);}return true;}}return false;};f.onBeforeSetMode=function(n){};f.onBeforeClose=function(){};f.onSetMode=function(m,r){};f.getSelection=function(){return this.DY;};f.setSelection=function(m){if(this.DY!=m){var
ga=this.DY;this.DY=jsx3.$A(m);this.publish({subject:ub.j,value:m,oldValue:ga});}};f.canSearch=function(){var
da=this.getContent();return da.getVisibleCodeEditor&&da.getVisibleCodeEditor()!=null;};f.doIncrSearch=function(r,i,c,h){var
qb=this.getContent();var
Wa=qb.getVisibleCodeEditor();if(Wa)return Wa.doIncrSearch(r,i,c,h);};});]]></data>
    </script>
    <xml id="container_tab">
      <data>
        <serialization xmlns="urn:tibco.com/v3.0">
  <object type="jsx3.gui.Tab">
    <dynamics jsxbgcolor="@Solid Medium"/>
    <variants jsxindex="0"/>
    <strings jsxmenu="jsxmenu_component" jsxtext="unknown"/>
    <properties onmouseover="if(jsx3.EventHelp.isDragging())(jsx3.html.getJSXParent(this)).doShow();"/>
    <events jsxhide="(this.getManager()).onHideEditor(this.getEditor());" jsxshow="(this.getManager()).onShowEditor(this.getEditor());"/>
  </object>
</serialization>
      </data>
    </xml>

    <xml id="menus">
      <data>
        <object xmlns="urn:tibco.com/v3.0" type="jsx3.gui.Menu">
          <variants jsxxmlasync="1"/>
          <strings jsxdisplay="none" jsxname="jsxmenu_component" jsxxmlurl="menu-tab.xml"/>
          <events jsxmenu="this.getPlugIn().onComponentTabMenu(this, jsx3.ide.getEditorForTab(this.getContextParent()));"/>
        </object>
      </data>
    </xml>

    <xml id="tabbedpane">
      <data>
        <object xmlns="urn:tibco.com/v3.0" type="jsx3.gui.TabbedPane">
          <dynamics jsxbgcolor="@Solid Shadow"/>
          <variants jsxrelativeposition="0" jsxtabheight="18"/>
          <strings jsxname="jsx_tpan_component"/>
          <events jsxchange="this.setBackgroundColor(this.getServer().getDynamicProperty(this.getChildren().length &gt; 0 ? '@Solid Disabled' : '@Solid Shadow'),true);                              this.getPlugIn()._onTabChanged(this);"/>
        </object>
      </data>
    </xml>
  </resources>
  
  <event id="activeChanged">
    <param id="editor"/>
    <param id="previous"/>
  </event>

  <event id="selectionChanged">
    <param id="editor"/>
    <param id="active" type="boolean"/>
  </event>

  <event id="opened">
    <param id="editor"/>
  </event>

  <event id="closed">
    <param id="editor"/>
  </event>

  <event id="reverted">
    <param id="editor"/>
  </event>

  <event id="saved">
    <param id="editor"/>
  </event>

  <event id="renamed">
    <param id="editor"/>
  </event>

  <event id="modeChanged">
    <param id="editor"/>
  </event>

  <extension-point id="container">
  </extension-point>

  <extension-point id="type">
    <processor instance-class="jsx3.ide.ui.EditorType" type="instantiator"/>
  </extension-point>
  
</plugin>
  <plugin id="jsx3.ide.editor.component" name="Component Editor Plug-In" property="ComponentEditorPlugin" version="0.1" xmlns="http://www.generalinterface.org/gi/amp" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.generalinterface.org/gi/amp http://www.generalinterface.org/xsd/plugin.xsd">

  <method id="getDomPalette"><![CDATA[
    return this.getEngine().getPlugIn("jsx3.ide.ui").getPalette(this, "dom.palette");
  ]]></method>

  <method id="getAttrPalette"><![CDATA[
    return this.getEngine().getPlugIn("jsx3.ide.ui").getPalette(this, "attr.palette");
  ]]></method>

  <method id="_getPalettes"><![CDATA[
    return jsx3.$A([this.getDomPalette(), this.getAttrPalette()]);
  ]]></method>

  <requires>
    <plugin id="jsx3.ide.editor"/>
    <plugin id="jsx3.gui.Matrix"/>
    <plugin id="jsx3.gui.Tree"/>
    <plugin id="jsx3.gui.ImageButton"/>
    <plugin id="jsx3.gui.TextBox"/>
    <plugin id="jsx3.gui.Select"/>
    <plugin id="jsx3.gui.TabbedPane"/>
  </requires>

  <resources>
    <script id="js">
      <data><![CDATA[jsx3.Class.defineClass("jsx3.ide.ComponentEditor",jsx3.ide.Editor,null,function(p,s){var
ub={A:"source",B:"profile",C:"0",D:"Alert",E:"Changes made to the XML source caused the following XML parsing error: <br/><br/><b>",F:"</b><br/><br/> Please fix the error or revert to the last saved version before continuing.",G:"div",H:"none",I:"body",J:'<span style="white-space:nowrap;">Component File Size / Time to Load / DOM Node Count / Time to Paint / HTML Size</span>',K:'{0} KB <span style="color:#666666;">/</span> {2} s <span style="color:#666666;">/</span> {1,number,integer} <span style="color:#666666;">/</span> {3} s <span style="color:#666666;">/</span> {4} KB',L:"0.0",M:"compeditorstats",N:"JSX_GENERIC",O:"jsxdom",P:"The drop could not be processed, because the receiving element is a referenced component and is uneditable within the current context.",Q:"Saving multiple root objects is not supported. Would you like to create a root block and add the current root object and this object as its children?",R:"Ignore",S:"ide_component_libs_tree",T:"The component was not added to the stage because the object that it was dropped on, ",U:", rejected it.",V:"prefs",W:"builder",X:"domdeletewarn",Y:"Confirm Recycle",Z:"Recycle object(s): <b>",_:", ",a:"component",aa:"</b>?",b:"editor",ba:"Recycle",c:"templates/untitled.jsx",ca:"recycled",d:"jsxtab_componenteditor_main",da:"url",e:"root",f:"100%",g:"Component Modified",h:"General Interface Builder does not support multiple root objects. The root objects of this component file have been moved under a single root block. Save the component file to accept these changes.",i:"domChanged",j:"cacheChanged",k:"icon",l:"name",m:"description",n:"onafter",o:"onbefore",p:"unicode",q:"One or more objects in the component file <b>",r:"</b> that are referenced asynchronously cannot be referenced asynchronously. Select Continue to reference these objects synchronously and save the component file.",s:"Continue",t:"Cancel",u:"mode_source",v:"mode_profile",w:"Saved component with ",x:" root objects. Only the first object was saved.",y:"can't save file to blank url",z:"saved"};var
Eb=jsx3.app.Model;s.Cm=ub.a;s.render=function(d){var
Na=((this.getPlugIn()).getResource(ub.b)).getData();return d.loadXML(Na,false,this.getPlugIn());};s.loadFromFile=function(){jsx3.sleep(this.gJ,null,this);};s.getPlugIn=function(){return jsx3.IDE.ComponentEditorPlugin;};s._getComponentPath=function(){var
Sa=this.getOpenFile();if(!Sa||!Sa.isFile())Sa=jsx3.ide.getBuilderRelativeFile(ub.c);return (jsx3.ide.PROJECT.getDirectory()).relativePathTo(Sa);};s.gJ=function(){var
xb=((this.getContent()).getDescendantOfName(ub.d)).getRendered();var
_a=this._getComponentPath();var
G=new
jsx3.ide.ServerView(jsx3.ide.SERVER,xb,_a);this.mz=G;G.activateView();var
Va=(jsx3.$F(this._loadServer2)).bind(this,[G]);jsx3.sleep(function(){G.load(Va);});};s._loadServer2=function(d){var
ob=(d.getBodyBlock()).getChildren();if(ob.length>1){ob=ob.concat();var
bb=new
jsx3.gui.Block(ub.e,null,null,ub.f,ub.f);bb.setRelativePosition(jsx3.gui.Block.RELATIVE);(d.getBodyBlock()).setChild(bb);bb.setPersistence(Eb.PERSISTEMBED);for(var
_a=0;_a<ob.length;_a++){var
Sa=ob[_a];if(Sa.getPersistence()==Eb.PERSISTNONE)Sa.setPersistence(Eb.PERSISTEMBED);bb.adoptChild(Sa);}this.setDirty(true);jsx3.IDE.alert(ub.g,ub.h);}(d.getDOM()).subscribe(jsx3.app.DOM.EVENT_CHANGE,(jsx3.$F(function(){(this.getPlugIn()).publish({subject:ub.i,editor:this});})).bind(this));(d.getCache()).subscribe(jsx3.app.Cache.CHANGE,(jsx3.$F(function(){(this.getPlugIn()).publish({subject:ub.j,editor:this});})).bind(this));try{d.paint();}finally{(this.getPlugIn()).publish({subject:ub.i,editor:this});this.hY();this.updateComponentStats(d.getStats());var
Ma=(d.getRootObjects())[0];if(Ma)this.setSelection([Ma]);}var
Y=this.getActiveView();if(Y&&Y.onShowMe)Y.onShowMe();};s.activate=function(){var
ka=this.getServer();if(!ka)return;ka.activateView();this.onShowComponentMode();};s.deactivate=function(){if(this.mz)this.mz.deactivateView();};s.Jr=function(e){var
V={};V.icon=e.getMetaValue(ub.k);V.name=e.getMetaValue(ub.l);V.description=e.getMetaValue(ub.m);V.onafter=e.getMetaValue(ub.n);V.onbefore=e.getMetaValue(ub.o);V.unicode=e.getMetaValue(ub.p);return V;};s.preSaveCheck=jsx3.$Y(function(m){if(this.hP((this.getServer()).getBodyBlock())){jsx3.IDE.confirm(null,ub.q+this.getTitle()+ub.r,function(a){a.doClose();m.done(true);},function(c){c.doClose();m.done(false);},ub.s,ub.t,1,null,null,{width:300,height:150});}else m.done(false);});s.hP=function(c){var
Pa=c.getChildren();for(var
jb=0;jb<Pa.length;jb++){var
ja=Pa[jb];if(ja.getPersistence()==Eb.PERSISTREFASYNC&&jb<Pa.length-1)return true;if(this.hP(ja))return true;}return false;};s.save=function(){var
Pa=false;var
X=false;var
T=this.getActiveView();if(T&&T.getName()==ub.u){X=true;if(T.isDirty())if(!this._2())return false;}var
x=this.getOpenFile();if(x){var
Xa=(this.getServer()).getBodyBlock();var
w=Xa.getChild(0);var
Sa={};var
Y=(this.getContent()).getDescendantOfName(ub.v,false,false);if(Y!=null&&Y._inited){Sa=Y.getProfileProperties();}else if(w!=null)Sa=this.Jr(w);var
P=null;if(w!=null){P=w.toXMLDoc(Sa);}else{Sa.children=true;P=Xa.toXMLDoc(Sa);}P=jsx3.ide.makeXmlPretty(P,true);if(jsx3.ide.writeUserXmlFile(x,P)){this.setDirty(false);Pa=true;if((Xa.getChildren()).length>1)((this.getPlugIn()).getLog()).warn(ub.w+(Xa.getChildren()).length+ub.x);}if(Pa&&X)T.onShowMe();}else ((this.getPlugIn()).getLog()).error(ub.y);if(Pa)this.publish({subject:ub.z});return Pa;};s.revert=function(){(this.getServer()).destroy();this.mz=null;this.jsxsuper();};s.hY=function(){var
Ca=this.mz;var
ga=jsx3.ide.getActiveEditor();if(this==ga){this.activate();}else{var
B=ga.getServer();if(B instanceof p)B.activateView();else Ca.deactivateView();}};s.getServer=function(){return this.mz;};s.onBeforeSetMode=function(m){var
ib=this.getMode();if(ib==ub.A){var
ha=((this.getContent()).getModePane()).getChild(ub.u);if(ha.isDirty())if(!this._2())return false;}else if(ib==ub.B){var
Fb=((this.getServer()).getBodyBlock()).getChild(0);if(Fb){var
ha=((this.getContent()).getModePane()).getChild(ub.v);var
S=ha.getProfileProperties();for(var z in S)Fb.setMetaValue(z,S[z]);}}};s.onSetMode=function(r,k){r.doShow();};s._2=function(){var
Nb=this.getActiveView();var
fa=new
jsx3.xml.Document();fa.loadXML(Nb.getTextValue());var
Jb=false;var
Wa=fa.getError();if(Wa.code==ub.C){Wa=null;var
u=this.getServer();var
Oa=u.getBodyBlock();var
I=Oa.getChildren();var
cb=I.length;try{this.setSelection([]);var
gb=Oa.loadXML(fa,false);if(jsx3.$A.is(gb)){for(var
L=0;L<gb.length;L++)gb[L].setPersistence(Eb.PERSISTEMBED);}else gb.setPersistence(Eb.PERSISTEMBED);for(var
L=cb-1;L>=0;L--)Oa.removeChild(I[L]);var
_=(this.getContent()).getModePane();var
Sa=_.getChild(ub.v);if(Sa!=null)Sa._inited=false;Jb=true;}catch(Kb){Wa=Kb;var
eb;if((eb=(Oa.getChildren()).length)>cb)for(var
L=eb-1;L>=cb;L--)Oa.removeChild(Oa.getChild(L));}Oa.repaint();}if(!Jb)jsx3.IDE.alert(ub.D,ub.E+Wa.description+ub.F,null,null,{width:400,height:225});return Jb;};s.getActiveView=function(){var
jb=(this.getContent()).getModePane();return jb?jb.getChild(jb.getSelectedIndex()):null;};s.supportsReload=function(){return true;};s.onShowComponentMode=function(){var
lb=this.getServer();var
gb=(lb.getRootBlock()).getRendered();if(gb&&(gb.offsetWidth==0||gb.offsetHeight==0))lb.onResizeParent();};s.refreshStats=function(){var
Bb=document.createElement(ub.G);Bb.style.display=ub.H;(document.getElementsByTagName(ub.I))[0].appendChild(Bb);var
u=(this.getServer()).getBodyBlock();var
X=u.getChild(0);var
Ga={};if(X){Ga=this.Jr(X);}else Ga.children=true;var
ha=(X||u).toXMLDoc(Ga);ha=jsx3.ide.makeXmlPretty(ha,true);var
ea=new
jsx3.ide.ServerView(jsx3.ide.SERVER,Bb,ha);ea.load();ea.paint();this.updateComponentStats(ea.getStats());Bb.parentNode.removeChild(Bb);ea.destroy();};p.COMPONENT_EDITOR_STATS_SPY=ub.J;p._CES_MF=new
jsx3.util.MessageFormat(ub.K);p._CES_NF1=new
jsx3.util.NumberFormat(ub.L);p._CES_NF2=new
jsx3.util.NumberFormat(ub.C);s.updateComponentStats=function(r){var
Db=(this.getContent()).getDescendantOfName(ub.M);var
Q=r.size/1024;Q=(Q<9.5?p._CES_NF1:p._CES_NF2).format(Q);var
db=r.objcount;var
N=r.unmarshal/1000;N=(N<9.5&&N>0.05?p._CES_NF1:p._CES_NF2).format(N);var
Bb=r.paint/1000;Bb=(Bb<9.5&&Bb>0.05?p._CES_NF1:p._CES_NF2).format(Bb);var
Pa=r.html/1024;Pa=(Pa<9.5?p._CES_NF1:p._CES_NF2).format(Pa);Db.setText(p._CES_MF.format(Q,db,N,Bb,Pa),true);};s.onTPDrop=function(d,e){if(jsx3.EventHelp.DRAGTYPE==ub.N){var
Ma=jsx3.ide.getActiveEditor();if(Ma!=null&&jsx3.ide.ComponentEditor&&Ma instanceof jsx3.ide.ComponentEditor){var
ua=(Ma.getServer()).getBodyBlock();var
ra=jsx3.html.getJSXParent(d.srcElement());if(ra&&ra.findAncestor(function(c){return c==ua;},true)!=null){var
Va=jsx3.EventHelp.JSXID.getId();var
sb=ra.getId();var
Ea=jsx3.EventHelp.getDragIds();this.onDomDrop(Va,sb,Ea,jsx3.IDE.getJSXByName(ub.O),e,false,true);}}}return false;};s.onDomDrop=function(o,c,n,f,h,m,r,d){var
X=false;var
Mb=jsx3.GO(o);if(Mb==null||!Mb.instanceOf(jsx3.xml.CDF))return;var
z=jsx3.GO(c);if(z==null)z=(jsx3.ide.getActiveServer()).getBodyBlock();if(c==o){}else if(z.getPersistence()==jsx3.app.Model.PERSISTREF||z.getPersistence()==jsx3.app.Model.PERSISTREFASYNC){jsx3.ide.LOG.error(ub.P);}else{var
Aa=z==(z.getServer()).getBodyBlock();if(!d&&Aa&&(z.getChildren()).length>0){jsx3.IDE.confirm(null,ub.Q,(jsx3.$F(function(k){k.doClose();var
O=z.getServer();this._createNewRootBlock(O);this.onDomDrop(o,((O.getBodyBlock()).getChild(0)).getId(),n,f,h,m,r);})).bind(this),null,null,null,1,(jsx3.$F(function(i){i.doClose();this.onDomDrop(o,c,n,f,h,m,r,true);})).bind(this),ub.R);return false;}if(Mb==f){for(var
K=0;K<n.length;K++){var
La=n[K];if(c==La)continue;var
lb=jsx3.GO(La);if(this._isDescendant(z,lb))continue;if(lb.getServer()!=z.getServer()){var
Ha=jsx3.ide.getEditorForJSX(lb);if(lb.getPersistence()!=jsx3.app.Model.PERSISTNONE)Ha.setDirty(true);}if(Aa&&lb.getPersistence()!=jsx3.app.Model.PERSISTEMBED)lb.setPersistence(jsx3.app.Model.PERSISTEMBED);var
na=m?(z.getParent()).insertBefore(lb,z,true):z.adoptChild(lb,true);if(na!==false){if(r)this._moveNewComponentToProperPlace(lb);X=true;}}}else if(Mb.getName()==ub.S){var
Ab=Mb.getRecord(n[0]);var
Ma=Ab.path;var
Cb=jsx3.net.URIResolver.getResolver(Ma);var
qa=jsx3.app.Model.PERSISTEMBED;if(h&&!Aa){qa=jsx3.app.Model.PERSISTREF;}else if(Cb)Ma=jsx3.ide.SERVER.relativizeURI(jsx3.net.URIResolver.DEFAULT.resolveURI(Ma),true);var
lb=null,Ib=z;if(m){Ib=z.getParent();lb=Ib.load(Ma,false);if(lb)Ib.insertBefore(lb,z,true);}else lb=z.load(Ma);if(!lb){jsx3.ide.LOG.error(ub.T+Ib+ub.U);return false;}(jsx3.$A(lb)).each(function(l){l.setPersistence(qa);});if(lb!==false){if(r)this._moveNewComponentToProperPlace(lb);X=true;jsx3.ide.maybeSelectNewDom([lb],f);}}jsx3.EventHelp.reset();if(X)(jsx3.ide.getActiveEditor()).setDirty(true);}return false;};s._createNewRootBlock=function(g){var
Ka=g.getBodyBlock();var
Kb=(Ka.getChildren()).concat();var
eb=new
jsx3.gui.Block(ub.e,null,null,ub.f,ub.f);eb.setRelativePosition(jsx3.gui.Block.RELATIVE);Ka.setChild(eb);eb.setPersistence(jsx3.app.Model.PERSISTEMBED);for(var
sb=0;sb<Kb.length;sb++){var
fa=Kb[sb];if(fa.getPersistence()==jsx3.app.Model.PERSISTNONE)fa.setPersistence(jsx3.app.Model.PERSISTEMBED);eb.adoptChild(fa);}Ka.paintChild(eb);};s._moveNewComponentToProperPlace=function(h){if(h instanceof jsx3.gui.Dialog){var
Nb=h.findAncestor(function(q){return (q.getClass()).equals(jsx3.gui.Block.jsxclass);});if(h.getParent()!=Nb){Nb.adoptChild(h);var
ta=(h.getServer()).getBodyBlock();if(Nb==ta)h.setPersistence(jsx3.app.Model.PERSISTNONE);}}};s._isDescendant=function(m,q){var
V=function(h){return h==q;};return m.findAncestor(V,false)!=null;};s.doDomClick=function(c){var
Ua=jsx3.html.getJSXParent(c.srcElement());if(jsx3.gui.isMouseEventModKey(c)&&Ua)this.setSelection([Ua]);};s.doRecycle=function(j,d){var
ma=jsx3.ide.getForIdOrSelected(j);if(ma.length==0)return;var
hb=jsx3.ide.getIDESettings();if(hb.get(ub.V,ub.W,ub.X)&&!d){var
Ga=new
Array(ma.length);for(var
na=0;na<ma.length;na++)Ga[na]=ma[na].getName();jsx3.IDE.confirm(ub.Y,ub.Z+Ga.join(ub._)+ub.aa,(jsx3.$F(function(m){m.doClose();this.doRecycle(j,true);})).bind(this),null,ub.ba,ub.t);return;}var
w=jsx3.ide.getRecycleBin();if(ma.length==1){var
fb=ma[0].getParent();var
Ab=ma[0].getChildIndex();this.setSelection([fb.getChild(Ab-1)||fb.getChild(Ab+1)||fb]);}else this.setSelection([]);var
sa=jsx3.ide.getEditorForJSX(ma[0]);var
D={};for(var
na=0;na<ma.length;na++){var
fb=ma[na].getParent();ma[na]._jsxformerparentid=fb.getId();if(!D[fb.getId()])D[fb.getId()]=[fb];D[fb.getId()].push(ma[na]);}for(var ha in D){var
Lb=D[ha];w.adoptChildrenFrom(Lb[0],Lb.slice(1),false,true);}if(!this.isDirty())if((jsx3.$A(ma)).find(function(g){return g.getPersistence()!=jsx3.app.Model.PERSISTNONE;}))this.setDirty(true);(this.getPlugIn()).publish({subject:ub.ca,editor:sa,o:ma});};s.cloneJSX=function(b){var
ra=jsx3.ide.getForIdOrSelected(b);var
fb=new
Array(ra.length);var
La=[];var
sb={};for(var
Va=0;Va<ra.length;Va++){var
nb=ra[Va].getPersistence();var
C=ra[Va].doClone(nb,2);if(ra[Va].getMetaValue(ub.da)!=null)C.setMetaValue(ub.da,ra[Va].getMetaValue(ub.da));if(nb!=jsx3.app.Model.PERSISTNONE)(jsx3.ide.getActiveEditor()).setDirty(true);var
Y=ra[Va].getParent();Y.insertBefore(C,Y.getChild(ra[Va].getChildIndex()+1),false);C.setPersistence(nb);if(!sb[Y.getId()]){La.push(Y);sb[Y.getId()]=1;}fb[Va]=C;}for(var
Va=0;Va<La.length;Va++)La[Va].repaint();jsx3.ide.maybeSelectNewDom(fb);return fb;};s.onShowComponentProfile=function(d){if(!d._inited){var
ba=jsx3.ide.getActiveEditor();if(ba){var
_=((ba.getServer()).getRootObjects())[0];if(_){d.fillFromJSX(_);d._inited=true;}}}};});]]></data>
    </script>
    <xml id="editor">
      <data>
        <serialization xmlns="urn:tibco.com/v3.0">
  <onAfterDeserialize><![CDATA[objJSX.getVisibleCodeEditor=function(){if((swap_pane.getChild(swap_pane.getSelectedIndex())).getName()=="mode_source")return this.getDescendantOfName("jsxcodeeditor");};objJSX.getModePane=function(){return swap_pane;};jsxtab_componenteditor_main.doDeleteDom=function(){(objJSX.getEditor()).doRecycle();};jsxtab_componenteditor_main.registerHotKey("doDeleteDom",jsx3.gui.Event.KEY_DELETE,false,true,false);jsxtab_componenteditor_main.registerHotKey("doDeleteDom",8,false,true,false);]]></onAfterDeserialize>
        <object type="jsx3.gui.Block">
          <dynamics jsxbgcolor="@Solid Medium"/>
          <variants jsxoverflow="2"/>
          <strings jsxhelpid="ide.editor.component" jsxname="content" jsxpadding="8 0 0 0"/>
            <object type="jsx3.gui.LayoutGrid">
              <variants jsxrelativeposition="0"/>
              <strings jsxname="jsxtab_component_layout" jsxrows="*,22"/>
                <object type="jsx3.gui.TabbedPane">
                  <variants jsxshowtabs="0"/>
                  <strings jsxname="swap_pane"/>
                  <events jsxctrldrop="(content.getEditor()).onTPDrop(objEVENT,true);" jsxdrop="(content.getEditor()).onTPDrop(objEVENT);"/>
                    <object type="jsx3.gui.Tab">
                      <variants jsxindex="0"/>
                      <strings jsxname="mode_component"/>
                      <events jsxshow="(content.getEditor()).onShowComponentMode();"/>
                        <object type="jsx3.gui.Block">
                          <dynamics jsxbgcolor="@Solid Disabled" jsxborder="@Inset Top"/>
                          <variants jsxoverflow="2"/>
                          <strings jsxname="jsxtab_componenteditor_main" jsxtext="&lt;div style=&quot;font-weight:bold;font-size:18px;text-align:center;padding-top:30px;&quot;&gt;Loading...&lt;/div&gt;"/>
                          <events jsxclick="(content.getEditor()).doDomClick(objEVENT);"/>
                        </object>
                    </object>
                </object>
              <object type="jsx3.gui.LayoutGrid">
                <variants jsxrelativeposition="0"/>
                <strings jsxbgcolor="#d8d8e5" jsxborder="solid 1px #9898a5;solid 0px;solid 0px;solid 0px" jsxcols="15,*,130" jsxname="jsxtab_component_layout"/>
                <object type="jsx3.gui.Block">
                  <variants jsxoverflow="2"/>
                  <strings jsxpadding="3 0 0 4"/>
                  <object type="jsx3.gui.ImageButton">
                    <variants jsxheight="12" jsxindex="0" jsxwidth="11"/>
                    <strings jsximage="jsxapp:/images/icon_15s.gif" jsxoverimage="jsxapp:/images/icon_15so.gif"/>
                    <events jsxexecute="(content.getEditor()).refreshStats();"/>
                  </object>
                </object>
                <object type="jsx3.gui.Block">
                  <variants jsxoverflow="2" jsxspy="1"/>
                  <strings jsxname="compeditorstats" jsxpadding="4 3 0 3" jsxtext=""/>
                  <events jsxspy="jsx3.ide.ComponentEditor.COMPONENT_EDITOR_STATS_SPY;"/>
                </object>
                <object type="jsx3.gui.Block">
                  <variants jsxoverflow="2"/>
                  <strings jsxname="mychild1" jsxtextalign="right"/>
                    <object type="jsx3.gui.Block">
                      <variants jsxoverflow="2"/>
                      <strings jsxbgcolor="#eeeeff" jsxborder="solid 0px;solid 0px;solid 0px;solid 1px #9898a5" jsxmargin="0 0 0 -1" jsxname="jsx_ide_componenteditor_btns"/>
                        <object type="jsx3.gui.ToolbarButton">
                          <dynamics jsxtip="_edit_view_live"/>
                          <variants jsxstate="1" jsxtype="2"/>
                          <strings jsxgroupname="editmode" jsximage="jsxapp:/images/icon_46.gif" jsxmargin="-1 -1 0 0" jsxname="btnViewComp" jsxtext=""/>
                          <events jsxexecute="(content.getEditor()).setMode(&quot;component&quot;);"/>
                        </object>
                        <object type="jsx3.gui.ToolbarButton">
                          <dynamics jsxtip="_edit_view_expert"/>
                          <variants jsxstate="0" jsxtype="2"/>
                          <strings jsxgroupname="editmode" jsximage="jsxapp:/images/icon_21.gif" jsxmargin="-1 -1 0 0" jsxname="btnViewSource" jsxtext=""/>
                          <events jsxexecute="(content.getEditor()).setMode(&quot;source&quot;);"/>
                        </object>
                        <object type="jsx3.gui.ToolbarButton">
                          <dynamics jsxtip="_edit_view_formatted"/>
                          <variants jsxstate="0" jsxtype="2"/>
                          <strings jsxgroupname="editmode" jsximage="jsxapp:/images/icon_20.gif" jsxmargin="-1 -1 0 0" jsxname="btnViewSourceFmt" jsxtext=""/>
                          <events jsxexecute="(content.getEditor()).setMode(&quot;sourcefmt&quot;);"/>
                        </object>
                        <object type="jsx3.gui.ToolbarButton">
                          <dynamics jsxtip="_edit_view_html"/>
                          <variants jsxstate="0" jsxtype="2"/>
                          <strings jsxgroupname="editmode" jsximage="jsxapp:/images/icon_25.gif" jsxmargin="-1 -1 0 0" jsxname="btnViewHTML" jsxtext=""/>
                          <events jsxexecute="(content.getEditor()).setMode(&quot;html&quot;);"/>
                        </object>
                        <object type="jsx3.gui.ToolbarButton">
                          <dynamics jsxtip="_edit_view_profile"/>
                          <variants jsxstate="0" jsxtype="2"/>
                          <strings jsxgroupname="editmode" jsximage="jsxapp:/images/icon_76.gif" jsxmargin="-1 -1 0 0" jsxname="btnViewProfile" jsxtext=""/>
                          <events jsxexecute="(content.getEditor()).setMode(&quot;profile&quot;);"/>
                        </object>
                    </object>
                </object>
              </object>
            </object>
        </object>
</serialization>
      </data>
    </xml>
    <xml id="mode_html" load="manual">
      <data>
        <serialization xmlns="urn:tibco.com/v3.0">
  <onAfterDeserialize><![CDATA[objJSX.onShowMe=function(){var
P=jsx3.ide.getActiveEditor();var
t=(P.getServer()).getBodyBlock();content.setText(t?this.makePretty(t.paint()):"",true);};objJSX.makePretty=function(b){b=b.replace(/&/g,"&amp;");var
W=new
jsx3.xml.Document();W.loadXML(b);if(!W.hasError()){var
Lb=contentx;Lb.setSourceXML(W);return Lb.doTransform();}else{var
wa=W.getError();((this.getPlugIn()).getLog()).warn("Error parsing XHTML. "+wa.description);return jsx3.util.strEscapeHTML(b);}};]]></onAfterDeserialize>
    <object type="jsx3.gui.Tab">
      <variants jsxindex="0"/>
      <strings jsxhelpid="ide.editor.component.html" jsxname="mode_html"/>
      <events jsxshow="this.onShowMe();"/>
        <object type="jsx3.gui.Block">
          <variants jsxoverflow="2" jsxrelativeposition="0"/>
          <strings jsxbgcolor="#ffffff" jsxborder="inset 1px;0px;0px;0px" jsxheight="100%" jsxname="bordertop" jsxwidth="100%"/>
            <object type="jsx3.gui.Block">
              <variants jsxfontsize="11" jsxoverflow="1" jsxrelativeposition="0"/>
              <strings jsxheight="100%" jsxname="content" jsxpadding="4" jsxwidth="100%"/>
            </object>
            <object type="jsx3.gui.BlockX">
              <variants jsxfontsize="11" jsxoverflow="2" jsxrelativeposition="0"/>
              <strings jsxdisplay="none" jsxheight="100%" jsxname="contentx" jsxwidth="100%" jsxxslid="jsx:///xsl/xml.xsl" jsxxslurl="jsx:///xsl/xml.xsl"/>
            </object>
        </object>
    </object>
</serialization>
      </data>
    </xml>
    <xml id="mode_profile" load="manual">
      <data>
        <serialization xmlns="urn:tibco.com/v3.0">
  <onAfterDeserialize><![CDATA[objJSX.fillFromJSX=function(o){formIcon.setValue(o.getMetaValue("icon"));formName.setValue(o.getMetaValue("name"));formDescription.setValue(o.getMetaValue("description"));formBeforeDeserialize.setValue(o.getMetaValue("onbefore"));formAfterDeserialize.setValue(o.getMetaValue("onafter"));};objJSX.clear=function(){formIcon.setValue("");formName.setValue("");formDescription.setValue("");formBeforeDeserialize.setValue("");formAfterDeserialize.setValue("");};objJSX.onOpen=function(){var
ub={a:"jsx3.io.browser",b:"cpfd"};var
ya=null;var
z=formIcon.getValue();if(z){var
xb=jsx3.ide.getSystemRelativeFile(jsx3.ide.PROJECT.resolveURI(z));if(xb.exists())ya=xb.getParentFile();}(jsx3.ide.getPlugIn(ub.a)).chooseFile((this.getServer()).getRootBlock(),{name:ub.b,modal:true,folder:ya||jsx3.ide.getActiveProjectDirectory(),onChoose:(jsx3.$F(function(b){formIcon.setValue((jsx3.ide.PROJECT.getDirectory()).relativePathTo(b));this.setDirty();})).bind(this)});};objJSX.getEditor=function(){var
xb=this.getAncestorOfType(jsx3.gui.Tab);return jsx3.ide.getEditorForTab(xb);};objJSX.setDirty=function(){(this.getEditor()).setDirty(true);};objJSX.getProfileProperties=function(){if(!this._inited)return {};var
Aa={};Aa.name=formName.getValue();Aa.icon=formIcon.getValue();Aa.description=formDescription.getValue();Aa.onbefore=formBeforeDeserialize.getValue();Aa.onafter=formAfterDeserialize.getValue();return Aa;};objJSX.spyOnBefore=function(){return "<span class='jsx3ide_eventspy'><div class='name'>onBeforeDeserialize</div><div class='desc'>JavaScript code to execute after the XML of this serialization file has been loaded and parsed and immediately before the contents of this file are loaded into the live application DOM. This script has access to the following context variables:</div><div class='var'><b>objPARENT</b>&#160;{<span class='type'>jsx3.app.Model</span>}: The parent DOM node loading this component file.</div><div class='var'><b>objXML</b>&#160;{<span class='type'>jsx3.xml.Entity</span>}: The parsed contents of this component file.</div></span>";};objJSX.spyOnAfter=function(){return "<span class='jsx3ide_eventspy'><div class='name'>onAfterDeserialize</div><div class='desc'>JavaScript code to execute immediately after the contents of this serialization file have been loaded into the live application DOM. This script has access to the following context variables:</div><div class='var'><b>objJSX</b>&#160;{<span class='type'>jsx3.app.Model</span>}: The root DOM node of this component file.</div></span>";};]]></onAfterDeserialize>
  <object type="jsx3.gui.Tab">
    <variants jsxheight="20"/>
    <strings jsxbgcolor="#e8e8f5" jsxhelpid="ide.editor.component.profile" jsxname="mode_profile"/>
    <events jsxshow="(this.getEditor()).onShowComponentProfile(this);"/>
    <object type="jsx3.gui.Block">
      <strings jsxheight="100%" jsxpadding="10" jsxwidth="100%"/>
      <object type="jsx3.gui.LayoutGrid">
        <dynamics jsxbgcolor="@Solid Medium"/>
        <variants jsxleft="0" jsxoverflow="2" jsxrelativeposition="0" jsxtop="0"/>
        <strings jsxdisplay="" jsxheight="100%" jsxname="mylayout" jsxrows="25,125,*,*" jsxwidth="100%"/>
        <object type="jsx3.gui.Block">
          <dynamics jsxtext="_edit_profile_title"/>
          <variants jsxfontsize="14" jsxoverflow="1"/>
          <strings jsxfontweight="bold" jsxheight="100%" jsxtextalign="left" jsxwidth="100%"/>
        </object>
        <object type="jsx3.gui.Block">
          <variants jsxoverflow="2"/>
          <strings jsxheight="100%" jsxpadding="0 0 4 0" jsxwidth="100%"/>
          <object type="jsx3.gui.LayoutGrid">
            <variants jsxleft="0" jsxoverflow="2" jsxrelativeposition="0" jsxtop="0"/>
            <strings jsxheight="100%" jsxname="mylayout" jsxrows="24,*" jsxwidth="100%"/>
            <object type="jsx3.gui.LayoutGrid">
              <variants jsxleft="0" jsxoverflow="2" jsxrelativeposition="1" jsxtop="0"/>
              <strings jsxcols="80,*,80,*,30" jsxheight="100%" jsxwidth="100%"/>
              <object type="jsx3.gui.Block">
                <variants jsxoverflow="2"/>
                <strings jsxheight="100%" jsxwidth="100%"/>
                <object type="jsx3.gui.Block">
                  <dynamics jsxtext="_gen_name" jsxtip="_edit_profile_tip1"/>
                  <variants jsxrelativeposition="1"/>
                  <strings jsxpadding="5 8 0 0" jsxtextalign="right" jsxwidth="100%"/>
                </object>
              </object>
              <object type="jsx3.gui.Block">
                <variants jsxoverflow="2"/>
                <strings jsxheight="100%" jsxpadding="2 0 0 0" jsxwidth="100%"/>
                <object type="jsx3.gui.TextBox">
                  <strings jsxheight="18" jsxname="formName" jsxwidth="100%"/>
                  <events jsxincchange="(this.getAncestorOfType(jsx3.gui.Tab)).setDirty();"/>
                </object>
              </object>
              <object type="jsx3.gui.Block">
                <variants jsxoverflow="1"/>
                <strings jsxheight="100%" jsxwidth="100%"/>
                <object type="jsx3.gui.Block">
                  <dynamics jsxtext="_edit_profile_txt1" jsxtip="_edit_profile_tip2"/>
                  <variants jsxrelativeposition="1"/>
                  <strings jsxpadding="5 8 0 0" jsxtextalign="right" jsxwidth="100%"/>
                </object>
              </object>
              <object type="jsx3.gui.Block">
                <variants jsxoverflow="2"/>
                <strings jsxheight="100%" jsxpadding="2 0 0 0" jsxwidth="100%"/>
                <object type="jsx3.gui.TextBox">
                  <strings jsxheight="18" jsxname="formIcon" jsxwidth="100%"/>
                  <events jsxincchange="(this.getAncestorOfType(jsx3.gui.Tab)).setDirty();"/>
                </object>
              </object>
              <object type="jsx3.gui.Block">
                <variants jsxoverflow="2"/>
                <strings jsxpadding="2 6 0 0"/>
                <object type="jsx3.gui.ImageButton">
                  <dynamics jsxtip="_gen_browse"/>
                  <variants jsxheight="16" jsxindex="0" jsxwidth="16"/>
                  <strings jsximage="jsxapp:/images/icon_60.gif" jsxmargin="0 0 0 8" jsxname="btnOpenIcon"/>
                  <events jsxexecute="(this.getAncestorOfType(jsx3.gui.Tab)).onOpen();"/>
                </object>
              </object>
            </object>
            <object type="jsx3.gui.LayoutGrid">
              <variants jsxleft="0" jsxoverflow="2" jsxrelativeposition="1" jsxtop="0"/>
              <strings jsxcols="80,*" jsxheight="100%" jsxname="mylayout" jsxwidth="100%"/>
              <object type="jsx3.gui.Block">
                <dynamics jsxtext="_gen_desc" jsxtip="_edit_profile_tip3"/>
                <variants jsxoverflow="2"/>
                <strings jsxheight="100%" jsxpadding="4 8 0 0" jsxtextalign="right" jsxwidth="100%"/>
              </object>
              <object type="jsx3.gui.Block">
                <variants jsxoverflow="2"/>
                <strings jsxheight="100%" jsxname="mychild2" jsxwidth="100%"/>
                <object type="jsx3.gui.TextBox">
                  <dynamics jsxborder="@Inset"/>
                  <variants jsxtype="1"/>
                  <strings jsxheight="100%" jsxname="formDescription" jsxvalue="" jsxwidth="100%"/>
                  <events jsxincchange="(this.getAncestorOfType(jsx3.gui.Tab)).setDirty();"/>
                </object>
              </object>
            </object>
          </object>
        </object>
        <object type="jsx3.gui.Block">
          <variants jsxoverflow="2" jsxspy="1"/>
          <strings jsxheight="100%" jsxpadding="4 0 4 0" jsxwidth="100%"/>
          <events jsxspy="(this.getAncestorOfType(jsx3.gui.Tab)).spyOnBefore();"/>
          <object type="jsx3.gui.LayoutGrid">
            <variants jsxleft="0" jsxoverflow="2" jsxrelativeposition="1" jsxtop="0"/>
            <strings jsxheight="100%" jsxname="mylayout" jsxrows="15,*" jsxwidth="100%"/>
            <object type="jsx3.gui.Block">
              <variants jsxoverflow="2"/>
              <strings jsxheight="100%" jsxtext="onBeforeDeserialize" jsxwidth="100%"/>
            </object>
            <object type="jsx3.gui.Block">
              <variants jsxoverflow="2"/>
              <strings jsxheight="100%" jsxname="mychild2" jsxwidth="100%"/>
              <object type="jsx3.gui.TextBox">
                <dynamics jsxbg="@Grid Lines" jsxborder="@Inset"/>
                <variants jsxtype="1"/>
                <strings jsxheight="100%" jsxname="formBeforeDeserialize" jsxvalue="" jsxwidth="100%"/>
                <events jsxincchange="(this.getAncestorOfType(jsx3.gui.Tab)).setDirty();" jsxkeydown="jsx3.ide.doTextEditorKeyDown(objEVENT,this);"/>
              </object>
            </object>
          </object>
        </object>
        <object type="jsx3.gui.Block">
          <variants jsxoverflow="2" jsxspy="1"/>
          <strings jsxheight="100%" jsxpadding="4 0 0 0" jsxwidth="100%"/>
          <events jsxspy="(this.getAncestorOfType(jsx3.gui.Tab)).spyOnAfter();"/>
          <object type="jsx3.gui.LayoutGrid">
            <variants jsxleft="0" jsxoverflow="2" jsxrelativeposition="1" jsxtop="0"/>
            <strings jsxheight="100%" jsxname="mylayout" jsxrows="15,*" jsxwidth="100%"/>
            <object type="jsx3.gui.Block">
              <dynamics jsxtip="_edit_profile_tip5"/>
              <variants jsxoverflow="2"/>
              <strings jsxheight="100%" jsxtext="onAfterDeserialize" jsxwidth="100%"/>
            </object>
            <object type="jsx3.gui.Block">
              <variants jsxoverflow="2"/>
              <strings jsxheight="100%" jsxname="mychild2" jsxwidth="100%"/>
              <object type="jsx3.gui.TextBox">
                <dynamics jsxbg="@Grid Lines" jsxborder="@Inset"/>
                <variants jsxtype="1"/>
                <strings jsxheight="100%" jsxname="formAfterDeserialize" jsxvalue="" jsxwidth="100%"/>
                <events jsxincchange="(this.getAncestorOfType(jsx3.gui.Tab)).setDirty();" jsxkeydown="jsx3.ide.doTextEditorKeyDown(objEVENT,this);"/>
              </object>
            </object>
          </object>
        </object>
      </object>
    </object>
  </object>
</serialization>
      </data>
    </xml>
    <xml id="mode_sourcefmt" load="manual">
      <data>
        <serialization xmlns="urn:tibco.com/v3.0">
  <onAfterDeserialize><![CDATA[objJSX.onShowMe=function(){var
xa=jsx3.ide.getActiveEditor();var
U=xa.getContent();var
la=((xa.getServer()).getRootObjects())[0];var
Lb=this.readFromJSX(la);var
vb=(xa.getServer()).getBodyBlock();if(vb.getChild(0)==null)Lb.children=true;component_asxml_content.setText(vb!=null?(this.makePretty((vb.getChild(0)||vb).toXMLDoc(Lb))).toString():"",true);};objJSX.readFromJSX=function(e){var
Cb={};if(e){Cb.icon=e.getMetaValue("icon");Cb.name=e.getMetaValue("name");Cb.description=e.getMetaValue("description");Cb.onafter=e.getMetaValue("onafter");Cb.onbefore=e.getMetaValue("onbefore");Cb.unicode=e.getMetaValue("unicode");}return Cb;};objJSX.makePretty=function(b){if(!b.hasError()){var
gb=contentx;gb.setSourceXML(b);return gb.doTransform();}else{var
H=b.getError();((this.getPlugIn()).getLog()).debug("xml error: "+H);return "<pre>"+jsx3.util.strEscapeHTML(b.getError())+"</pre>";}};]]></onAfterDeserialize>
    <object type="jsx3.gui.Tab">
      <variants jsxindex="0"/>
      <strings jsxhelpid="ide.editor.component.xmlro" jsxname="mode_sourcefmt"/>
      <events jsxshow="this.onShowMe();"/>
        <object type="jsx3.gui.Block">
          <variants jsxoverflow="2" jsxrelativeposition="0"/>
          <strings jsxbgcolor="#ffffff" jsxborder="inset 1px;0px;0px;0px" jsxheight="100%" jsxname="bordertop" jsxwidth="100%"/>
            <object type="jsx3.gui.Block">
              <variants jsxfontsize="11" jsxoverflow="1" jsxrelativeposition="0"/>
              <strings jsxheight="100%" jsxname="component_asxml_content" jsxpadding="4" jsxwidth="100%"/>
            </object>
            <object type="jsx3.gui.BlockX">
              <variants jsxfontsize="11" jsxoverflow="2" jsxrelativeposition="0"/>
              <strings jsxdisplay="none" jsxheight="100%" jsxname="contentx" jsxwidth="100%" jsxxslid="jsx:///xsl/xml.xsl" jsxxslurl="jsx:///xsl/xml.xsl"/>
            </object>
        </object>
    </object>
</serialization>
      </data>
    </xml>
    <xml id="mode_source" load="manual">
      <data>
        <serialization xmlns="urn:tibco.com/v3.0">
  <onAfterDeserialize><![CDATA[var
Fb=objJSX;objJSX.onShowMe=function(){var
ub={a:"",b:"jsxcodeeditor",c:"xml"};var
E=jsx3.ide.getActiveEditor();var
ea=E.getContent();var
wa=((E.getServer()).getRootObjects())[0];var
ja=this.readFromJSX(wa);var
Gb=(E.getServer()).getBodyBlock();if(Gb){window.setTimeout((jsx3.$F(function(){if(Gb.getChild(0)==null)ja.children=true;this.setTextValue(Gb!=null?(jsx3.ide.makeXmlPretty((Gb.getChild(0)||Gb).toXMLDoc(ja))).toString():ub.a);(this.getDescendantOfName(ub.b)).initAsType(ub.c);})).bind(this),100);}else this.setTextValue(ub.a,true);this._jsxdirty=false;};objJSX.readFromJSX=function(b){var
Fa={};if(b){Fa.icon=b.getMetaValue("icon");Fa.name=b.getMetaValue("name");Fa.description=b.getMetaValue("description");Fa.onafter=b.getMetaValue("onafter");Fa.onbefore=b.getMetaValue("onbefore");Fa.unicode=b.getMetaValue("unicode");}return Fa;};objJSX.getEditor=function(){var
ea=this.getAncestorOfType(jsx3.gui.Tab);return jsx3.ide.getEditorForTab(ea);};(objJSX.getDescendantOfName("jsxcodeeditor")).subscribe("keyDown",(jsx3.$F(function(j){var
ia=Fb.getEditor();if(!this.isDirty()){var
Db=this.getTextValue();jsx3.sleep(function(){if(Db!=this.getTextValue()){this.setDirty(true);ia.setDirty(true);}},null,this);}})).bind(objJSX));objJSX.getTextValue=function(){return (this.getDescendantOfName("jsxcodeeditor")).getTextValue();};objJSX.setTextValue=function(m){(this.getDescendantOfName("jsxcodeeditor")).setTextValue(m);};objJSX.isDirty=function(){return this._jsxdirty;};objJSX.setDirty=function(n){this._jsxdirty=n;};]]></onAfterDeserialize>
    <object type="jsx3.gui.Tab">
      <variants jsxindex="0"/>
      <strings jsxhelpid="ide.editor.component.xmlrw" jsxname="mode_source"/>
      <events jsxshow="this.onShowMe();"/>
        <include async="false" src="jsxplugin://jsx3.ide.editor/code_editor.xml"/>
    </object>
</serialization>
      </data>
    </xml>

    <script eval="true" id="palette_dom_js" load="manual">
      <data><![CDATA[(jsx3.$O(this)).extend({domCopyNameToCB:function(c){var
Ia=(jsx3.ide.PROJECT.getServer()).getJSXById(c);jsx3.html.copy(Ia!=null?Ia.getName():"");},domCopyGetterToCB:function(j){var
va=(jsx3.ide.PROJECT.getServer()).getJSXById(j);var
ea=(jsx3.ide.PROJECT.getServer()).getEnv("namespace");jsx3.html.copy(va!=null?ea+'.getJSXByName("'+va.getName()+'")':"");},doDomToggle:function(k,p){var
mb=jsx3.GO(k);if(mb)if(p){mb._jsxideopen=true;}else delete mb._jsxideopen;},domSpyGlass:function(d,m){var
Eb=jsx3.GO(m);if(!(Eb&&Eb.jsxannotation))return null;return '<span style="width:200px;">'+Eb.jsxannotation+"</span>";},doDomExecute:function(l){var
Z=jsx3.GO(l);if(Z!=null){var
Nb=Z.getMetaValue("url");if(Nb){var
Oa=Z.getPersistence();if(Oa==jsx3.app.Model.PERSISTREF||Oa==jsx3.app.Model.PERSISTREFASYNC)jsx3.ide.doOpenUrlForEdit(jsx3.ide.PROJECT.resolveURI(Nb));}}},doPersist:function(o,s){var
oa=jsx3.ide.getForIdOrSelected(o);for(var
Ya=0;Ya<oa.length;Ya++){var
u=oa[Ya].getPersistence();oa[Ya].setPersistence(s);}if(oa.length>0){this.onDomChange();(jsx3.ide.getActiveEditor()).setDirty(true);}},importDomBranch:function(f,i){var
ub={a:"jsx3.io.browser",b:"jsxdialog",c:"apppathabs"};var
ib=jsx3.ide.getForIdOrSelected(f,true);if(ib.length!=1)return;var
ia=ib[0];var
Va=jsx3.ide.getCurrentUserHome();(jsx3.ide.getPlugIn(ub.a)).chooseFile(jsx3.IDE.getRootBlock(),{name:ub.b,modal:false,folder:jsx3.ide.getCurrentDirectory(),baseFolder:Va,onChoose:function(n){jsx3.ide.setCurrentDirectory(n.getParentFile());var
Ga=((jsx3.ide.PROJECT.getServer()).getEnv(ub.c)).relativize(n.toURI());var
J=i==jsx3.app.Model.PERSISTREFASYNC||i==jsx3.app.Model.PERSISTREF;var
_a=ia.load(Ga,true,jsx3.ide.PROJECT.getServer());(jsx3.$A(_a)).each(function(r){r.setPersistence(J?i:jsx3.app.Model.PERSISTEMBED);});if(_a){jsx3.ide.maybeSelectNewDom([_a]);(jsx3.ide.getActiveEditor()).setDirty(true);}}});},recycleDOM:function(o){(jsx3.ide.getActiveEditor()).doRecycle(o);},cloneDOM:function(q){(jsx3.ide.getActiveEditor()).cloneJSX(q);},exportDomBranch:function(e,p){var
ub={a:"MODEL",b:"jsx3.io.browser",c:"jsxdialog",d:"jsxerr_exportxml_writefail"};var
vb=p==ub.a?e.toXMLDoc():e.paint();var
Fa=jsx3.ide.getSystemDirFile();(jsx3.ide.getPlugIn(ub.b)).saveFile(jsx3.IDE.getRootBlock(),{name:ub.c,modal:false,folder:p==ub.a?jsx3.ide.getCurrentDirectory():Fa,baseFolder:Fa,onChoose:(jsx3.$F(function(k){var
Ha=false;if(p==ub.a){var
Da=jsx3.ide.makeXmlPretty(vb,true);if(!jsx3.ide.writeUserXmlFile(k,Da)){jsx3.IDE.alert(null,jsx3.IDE.getDynamicProperty(ub.d));return;}}else Ha=this.exportDomBranchHtml(k,vb);if(Ha)jsx3.ide.setCurrentDirectory(k.getParentFile());})).bind(this)});},exportDomBranchHtml:function(d,e){if((jsx3.ide.getSystemDirFile()).equals(d.getParentFile())){var
N='<html xmlns:v="urn:schemas-microsoft-com:vml"><head><link type="text/css" rel="stylesheet" href="JSX/css/JSX.css"/></head><body>';N=N+((e.replace(/onmouse[^=]*=/gi,"x=")).replace(/on[dbl]?(click|scroll)=/gi,"x=")).replace(/onkey[^=]*=/gi,"x=");N=N+"</body></html>";if(jsx3.ide.writeUserFile(d,N))return true;else jsx3.IDE.alert(null,jsx3.IDE.getDynamicProperty("jsxerr_exporthtml_writefail"));}else jsx3.IDE.alert(null,jsx3.IDE.getDynamicProperty("jsxerr_exporthtml_directory"));return false;},onDomTreeDrop:function(p,o,q,m,g,l){var
Pa=jsx3.ide.getActiveEditor();return Pa.onDomDrop(p,o,q,m,g,l);},doRepaint:function(e){var
fb=jsx3.ide.getForIdOrSelected(e,true);for(var
O=0;O<fb.length;O++)fb[O].repaint();},doFetchDataAndRepaint:function(e){var
Ra=jsx3.ide.getForIdOrSelected(e,true);for(var
Hb=0;Hb<Ra.length;Hb++){Ra[Hb].resetCacheData();Ra[Hb].repaint();}},domMenuEnabled:function(k){var
Y=jsx3.app.Model;var
Ua=jsx3.$A(jsx3.ide.getSelected(true));if(Ua.length==0)return false;if(k.single&&Ua.length>1)return false;if(k.noroot&&Ua.contains((Ua[0].getServer()).getBodyBlock()))return false;if(k.refonly&&!Ua.find(function(e){var
cb=e.getPersistence();return cb==Y.PERSISTREF||cb==Y.PERSISTREFASYNC;}))return false;if(k.noref&&Ua.find(function(l){var
Qa=l.getPersistence();return Qa==Y.PERSISTREF||Qa==Y.PERSISTREFASYNC;}))return false;if(k.cacheable&&Ua.find(function(o){return !o.instanceOf(jsx3.xml.Cacheable);}))return false;return true;},domMenuSelected:function(e){var
v=jsx3.$A(jsx3.ide.getSelected(true));if(v.length==0)return false;if(e.persist)if(v.length==(v.filter(function(s){return s.getPersistence()==e.persist;})).length)return true;return false;},onDomChange:(jsx3.$F(function(){var
ub={a:"jsxbgcolor",b:"@Solid Light"};var
ia=(this.getDomPalette()).getUIObject();if(!ia)return;var
ua=ia.getTree();var
Ia=jsx3.ide.getActiveEditor();if(jsx3.ide.ComponentEditor&&Ia instanceof jsx3.ide.ComponentEditor){var
la=(Ia.getSelection()).map(function(g){return g.getId();});ua.setDynamicProperty(ub.a,ub.b);ua.clearXmlData();var
x=jsx3.ide.getActiveServer();if(x!=null){var
Bb=x.getBodyBlock();if(Bb)this._buildTree(ua,Bb);}ia.onSelectionChanged(Ia);ua.repaint();}})).throttled(),_buildTree:function(e,m,d){var
N={};if(d==null){var
A=jsx3.ide.getActiveEditor();N.jsxid=jsx3.ide.ROOT_DOM_NODE_ID;N.jsxtext=A.getTitle();N.jsximg="jsxapp:/images/icon_46.gif";N.jsxopen="1";}else{if(m.jsxideinvisible)return;var
Lb=m.getPersistence();N.jsxid=m.getId();if(m._jsxideopen||typeof m._jsxideopen=="undefined"&&d==jsx3.ide.ROOT_DOM_NODE_ID)N.jsxopen="1";var
Oa=this._getDomRecordValues(m);N.jsxclass=Oa[0];N.jsximg=Oa[1];N.jsxtext=Oa[2];}e.insertRecord(N,d,false);if(Lb==null||Lb==jsx3.app.Model.PERSISTNONE||Lb==jsx3.app.Model.PERSISTEMBED){var
z=m.getChildren();for(var
Eb=0;Eb<z.length;Eb++)this._buildTree(e,z[Eb],N.jsxid);}},_getDomRecordValues:function(b){var
Kb=jsx3.app.Model;var
O="",Eb="jsxapp:/images/icon_89.gif",ub=b.getName();if(ub==null||ub==""){ub=(b.getClass()).getName();O="jsx3ide_dom_noname";}var
Bb=b.getPersistence();if(b instanceof Kb.Loading){ub=ub+" : Async";O="jsx3ide_dom_lasync";Eb="jsxapp:/images/icon_89b.gif";}else if(Bb==Kb.PERSISTREF||Bb==Kb.PERSISTREFASYNC){Eb="jsxapp:/images/icon_71.gif";var
_=(new
jsx3.net.URI(b.getPersistenceUrl())).getPath();if(_)ub=ub+(" : "+_.substring(_.lastIndexOf("/")+1));O=Bb==Kb.PERSISTREF?"jsx3ide_dom_ref":"jsx3ide_dom_refa";}else if(Bb==Kb.PERSISTNONE)O="jsx3ide_dom_pnone";if(b.jsxannotation)Eb="jsxapp:/images/icon_89a.gif";return [O,Eb,ub];}});]]></data>
    </script>
    <xml id="palette_dom" load="manual">
      <prereq id="palette_dom_js"/>
      <prereq plugin="jsx3.ide.ui"/>
      <prereq plugin="jsx3.amp.util.menumgr"/>
      <prereq plugin="jsx3.amp.util.toolbarmgr"/>
    <data>
        <serialization xmlns="urn:tibco.com/v3.0">
  <onAfterDeserialize><![CDATA[objJSX.getTree=function(){return jsxdom;};objJSX.onEditorChanged=(jsx3.$F(function(a,k){var
mb=k&&k.getMode()=="component";var
Bb=a&&a.getMode()=="component";if(Bb&&jsx3.ide.getActiveServer())(this.getPlugIn()).onDomChange();if(mb!=Bb)if(Bb){jsxdom.setDisplay(jsx3.gui.Block.DISPLAYBLOCK,true);}else jsxdom.setDisplay(jsx3.gui.Block.DISPLAYNONE,true);})).throttled();objJSX.onSelectionChanged=function(r){if(r==jsx3.ide.getActiveEditor()){var
xa=r.getSelection()||[];var
lb=(jsx3.$A(xa)).map(function(j){if(j==(r.getServer()).getBodyBlock())return jsx3.ide.ROOT_DOM_NODE_ID;else return j.getId();});jsxdom.setValue(lb);(jsx3.$A(xa)).each((jsx3.$F(function(o){this._revealItemInDom(o);})).bind(this));}};objJSX._revealItemInDom=function(n){var
Da=n.getServer();if(Da){jsxdom.revealRecord(n.getId(),jsxdom.getParent());var
Sa=Da.getBodyBlock();while((n=n.getParent())!=null&&n!=Sa)n._jsxideopen=true;}};objJSX._onSelect=function(k){var
Za=jsx3.ide.getActiveEditor();if(Za){var
wb=Za.getServer();if(wb){var
tb=k.getValue();var
M=(jsx3.$A(tb)).map(function(o){if(o==jsx3.ide.ROOT_DOM_NODE_ID)return wb.getBodyBlock();else return wb.getJSXById(o);});Za.setSelection(M);}}};objJSX._doDeleteDom=function(){(this.getPlugIn()).recycleDOM();};objJSX.onPaletteLoaded=function(){var
ub={a:"_doDeleteDom",b:"/",c:"dom-ctxmenu",d:"dom-ctxmenu-item",e:"edit",f:"delete",g:"additions",h:"utils",i:"dom-toolbar"};objJSX.registerHotKey(ub.a,jsx3.gui.Event.KEY_DELETE,false,true,false);objJSX.registerHotKey(ub.a,8,false,true,false);var
Lb=jsx3.ide.getActiveEditor();if(Lb)this.onEditorChanged(Lb,null);var
X=new
jsx3.amp.util.MenuManager();X.addMenuBar(ub.b,menuBar);(((this.getPlugIn()).getExtPoint(ub.c)).processExts()).each(function(c){X.addMenu(c);});(((this.getPlugIn()).getExtPoint(ub.d)).processExts()).each(function(s){X.addItem(s);});X.finishInit();var
L=new
jsx3.amp.util.ToolbarManager(jsx_ide_dom_bar);L.addSection(ub.e);L.addSection(ub.f,true);L.addSection(ub.g,true);L.addSection(ub.h,true);(((this.getPlugIn()).getExtPoint(ub.i)).processExts()).each(function(b){L.addItem(b);});};]]></onAfterDeserialize>
    <object type="jsx3.gui.Block">
      <dynamics/>
      <variants jsxleft="0" jsxoverflow="2" jsxtop="0"/>
      <strings jsxheight="100%" jsxhelpid="ide.palette.dom" jsxname="dompal" jsxwidth="100%"/>
        <object type="jsx3.gui.Block">
          <strings jsxdisplay="none" jsxname="menuBar"/>
        </object>
        <object type="jsx3.gui.LayoutGrid">
          <variants jsxoverflow="2" jsxrelativeposition="0"/>
          <strings jsxheight="100%" jsxname="jsx_ide_cache_layout" jsxrows="26,*" jsxwidth="100%"/>
          <events/>
          <properties/>
            <object type="jsx3.gui.WindowBar">
              <dynamics jsxbgcolor="@Solid Medium" jsxborder="@Outset"/>
              <variants jsxbartype="2" jsxfontsize="10" jsxoverflow="3" jsxrelativeposition="1"/>
              <strings jsxname="jsx_ide_dom_bar"/>
            </object>
            <object type="jsx3.gui.Block">
              <dynamics jsxbgcolor="@Solid Light" jsxborder="@Outset"/>
              <variants jsxleft="0" jsxoverflow="1" jsxtop="0"/>
              <strings jsxheight="100%" jsxname="jsx_ide_cache_treeblock" jsxwidth="100%"/>
                <object type="jsx3.gui.Tree">
                  <dynamics jsxbgcolor="@Solid Disabled" jsxpadding="@Tree Padding"/>
                  <variants jsxdrag="1" jsxdrop="1" jsxmultiselect="1"/>
                  <strings jsxheight="100%" jsxmenu="jsx3.ide.domctx" jsxname="jsxdom" jsxspystylekeys="" jsxspystylevalues="" jsxwidth="100%"/>
                  <events jsxchange="dompal._onSelect(this);" jsxctrldrop="(dompal.getPlugIn()).onDomTreeDrop(objSOURCE.getId(),strRECORDID,strDRAGIDS,this,true,bINSERTBEFORE);" jsxdrop="(dompal.getPlugIn()).onDomTreeDrop(objSOURCE.getId(),strRECORDID,strDRAGIDS,this,false,bINSERTBEFORE);" jsxexecute="(dompal.getPlugIn()).doDomExecute(strRECORDID);" jsxspy="(dompal.getPlugIn()).domSpyGlass(this,strRECORDID);" jsxtoggle="(dompal.getPlugIn()).doDomToggle(strRECORDID,bOPEN);"/>
                  <xslparameters jsxindent="16"/>
                </object>
            </object>
        </object>
    </object>
</serialization>
      </data>
    </xml>

    <xml id="menu_attributes" load="manual">
      <data>
        <data xmlns="" jsxid="jsxroot">
  <record jsxexecute="(attrpal.getPlugIn()).onAttributeDelete(this.getContextRecordId());" jsxid="jsxattributeclear" jsximg="jsxapp:/images/icon_55.gif" jsxtext="Remove Attribute" jsxtip="completely removes this attribute (both name and value) from the object"/>
</data>
      </data>
    </xml>
    <script eval="true" id="js_attributes" load="manual">
      <data><![CDATA[(jsx3.$O(this)).extend({_attrChanged:function(j){(jsx3.$A(j)).each(function(a){if(a.getPersistence()!=jsx3.app.Model.PERSISTNONE){var
xa=jsx3.ide.getEditorForJSX(a);xa.setDirty(true);}});},onAttributeEdit:function(l,d,h){if(h)(h.getRecordNode(l)).removeAttribute("jsxmulti");var
Wa=jsx3.ide.getSelected();for(var
X=0;X<Wa.length;X++){d=jsx3.util.strTrim(d);Wa[X].setAttribute(l,d);Wa[X].repaint();}this._attrChanged(Wa);this.publish({subject:"attrChanged",o:Wa,value:d,key:l});return {strNEWVALUE:d};},onAttributeAdd:function(h,s){this.onAttributeEdit(h,s);this.onAttributeChange();},onAttributeDelete:function(h){if(h){var
fa=jsx3.ide.getSelected();for(var
u=0;u<fa.length;u++){fa[u].removeAttribute(h);fa[u].repaint();}this._attrChanged(fa);this.publish({subject:"attrChanged",o:fa,value:null,key:h});this.onAttributeChange();}},onAttributeChange:function(){var
W=this.getAttrPalette();var
_a=W.getUIObject();var
Oa=false;if(_a){var
qa=_a.getDataMatrix();var
L=jsx3.ide.getSelected();if(L.length>0){qa.clearXmlData();var
eb={},za={};for(var
Ta=0;Ta<L.length;Ta++){var
ea=L[Ta].getAttributes();for(var Wa in ea){var
Kb=String(ea[Wa]);if(Ta==0)eb[Wa]=Kb;else if(typeof eb[Wa]=="undefined")za[Wa]=true;else if(eb[Wa]!==Kb){za[Wa]=true;delete eb[Wa];}}for(var Wa in eb)if(typeof ea[Wa]=="undefined"){za[Wa]=true;delete eb[Wa];}}for(var Wa in eb)qa.insertRecord({value:eb[Wa],jsxid:Wa,jsxtext:Wa},null,false);for(var Wa in za)qa.insertRecord({jsxid:Wa,jsxtext:Wa,jsxmulti:1},null,false);qa.repaintData();Oa=true;}_a.makeActive(Oa);}}});]]></data>
    </script>
    <xml id="palette_attributes" load="manual">
      <prereq id="js_attributes"/>
      <prereq id="menu_attributes"/>
    <data>
        <serialization xmlns="urn:tibco.com/v3.0">
  <onAfterDeserialize><![CDATA[objJSX.onEditorChanged=function(f,r){var
yb=f&&f.getMode()=="component";this.makeActive(yb);if(yb)this.onSelectionChanged(f);};objJSX.makeActive=(jsx3.$F(function(h){if(Boolean(jsxattribute_name.getEnabled())!=Boolean(h)){jsxattribute_name.setEnabled(h,true);jsxattribute_value.setEnabled(h,true);jsxaddattribute.setEnabled(h,true);if(!h)jsxattributes.clearXmlData();jsxattributes.setEnabled(h,!h);namelabel.setColor(h?"#000000":jsx3.gui.Form.DEFAULTDISABLEDCOLOR,true);valuelabel.setColor(h?"#000000":jsx3.gui.Form.DEFAULTDISABLEDCOLOR,true);}})).throttled();objJSX.onSelectionChanged=function(){(this.getPlugIn()).onAttributeChange();};objJSX.getDataMatrix=function(){return jsxattributes;};objJSX._attributeExec=function(){var
ib=jsxattribute_name;var
z=jsxattribute_value;var
S=ib.getValue();var
D=z.getValue();if(S&&D){(this.getPlugIn()).onAttributeAdd(S,D);ib.setValue("");z.setValue("");ib.focus();}};objJSX.onPaletteLoaded=function(){var
ub={a:/^[_A-Za-z]\w*$/,b:/^[^\"]*$/};this.onSelectionChanged();jsxattribute_name._regex=ub.a;jsxattribute_value._regex=ub.b;jsxattribute_value.validateKey=function(m){if(m&&!this._regex.test(m)){this.beep();return false;}return true;};jsxattribute_name.validateKey=jsxattribute_value.validateKey;objJSX.registerHotKey(function(){(objJSX.getPlugIn()).onAttributeDelete(jsxattributes.getValue());},jsx3.gui.Event.KEY_DELETE,false,true,false);};]]></onAfterDeserialize>
  <object type="jsx3.gui.Block">
   <dynamics jsxborder="@Outset"/>
   <variants jsxleft="0" jsxoverflow="1" jsxtop="0"/>
   <strings jsxheight="100%" jsxhelpid="ide.palette.attr" jsxname="attrpal" jsxwidth="100%"/>
    <object type="jsx3.gui.LayoutGrid">
     <variants jsxleft="0" jsxoverflow="2" jsxrelativeposition="0" jsxtop="0"/>
     <strings jsxheight="100%" jsxname="jsxattributes_editor" jsxrows="48,*" jsxwidth="100%"/>
      <object type="jsx3.gui.Block">
       <dynamics jsxbgcolor="@Solid Medium"/>
       <variants jsxoverflow="2" jsxrelativeposition="1"/>
       <strings jsxheight="100%" jsxname="jsxattributes_namevalueeditor" jsxpadding="22 6 0 98" jsxtextalign="right" jsxwidth="100%"/>
        <object type="jsx3.gui.Block">
         <dynamics jsxfontname="@Label1 FN" jsxfontsize="@Label1 FS" jsxfontweight="@Label1 FW" jsxtext="_gen_name"/>
         <variants jsxleft="6" jsxrelativeposition="0" jsxtop="8" jsxwidth="60"/>
         <strings jsxname="namelabel" jsxtextalign="right"/>
        </object>
        <object type="jsx3.gui.Block">
         <dynamics jsxfontname="@Label1 FN" jsxfontsize="@Label1 FS" jsxfontweight="@Label1 FW" jsxtext="_gen_value"/>
         <variants jsxleft="6" jsxrelativeposition="0" jsxtop="28" jsxwidth="60"/>
         <strings jsxname="valuelabel" jsxtextalign="right"/>
        </object>
        <object type="jsx3.gui.TextBox">
         <variants jsxleft="70" jsxrelativeposition="0" jsxtop="6"/>
         <strings jsxname="jsxattribute_name" jsxwidth="100%"/>
         <events jsxexecute="((this.getParent()).getChild(&quot;jsxattribute_value&quot;)).focus();" jsxincchange="this.validateKey(strVALUE);"/>
        </object>
        <object type="jsx3.gui.TextBox">
         <variants jsxleft="70" jsxrelativeposition="0" jsxtop="26"/>
         <strings jsxname="jsxattribute_value" jsxwidth="100%"/>
         <events jsxexecute="attrpal._attributeExec();" jsxincchange="this.validateKey(strVALUE);"/>
        </object>
        <object type="jsx3.gui.ToolbarButton">
         <dynamics jsxtip="_atted_add"/>
         <strings jsximage="jsx:///images/tree/plus.gif" jsxleft="100%" jsxname="jsxaddattribute"/>
         <events jsxexecute="attrpal._attributeExec();"/>
        </object>
      </object>
      <object type="jsx3.gui.Block">
       <dynamics jsxbgcolor="@Solid Medium" jsxborder="@Inset Top"/>
       <variants jsxoverflow="2"/>
       <strings jsxheight="100%" jsxwidth="100%"/>
        <object type="jsx3.gui.Matrix">
         <dynamics jsxbgcolor="@Solid Light" jsxbodyborder="@Outset" jsxheaderborder="@Outset NoBottom"/>
         <variants jsxheaderheight="21" jsxpagingmodel="1" jsxreorder="0" jsxresize="1" jsxscalewidth="1" jsxselectionmodel="0"/>
         <strings jsxfocusstyle=";" jsxmenu="jsxmenu_attributes" jsxname="jsxattributes" jsxsortdirection="ascending" jsxsortpath=""/>
         <events jsxafteredit="(attrpal.getPlugIn()).onAttributeEdit(strRECORDID,strNEWVALUE,this);" jsxmenu="strRECORDID!=null&amp;&amp;strRECORDID!=&quot;&quot;;"/>
          <object type="jsx3.gui.Matrix.Column">
           <dynamics jsxbg="@Fade TopDown" jsxborder="@Outset" jsxcellbgcolor="@Matrix HeaderCol BG" jsxcellborder="@Matrix HeaderCol Border" jsxtext="_gen_name"/>
           <strings jsxcellbgcolor="#c8c8d5" jsxcellborder="0px;1px solid #9898a5;1px solid #9898a5;0px" jsxcellpadding="3" jsxname="jsxattributes_name" jsxpadding="3" jsxpath="jsxtext" jsxwidth="120"/>
          </object>
          <object type="jsx3.gui.Matrix.Column">
           <dynamics jsxbg="@Fade TopDown" jsxborder="@Outset" jsxcellbgcolor="@Matrix ValueCol BG" jsxcellborder="@Matrix ValueCol Border" jsxtext="_gen_value"/>
           <strings jsxcellpadding="3" jsxname="jsxattributes_value" jsxpadding="3" jsxpath="value" jsxvaluetemplate="&lt;xsl:template xmlns:xsl=&quot;http://www.w3.org/1999/XSL/Transform&quot;&gt; &lt;xsl:choose&gt;   &lt;xsl:when test=&quot;@value=''&quot;&gt;&lt;span class=&quot;jsx3ide_props_emptystring&quot;&gt;[empty]&lt;/span&gt;&lt;/xsl:when&gt;   &lt;xsl:when test=&quot;@jsxmulti&quot;&gt;&lt;span class=&quot;jsx3ide_props_multi&quot;&gt;[multiple values]&lt;/span&gt;&lt;/xsl:when&gt;   &lt;xsl:otherwise&gt;&lt;xsl:value-of select=&quot;@value&quot; /&gt;&lt;/xsl:otherwise&gt; &lt;/xsl:choose&gt; &lt;/xsl:template&gt;" jsxwidth="*"/>
            <object type="jsx3.gui.TextBox">
             <strings jsxname="jsxmask_attstext"/>
            </object>
          </object>
        </object>
        <object type="jsx3.gui.Menu">
          <variants jsxshare="1"/>
          <strings jsxdisplay="none" jsxname="jsxmenu_attributes" jsxxmlid="jsx3.ide.editor.component.menu_attributes"/>
        </object>
      </object>
    </object>
  </object>
</serialization>
      </data>
    </xml>
  </resources>

  <event id="domChanged">
    <param id="editor"/>
  </event>
  
  <event id="cacheChanged">
    <param id="editor"/>
  </event>

  <event id="recycled">
    <param id="editor"/>
    <param id="o"/>
  </event>

  <event id="attrChanged">
    <param id="o"/>
    <param id="key"/>
    <param id="value"/>
  </event>

  <subscribe event="jsx3.ide.editor.activeChanged                     jsx3.ide.editor.modeChanged"><![CDATA[
    this._getPalettes().each(function(e) {
      var content = e.getUIObject();
      if (content && content.onEditorChanged)
        content.onEditorChanged(evt.editor, evt.previous);
    });
  ]]></subscribe>

  <subscribe event="jsx3.ide.editor.selectionChanged"><![CDATA[
    if (!evt.active) return;
    this._getPalettes().each(function(e) {
      var content = e.getUIObject();
      if (content && content.onSelectionChanged)
        content.onSelectionChanged(evt.editor);
    });
  ]]></subscribe>

  <subscribe event="jsx3.ide.editor.renamed                     jsx3.ide.editor.component.domChanged" when="loaded"><![CDATA[
    if (evt.editor == jsx3.ide.getActiveEditor() && this.onDomChange)
      this.onDomChange();
  ]]></subscribe>

  <subscribe event="jsx3.ide.palette.properties.domChanged" when="loaded"><![CDATA[
    if (this.onDomChange)
      this.onDomChange();
  ]]></subscribe>

  <subscribe event="jsx3.ide.palette.properties.propChanged" when="loaded"><![CDATA[
    if (evt.prop == 'jsxannotation' && this.onDomChange)
      this.onDomChange();
  ]]></subscribe>

  <!-- The DOM palette context menu -->
  <extension-point id="dom-ctxmenu">
    <processor instance-class="jsx3.ide.ui.IdeMenu" type="instantiator"/>
  </extension-point>

  <!-- The DOM palette context menu items -->
  <extension-point id="dom-ctxmenu-item">
    <processor instance-class="jsx3.ide.ui.IdeMenuItem" type="instantiator"/>
  </extension-point>

  <extension point="jsx3.ide.editor.type">
    <type xmlns="" class="jsx3.ide.ComponentEditor">
      <filetype id="component"/>
    </type>
  </extension>
  
  <extension id="dom.palette" point="jsx3.ide.ui.palette">
    <palette default-position="q2" hotkey="ctrl+1" idegroup="per-file" label="Component Hierarchy" resource="palette_dom"/>
  </extension>
  <extension id="attr.palette" point="jsx3.ide.ui.palette">
    <palette default-closed="true" default-position="q4" hotkey="ctrl+4" idegroup="per-node" label="Attribute Editor" resource="palette_attributes"/>
  </extension>

  <extension id="dom.ctxmenu" point="jsx3.ide.editor.component.dom-ctxmenu">
    <menu id="jsx3.ide.domctx" path="/">
      <section id="edit"/>
      <section id="persist"/>
      <divider id="import"/>
      <divider id="delete"/>
      <divider id="util"/>
      <divider id="additions"/>
    </menu>
    <menu id="persistence" label="Persistence" path="/jsx3.ide.domctx/persist">
      <section id="all"/>
    </menu>
    <menu id="import" label="Import" path="/jsx3.ide.domctx/import">
      <section id="all"/>
    </menu>
    <menu id="export" label="Export" path="/jsx3.ide.domctx/import">
      <section id="all"/>
    </menu>
  </extension>

  <extension id="dom.ctxmenu-items" point="jsx3.ide.editor.component.dom-ctxmenu-item">
    <action enabled="eval" enabled-eval="this.getPlugIn().domMenuEnabled({noroot:1})" execute="this.getPlugIn().cloneDOM(menu.getContextParent().getValue())" id="clone" img="jsxapp:/images/icon_1.gif" label="Clone" menupath="/jsx3.ide.domctx/edit"/>
    <action execute="this.getPlugIn().doRepaint(menu.getContextParent().getValue())" id="repaint" img="jsxapp:/images/icon_68.gif" label="Repaint" menupath="/jsx3.ide.domctx/edit"/>
    <action enabled="eval" enabled-eval="this.getPlugIn().domMenuEnabled({cacheable:1})" execute="this.getPlugIn().doFetchDataAndRepaint(menu.getContextParent().getValue())" id="fetchrepaint" img="jsxapp:/images/icon_68a.gif" label="Re-Fetch Data and Repaint" menupath="/jsx3.ide.domctx/edit"/>

    <action enabled="eval" enabled-eval="this.getPlugIn().domMenuEnabled({noroot:1})" execute="this.getPlugIn().doPersist(menu.getContextParent().getValue(),jsx3.app.Model.PERSISTNONE)" id="persist0" label="Transitory" menupath="/jsx3.ide.domctx/persistence/all" selected="eval" selected-eval="this.getPlugIn().domMenuSelected({persist:jsx3.app.Model.PERSISTNONE})"/>
    <action enabled="eval" enabled-eval="this.getPlugIn().domMenuEnabled({noroot:1})" execute="this.getPlugIn().doPersist(menu.getContextParent().getValue(),jsx3.app.Model.PERSISTEMBED)" id="persist1" label="Embedded" menupath="/jsx3.ide.domctx/persistence/all" selected="eval" selected-eval="this.getPlugIn().domMenuSelected({persist:jsx3.app.Model.PERSISTEMBED})"/>
    <action enabled="eval" enabled-eval="this.getPlugIn().domMenuEnabled({noroot:1, refonly:1})" execute="this.getPlugIn().doPersist(menu.getContextParent().getValue(),jsx3.app.Model.PERSISTREF)" id="persist2" label="Referenced" menupath="/jsx3.ide.domctx/persistence/all" selected="eval" selected-eval="this.getPlugIn().domMenuSelected({persist:jsx3.app.Model.PERSISTREF})"/>
    <action enabled="eval" enabled-eval="this.getPlugIn().domMenuEnabled({noroot:1, refonly:1})" execute="this.getPlugIn().doPersist(menu.getContextParent().getValue(),jsx3.app.Model.PERSISTREFASYNC)" id="persist3" label="Referenced - Asynchronous" menupath="/jsx3.ide.domctx/persistence/all" selected="eval" selected-eval="this.getPlugIn().domMenuSelected({persist:jsx3.app.Model.PERSISTREFASYNC})"/>

    <action enabled="eval" enabled-eval="this.getPlugIn().domMenuEnabled({single:1, noref:1})" execute="this.getPlugIn().importDomBranch(menu.getContextRecordId(),jsx3.app.Model.PERSISTEMBED)" id="import1" label="Embedded..." menupath="/jsx3.ide.domctx/import/all"/>
    <action enabled="eval" enabled-eval="this.getPlugIn().domMenuEnabled({single:1, noroot:1, noref:1})" execute="this.getPlugIn().importDomBranch(menu.getContextRecordId(),jsx3.app.Model.PERSISTREF)" id="import2" label="Referenced..." menupath="/jsx3.ide.domctx/import/all"/>
    <action enabled="eval" enabled-eval="this.getPlugIn().domMenuEnabled({single:1, noroot:1, noref:1})" execute="this.getPlugIn().importDomBranch(menu.getContextRecordId(),jsx3.app.Model.PERSISTREFASYNC)" id="import3" label="Referenced - Asynchronous..." menupath="/jsx3.ide.domctx/import/all"/>

    <action enabled="eval" enabled-eval="this.getPlugIn().domMenuEnabled({single:1, noroot:1})" execute="this.getPlugIn().exportDomBranch(jsx3.GO(menu.getContextRecordId()),'MODEL')" id="export1" label="As XML..." menupath="/jsx3.ide.domctx/export/all"/>
    <action enabled="eval" enabled-eval="this.getPlugIn().domMenuEnabled({single:1, noroot:1})" execute="this.getPlugIn().exportDomBranch(jsx3.GO(menu.getContextRecordId()),'VIEW')" id="export2" label="As HTML..." menupath="/jsx3.ide.domctx/export/all"/>

    <action enabled="eval" enabled-eval="this.getPlugIn().domMenuEnabled({noroot:1})" execute="this.getPlugIn().recycleDOM(menu.getContextParent().getValue())" id="recycle" img="jsxapp:/images/icon_73.gif" label="Recycle" menupath="/jsx3.ide.domctx/delete"/>

    <action enabled="eval" enabled-eval="this.getPlugIn().domMenuEnabled({single:1, noroot:1})" execute="this.getPlugIn().domCopyNameToCB(menu.getContextRecordId())" id="clipname" label="Copy Name to Clipboard" menupath="/jsx3.ide.domctx/util"/>
    <action enabled="eval" enabled-eval="this.getPlugIn().domMenuEnabled({single:1, noroot:1})" execute="this.getPlugIn().domCopyGetterToCB(menu.getContextRecordId())" id="clipget" label="Copy Getter Code to Clipboard" menupath="/jsx3.ide.domctx/util"/>
    
  </extension>

  <bindable id="isComponentMode" subscribe="jsx3.ide.editor.activeChanged                        jsx3.ide.editor.modeChanged" value="var e = jsx3.ide.getActiveEditor(); e &amp;&amp; e.getMode() == 'component'"/>

  <bindable id="oneOrMoreSelected" subscribe="jsx3.ide.editor.selectionChanged" value="jsx3.ide.getSelected(true).length &gt; 0"/>

  <bindable id="rootNotSelected" subscribe="jsx3.ide.editor.selectionChanged" value="jsx3.ide.getSelected(true).find(                                              function(e) { return e == e.getServer().getBodyBlock(); }) == null"/>

  <bindable id="onlyBlockXSelected" subscribe="jsx3.ide.editor.selectionChanged" value="jsx3.ide.getSelected(true).find(                                              function(e) { return !e.instanceOf(jsx3.xml.Cacheable); }) == null"/>

  <!-- Toolbar buttons, etc -->
  <extension-point id="dom-toolbar">
    <processor instance-class="jsx3.amp.util.ToolbarItem" type="instantiator"/>
  </extension-point>

  <extension point="jsx3.ide.editor.component.dom-toolbar">
    <button enabled="{isComponentMode &amp;&amp; oneOrMoreSelected &amp;&amp; rootNotSelected}" execute="this.getPlugIn().cloneDOM();" id="clone" img="jsxapp:/images/icon_1.gif" section="edit" tip="Clone this object"/>
    <button enabled="{isComponentMode &amp;&amp; oneOrMoreSelected}" execute="this.getPlugIn().doRepaint();" id="repaint" img="jsxapp:/images/icon_68.gif" section="edit" tip="Repaint this object"/>
    <button enabled="{isComponentMode &amp;&amp; oneOrMoreSelected &amp;&amp; onlyBlockXSelected}" execute="this.getPlugIn().doFetchDataAndRepaint();" id="fetchrepaint" img="jsxapp:/images/icon_68a.gif" section="edit" tip="Re-fetch data and repaint this object"/>
    <button enabled="{isComponentMode &amp;&amp; oneOrMoreSelected &amp;&amp; rootNotSelected}" execute="this.getPlugIn().recycleDOM();" id="recycle" img="jsxapp:/images/icon_73.gif" section="delete" tip="Recycle this object"/>
    <button enabled="{isComponentMode}" execute="this.getPlugIn().onDomChange();" id="refresh" img="jsxapp:/images/icon_15.gif" section="utils" tip="Refresh the DOM tree"/>
  </extension>

</plugin>
  <plugin id="jsx3.ide.editor.focus" name="Focus Rectangle Plug-In" version="0.1" xmlns="http://www.generalinterface.org/gi/amp" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.generalinterface.org/gi/amp http://www.generalinterface.org/xsd/plugin.xsd">

  <method id="isSettingOn">
    var settings = jsx3.ide.getIDESettings();
    return settings.get('prefs', 'dom', 'showFocus');
  </method>

  <method id="isSnapOn">
    var settings = jsx3.ide.getIDESettings();
    return settings.get('prefs', 'dom', 'snapTo');
  </method>
  
  <method id="toggleFocusRectangle" lazy="true"/>

  <method id="toggleSnapToGrid" lazy="true"/>

  <method id="showFocusRectangle" params="bShow">
    if (bShow || this.isSettingOn()) {
      this.load().when(jsx3.$F(function() {
        this.showFocusRectangle(bShow);
      }).bind(this));
    }
  </method>

  <requires>
  </requires>

  <resources>
    <script eval="true" id="js" path="focus.js"/>
  </resources>

  <event id="moved">
    <param id="targets" type="Array&lt;jsx3.gui.Block&gt;"/>
  </event>

  <subscribe event="jsx3.ide.editor.focus.moved">
    jsx3.ide.getActiveEditor().setDirty(true);
  </subscribe>

  <bindable id="rectangleOn" value="this.isSettingOn()"/>
  <bindable id="snapOn" value="this.isSnapOn()"/>

  <bindable id="isComponentMode" subscribe="jsx3.ide.editor.activeChanged                        jsx3.ide.editor.modeChanged" value="var e = jsx3.ide.getActiveEditor(); e &amp;&amp; e.getMode() == 'component'"/>

  <subscribe event="jsx3.ide.palette.properties.propChanged"><![CDATA[
    this.showFocusRectangle();
  ]]></subscribe>

  <subscribe event="jsx3.ide.editor.selectionChanged"><![CDATA[
    if (evt.active)
      this.showFocusRectangle();
  ]]></subscribe>

  <extension point="jsx3.ide.editor.component.dom-toolbar">
    <button enabled="{isComponentMode}" execute="this.getPlugIn().toggleFocusRectangle();" id="focus" img="jsxapp:/images/icon_36.gif" section="additions" state="{rectangleOn ? 1 : 0}" tip="Toggle the focus rectangle"/>
    <button enabled="{isComponentMode}" execute="this.getPlugIn().toggleSnapToGrid();" id="snap" img="jsxapp:/images/icon_90.gif" section="additions" state="{this.isSnapOn() || snapOn ? 1 : 0}" tip="Snap to grid when moving objects in the component editor"/> <!-- Redundant to get an initial value even before plug-in loads. -->
  </extension>

</plugin>
  <plugin id="jsx3.ide.palette.properties" name="Properties Palette Plug-In" version="0.1" xmlns="http://www.generalinterface.org/gi/amp" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.generalinterface.org/gi/amp http://www.generalinterface.org/xsd/plugin.xsd">

  <method id="getPalette"><![CDATA[
    return this.getEngine().getPlugIn("jsx3.ide.ui").getPalette(this, "props.palette");
  ]]></method>

  <method id="onLoaded"><![CDATA[
    this.constructPropertyTypeIndex();

    this.getExtPoint("catalog").processExts(function(ext, xml) {
      jsx3.ide.registerCatalogAt('prop', ext.getPlugIn().resolveURI(xml.attr('path')));
    });
  ]]></method>

  <requires>
    <plugin id="jsx3.gui.Matrix"/>
    <plugin id="jsx3.gui.TextBox"/>
    <plugin id="jsx3.gui.ImageButton"/>
  </requires>

  <resources>
    <script eval="true" id="js" path="properties.js"/>
    <xml id="contextmenu" path="contextmenu.xml"/>
    <xml id="ui" path="properties.xml"/>
    <xml id="colorpicker" load="manual" path="colorpicker.xml"/>
  </resources>

  <event id="propChanged">
    <param id="objs"/>
    <param id="prop"/>
    <param id="lookup"/>
  </event>

  <event id="domChanged">
    <param id="objs"/>
  </event>

  <subscribe event="jsx3.ide.editor.activeChanged                     jsx3.ide.editor.modeChanged"><![CDATA[
    var content = this.getPalette().getUIObject();
    if (content && content.onEditorChanged)
      content.onEditorChanged(evt.editor, evt.previous);
  ]]></subscribe>

  <subscribe event="jsx3.ide.editor.selectionChanged"><![CDATA[
    if (!evt.active) return;
    var content = this.getPalette().getUIObject();
    if (content && content.onSelectionChanged)
      content.onSelectionChanged(evt.editor);
  ]]></subscribe>

  <subscribe event="jsx3.ide.editor.focus.moved"><![CDATA[
    var content = this.getPalette().getUIObject();
    if (content && content.onSelectionChanged)
      content.onSelectionChanged(jsx3.ide.getActiveEditor());
  ]]></subscribe>

  <subscribe event="jsx3.ide.resourceReloaded"><![CDATA[
    if (evt.resource.getType() == "jss")
      this.constructPropertyTypeIndex();
  ]]></subscribe>

  <extension-point id="catalog">
    <!-- Adds a properties catalog file. The path attribute is relative to the declaring plug-in.
         <catalog path="templates/catalog.xml"/>  -->
  </extension-point>

  <extension point="jsx3.ide.palette.properties.catalog">
    <catalog path="templates/catalog.xml"/>
  </extension>

  <extension id="props.palette" point="jsx3.ide.ui.palette">
    <palette default-position="q4" hotkey="ctrl+2" idegroup="per-node" label="Properties Editor" resource="ui"/>
  </extension>

</plugin>
  <plugin id="jsx3.ide.palette.events" name="Events Palette Plug-In" version="0.1" xmlns="http://www.generalinterface.org/gi/amp" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.generalinterface.org/gi/amp http://www.generalinterface.org/xsd/plugin.xsd">

  <method id="getPalette"><![CDATA[
    return this.getEngine().getPlugIn("jsx3.ide.ui").getPalette(this, "events.palette");
  ]]></method>

  <method id="onLoaded"><![CDATA[
    this.getExtPoint("catalog").processExts(function(ext, xml) {
      jsx3.ide.registerCatalogAt('event', ext.getPlugIn().resolveURI(xml.attr('path')));
    });
  ]]></method>

  <requires>
    <plugin id="jsx3.gui.Matrix"/>
    <plugin id="jsx3.gui.TextBox"/>
  </requires>

  <resources>
    <script eval="true" id="js" path="events.js"/>
    <xml id="contextmenu" path="contextmenu.xml"/>
    <xml id="ui" path="events.xml"/>
  </resources>

  <event id="eventChanged">
    <param id="o"/>
    <param id="key"/>
    <param id="value"/>
  </event>

  <subscribe event="jsx3.ide.editor.activeChanged                     jsx3.ide.editor.modeChanged"><![CDATA[
    var content = this.getPalette().getUIObject();
    if (content && content.onEditorChanged)
      content.onEditorChanged(evt.editor, evt.previous);
  ]]></subscribe>

  <subscribe event="jsx3.ide.editor.selectionChanged"><![CDATA[
    if (!evt.active) return;
    var content = this.getPalette().getUIObject();
    if (content && content.onSelectionChanged)
      content.onSelectionChanged(evt.editor);
  ]]></subscribe>

  <extension-point id="catalog">
    <!-- Adds an events catalog file. The path attribute is relative to the declaring plug-in.
         <catalog path="templates/catalog.xml"/>  -->
  </extension-point>

  <extension point="jsx3.ide.palette.events.catalog">
    <catalog path="templates/catalog.xml"/>
  </extension>

  <extension id="events.palette" point="jsx3.ide.ui.palette">
    <palette default-position="q4" hotkey="ctrl+3" idegroup="per-node" label="Events Editor" resource="ui"/>
  </extension>

</plugin>
  <plugin id="jsx3.ide.palette.xslparams" name="XSL Parameters Palette Plug-In" version="0.1" xmlns="http://www.generalinterface.org/gi/amp" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.generalinterface.org/gi/amp http://www.generalinterface.org/xsd/plugin.xsd">

  <method id="getPalette"><![CDATA[
    return this.getEngine().getPlugIn("jsx3.ide.ui").getPalette(this, "xsl.palette");
  ]]></method>

  <method id="onLoaded"><![CDATA[
    this.getExtPoint("catalog").processExts(function(ext, xml) {
      jsx3.ide.registerCatalogAt('xsl', ext.getPlugIn().resolveURI(xml.attr('path')));
    });
  ]]></method>

  <requires>
    <plugin id="jsx3.gui.Matrix"/>
    <plugin id="jsx3.gui.TextBox"/>
  </requires>

  <resources>
    <script eval="true" id="js" path="xslparams.js"/>
    <xml id="contextmenu" path="contextmenu.xml"/>
    <xml id="ui" path="xslparams.xml"/>
  </resources>

  <event id="changed">
    <param id="o"/>
    <param id="key"/>
    <param id="value"/>
  </event>

  <subscribe event="jsx3.ide.editor.activeChanged                     jsx3.ide.editor.modeChanged"><![CDATA[
    var content = this.getPalette().getUIObject();
    if (content && content.onEditorChanged)
      content.onEditorChanged(evt.editor, evt.previous);
  ]]></subscribe>

  <subscribe event="jsx3.ide.editor.selectionChanged"><![CDATA[
    if (!evt.active) return;
    var content = this.getPalette().getUIObject();
    if (content && content.onSelectionChanged)
      content.onSelectionChanged(evt.editor);
  ]]></subscribe>

  <extension-point id="catalog">
    <!-- Adds an xsl params catalog file. The path attribute is relative to the declaring plug-in.
         <catalog path="templates/catalog.xml"/>  -->
  </extension-point>

  <extension point="jsx3.ide.palette.xslparams.catalog">
    <catalog path="templates/catalog.xml"/>
  </extension>

  <extension id="xsl.palette" point="jsx3.ide.ui.palette">
    <palette default-closed="true" default-position="q4" hotkey="ctrl+5" idegroup="per-node" label="XSL Parameters" resource="ui"/>
  </extension>

</plugin>
  <plugin id="jsx3.ide.recycling" name="Recycling Plug-In" version="0.1" xmlns="http://www.generalinterface.org/gi/amp" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.generalinterface.org/gi/amp http://www.generalinterface.org/xsd/plugin.xsd">

  <method id="getSelection">
    var ui = this.getServer().getJSXByName("jsx_ide_recycling_bin");
    return ui ? ui.getTree().getValue() : null;
  </method>

  <requires>
    <plugin id="jsx3.ide"/>
    <plugin id="jsx3.ide.ui"/>
    <plugin id="jsx3.amp.util.toolbarmgr"/>
  </requires>

  <resources>
    <script eval="true" id="js" path="recycling.js"/>
    <xml id="ui" path="recycling.xml"/>
  </resources>

  <event id="selection">
    <param id="value"/>
  </event>

  <event id="emptied"/>

  <event id="restored">
    <param id="o"/>
  </event>

  <subscribe event="jsx3.ide.editor.activeChanged                     jsx3.ide.editor.modeChanged" when="loaded"><![CDATA[
    if (this.getUI()) this.getUI().refreshTree();
  ]]></subscribe>

  <subscribe event="jsx3.ide.editor.component.recycled" when="loaded"><![CDATA[
    if (this.getUI()) this.getUI().refreshTree();
  ]]></subscribe>

  <subscribe event="jsx3.ide.editor.reverted" when="loaded"><![CDATA[
    if (evt.editor.getServer())
      this.emptyRecycleBin(evt.editor.getServer(), true);

    if (this.getUI()) this.getUI().refreshTree();
  ]]></subscribe>

  <subscribe event="jsx3.ide.editor.closed" when="loaded"><![CDATA[
    if (evt.editor.getServer())
      this.emptyRecycleBin(evt.editor.getServer(), true);
  ]]></subscribe>

  <extension id="menu.palettes" point="jsx3.ide.ui.action">
    <action enabled="project" execute="this.getPlugIn().doToggleRecycleBin();" hkconfig="true" hotkey="{hk.trash}" id="jsx3.ide.trash" label="Recycle Bin" menupath="/jsx3.ide.palettes/misc" selected="jsx" selected-jsx="jsx_ide_recycling_bin"/>
  </extension>

  <bindable id="editorApplies" subscribe="jsx3.ide.editor.activeChanged                        jsx3.ide.editor.modeChanged" value="var e = jsx3.ide.getActiveEditor();                                       e &amp;&amp; e.getMode() == 'component'"/>

  <bindable id="oneOrMoreSelected" subscribe="jsx3.ide.recycling.selection" value="this.getSelection() != null"/>

  <!-- Toolbar buttons, etc -->
  <extension-point id="toolbar">
    <processor instance-class="jsx3.amp.util.ToolbarItem" type="instantiator"/>
  </extension-point>

  <extension point="jsx3.ide.recycling.toolbar">
    <button enabled="{editorApplies &amp;&amp; oneOrMoreSelected}" execute="this.getPlugIn().doRecycleRestore();" id="restore" img="jsxapp:/images/icon_93.gif" section="utils" tip="Restore the selected objects"/>
    <button enabled="{editorApplies}" execute="this.getPlugIn().emptyRecycleBin();" id="empty" img="jsxapp:/images/icon_42.gif" section="utils" tip="Empty the recycling bin"/>
  </extension>

</plugin>
  <plugin id="jsx3.ide.editor.props" name="Properties Editor Plug-In" property="PropertiesEditorPlugin" version="0.1" xmlns="http://www.generalinterface.org/gi/amp" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.generalinterface.org/gi/amp http://www.generalinterface.org/xsd/plugin.xsd">

  <requires>
    <plugin id="jsx3.ide.editor"/>
    <plugin id="jsx3.gui.ImageButton"/>
  </requires>

  <resources>
    <script id="js" path="PropertiesEditor.js"/>
    <xml id="editor" path="tab_dynpropeditor.xml"/>
    <xml id="mode_source" load="manual" path="jss-xmlrw.xml"/>
    <xml id="mode_sourcefmt" load="manual" path="jss-xmlro.xml"/>
  </resources>

  <extension point="jsx3.ide.editor.type">
    <type class="jsx3.ide.PropertiesEditor">
      <filetype id="jss"/>
    </type>
  </extension>
  
</plugin>
  <plugin id="jsx3.ide.editor.propsbundle" name="Properties Bundle Editor Plug-In" property="PropsBundleEditorPlugin" version="0.1" xmlns="http://www.generalinterface.org/gi/amp" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.generalinterface.org/gi/amp http://www.generalinterface.org/xsd/plugin.xsd">

  <requires>
    <plugin id="jsx3.ide.editor.props"/>
    <plugin id="jsx3.gui.ImageButton"/>
  </requires>

  <resources>
    <script id="js" path="PropsBundleEditor.js"/>
    <xml id="editor" path="tab_propsbundleeditor.xml"/>
  </resources>

  <extension point="jsx3.ide.editor.type">
    <type class="jsx3.ide.PropsBundleEditor">
      <filetype id="ljss"/>
    </type>
  </extension>
  
</plugin>
  <plugin id="jsx3.ide.editor.text" name="Text Editor Plug-In" property="TextEditorPlugin" version="0.1" xmlns="http://www.generalinterface.org/gi/amp" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.generalinterface.org/gi/amp http://www.generalinterface.org/xsd/plugin.xsd">

  <script><![CDATA[
    this.loaded().when(jsx3.$F(function() {
      this.loadRsrcComponent("cssmenu", this.getServer().getRootBlock());
    }).bind(this));
  ]]></script>

  <requires>
    <plugin id="jsx3.ide.editor"/>
    <!--<plugin id="net.sf.editarea"/>-->
  </requires>

  <resources>
    <script id="js" path="TextEditor.js"/>
    <xml id="editor" path="tab_texteditor.xml"/>

    <xml id="cssmenu">
      <data>
        <object xmlns="urn:tibco.com/v3.0" type="jsx3.gui.Menu">
          <variants jsxxmlasync="1"/>
          <strings jsxdisplay="none" jsxname="jsxmenu_typeaheadcss" jsxxmlurl="menu-css.xml"/>
          <events jsxexecute="jsx3.ide.doInsertCode(objRECORD,this.getContextParent(),'css');"/>
        </object>
      </data>
    </xml>
  </resources>

  <extension point="jsx3.ide.editor.type">
    <type class="jsx3.ide.TextEditor" default="true">
      <filetype id="txt"/>
    </type>
  </extension>
  
</plugin>
  <plugin id="jsx3.ide.editor.xml" name="XML Editor Plug-In" property="XmlEditorPlugin" version="0.1" xmlns="http://www.generalinterface.org/gi/amp" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.generalinterface.org/gi/amp http://www.generalinterface.org/xsd/plugin.xsd">

  <script><![CDATA[
    this.loaded().when(jsx3.$F(function() {
      this.loadRsrcComponent("menus", this.getServer().getRootBlock());
    }).bind(this));
  ]]></script>

  <requires>
    <plugin id="jsx3.ide.editor.text"/>
    <plugin id="jsx3.gui.Menu"/>
  </requires>

  <resources>
    <script id="js" path="XmlEditor.js"/>
    <xml id="editor" path="tab_xmleditor.xml"/>
    <xml id="mode_readonly" load="manual" path="text-xmlro.xml"/>

    <xml id="menus">
      <data>
        <serialization xmlns="urn:tibco.com/v3.0">
          <object type="jsx3.gui.Menu">
            <variants jsxxmlasync="1"/>
            <strings jsxdisplay="none" jsxname="jsxmenu_typeaheadxsl" jsxxmlurl="menu-xml.xml"/>
            <events jsxexecute="jsx3.ide.doInsertCode(objRECORD,this.getContextParent(),'xsl');"/>
          </object>
          <object type="jsx3.gui.Menu">
            <variants jsxxmlasync="1"/>
            <strings jsxdisplay="none" jsxname="jsxmenu_typeaheadxml" jsxxmlurl="menu-xsl.xml"/>
            <events jsxexecute="jsx3.ide.doInsertCode(objRECORD,this.getContextParent(),'xml');"/>
          </object>
        </serialization>
      </data>
    </xml>
  </resources>

  <extension point="jsx3.ide.editor.type">
    <type class="jsx3.ide.XmlEditor">
      <filetype id="xml"/>
      <filetype id="xsl"/>
    </type>
  </extension>
  
</plugin>
  <plugin id="jsx3.ide.editor.cache" name="Cache Editor Plug-In" property="CacheEditorPlugin" version="0.1" xmlns="http://www.generalinterface.org/gi/amp" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.generalinterface.org/gi/amp http://www.generalinterface.org/xsd/plugin.xsd">

  <requires>
    <plugin id="jsx3.ide.editor.xml"/>
  </requires>

  <resources>
    <script id="js" path="CacheEditor.js"/>
    <xml id="editor" path="editor.xml"/>
    <xml id="mode_readonly" load="manual" path="text-xmlro.xml"/>
  </resources>

  <extension point="jsx3.ide.editor.type">
    <type class="jsx3.ide.CacheEditor">
      <filetype id="cache"/>
    </type>
  </extension>
  
</plugin>
  <plugin id="jsx3.ide.log" name="System Log Plug-In" version="0.1" xmlns="http://www.generalinterface.org/gi/amp" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.generalinterface.org/gi/amp http://www.generalinterface.org/xsd/plugin.xsd">

  <requires>
  </requires>

  <resources>
    <script eval="true" id="js">
      <data><![CDATA[(function(r){var
ub={a:"closed",b:"bottom",c:"systemout",d:"window",e:"system_out",f:"dialog",g:"100%",h:"clear",i:"close",j:"pane",k:"as_dialog",l:"location",m:"_destroySystemOut ",n:" ",o:"as_window",p:"_systemOutDidOpen ",q:"jsx_ide_quadrant_q5",r:"as_pane",s:"memory",t:"ide",u:"jsx3.ide.SystemLogHandler",v:"beep",w:"sounds/beep4.wav"};(jsx3.$O(r)).extend({isOpen:function(){var
t=this._getSystemOutLocation();if(t==ub.a)return false;if(t==ub.b){var
Va=this._getSystemOut();var
Bb=Va.getAncestorOfType(jsx3.gui.Splitter);return Bb&&parseInt(Bb.getSubcontainer1Pct())<100;}return true;},toggleSystemOut:function(){try{var
z=this._getSystemOutLocation();var
Ca=this._getSystemOut();if(z==ub.a){var
M=jsx3.ide.getIDESettings();var
Kb=M.set(ub.c,ub.a,false);this._systemOutStartup(true);}else if(z==ub.d){var
X=(this.getServer()).getAppWindow(ub.e);if(X!=null&&X.isOpen())X.focus();}else if(z==ub.f){if(Ca.isFront())Ca.doToggleState(jsx3.gui.Dialog.MINIMIZED);else Ca.focus();}else if(z==ub.b){var
x=Ca.getAncestorOfType(jsx3.gui.Splitter);if(x&&parseInt(x.getSubcontainer1Pct())>95)x.setSubcontainer1Pct(x.jsxdefault1pct,true);else x.setSubcontainer1Pct(ub.g,true);}}catch(Nb){window.alert(Nb.message);}},onLogMenu:function(p){if(p==ub.h)this._clearSystemOut();},setDocking:function(a){if(a==ub.i)this._closeSystemOut();else if(a==ub.j)this._setSystemOutLocation(ub.b);else this._setSystemOutLocation(a);},_setSystemOutLocation:function(h){var
M=this._getSystemOutLocation();var
Cb=this._getSystemOut();if(h==M)return;var
Na=false;if(h==ub.d){this._openSystemOutWindow();}else if(h==ub.f){var
mb=(this.getServer()).getRootBlock();((this.getResource(ub.k)).load()).when((jsx3.$F(function(){this._Q=this.loadRsrcComponent(ub.k,mb);(Cb.getBlock()).transfer(this._Q.getBlock());this._restoreSystemOutFloatState(this._Q);this._destroySystemOut(M,Cb);})).bind(this));}else if(h==ub.b){this._openSystemOutBottom(Cb);this._destroySystemOut(M,Cb);}var
ja=jsx3.ide.getIDESettings();ja.set(ub.c,ub.l,h);},_destroySystemOut:function(a,m){(this.getLog()).debug(ub.m+a+ub.n+(m?m.getId():m));if(a==ub.d){var
Wa=(this.getServer()).getAppWindow(ub.e);if(Wa!=null&&Wa.isOpen())Wa.close();}else if(a==ub.b){this._closeSystemOutBottom(m);}else if(a==ub.f)jsx3.sleep(function(){(m.getParent()).removeChild(m);});},_getSystemOutLocation:function(){var
K=this._getSystemOut();if(K!=null)return K.getName();return ub.a;},onLoaded:function(){this._systemOutStartup();},_systemOutStartup:function(a){var
Oa=jsx3.ide.getIDESettings();var
ea=Oa.get(ub.c,ub.l);if(a||!Oa.get(ub.c,ub.a)){if(ea==ub.d){this._openSystemOutWindow();}else if(ea==ub.f){var
oa=(this.getServer()).getRootBlock();((this.getResource(ub.k)).load()).when((jsx3.$F(function(){this._Q=this.loadRsrcComponent(ub.k,oa);this._restoreSystemOutFloatState(this._Q,Oa);this._Q.focus();})).bind(this));}else this._openSystemOutBottom();this._copyFromMemoryToOut();}},_openSystemOutWindow:function(){var
V=(this.getServer()).getAppWindow(ub.e);if(V==null){((this.getResource(ub.o)).load()).when((jsx3.$F(function(){V=(this.getServer()).loadAppWindow((this.getResource(ub.o)).getData(),this);V.getPlugIn=(jsx3.$F(function(){return this;})).bind(this);if(V.onRsrcLoad)V.onRsrcLoad();V.subscribe(jsx3.gui.Window.DID_OPEN,this,this._systemOutDidOpen);V.subscribe(jsx3.gui.Window.WILL_CLOSE,this,this._systemOutWillClose);V.subscribe(jsx3.gui.Window.DID_FOCUS,this,this._systemOutDidFocus);if(!V.isOpen())V.open();})).bind(this));}else if(!V.isOpen())V.open();},_systemOutDidOpen:function(f){(this.getLog()).debug(ub.p+f.target.getName());var
pa=f.target;var
Jb=this._getSystemOut();var
Hb=pa.getRootBlock();if(Jb!=null){(Jb.getBlock()).transfer(Hb.getBlock());this._destroySystemOut(this._getSystemOutLocation(),Jb);}else (Hb.getBlock()).clear();this._restoreSystemOutWindowState(pa);pa.focus();this._Q=Hb;},_systemOutWillClose:function(j){this._saveSystemOutWindowState(j.target);if(this._getSystemOutLocation()==ub.d)this._Q=null;},_systemOutDidFocus:function(q){this._saveSystemOutWindowState(q.target);},_getSystemOut:function(){var
Ca=null;try{Ca=this._Q;if(Ca!=null&&Ca.getName()==ub.d){var
A=(this.getServer()).getAppWindow(ub.e);if(A==null||!A.isOpen())Ca=this._Q=null;}}catch(Kb){Ca=this._Q=null;}return Ca;},_clearSystemOut:function(){var
V=this._getSystemOut();if(V!=null)(V.getBlock()).clear();},_closeSystemOut:function(i){if(!i){var
za=this._getSystemOut();var
M=this._getSystemOutLocation();if(M==ub.d)jsx3.sleep((jsx3.$F(function(){var
zb=(this.getServer()).getAppWindow(ub.e);if(zb!=null&&zb.isOpen())zb.close();})).bind(this));else if(M==ub.b)this._closeSystemOutBottom(za);else jsx3.sleep(function(){(za.getParent()).removeChild(za);});this._Q=null;}var
Gb=jsx3.ide.getIDESettings();Gb.set(ub.c,ub.a,true);},_openSystemOutBottom:function(s){var
Lb=(this.getServer()).getJSXByName(ub.q);((this.getResource(ub.r)).load()).when((jsx3.$F(function(){this._Q=this.loadRsrcComponent(ub.r,Lb);if(s){s.getBlock();this._Q.getBlock();(s.getBlock()).transfer(this._Q.getBlock());}var
za=Lb.getAncestorOfType(jsx3.gui.Splitter);if(za&&parseInt(za.getSubcontainer1Pct())>95)za.setSubcontainer1Pct(za.jsxdefault1pct,true);})).bind(this));},_copyFromMemoryToOut:function(){var
oa=jsx3.util.Logger.Manager.getManager();var
ba=oa.getHandler(ub.s);var
ta=oa.getHandler(ub.t);if(ba&&ta){var
sa=ba.getRecords();for(var
ea=0;ea<sa.length;ea++)ta.handle(sa[ea]);}},_closeSystemOutBottom:function(i){var
sa=i.getAncestorOfType(jsx3.gui.Splitter);if(sa)sa.setSubcontainer1Pct(ub.g,true);jsx3.sleep(function(){(i.getParent()).removeChild(i);});},saveSystemOutFloatState:function(a){var
kb=jsx3.ide.getIDESettings();var
Nb={left:a.getLeft(),top:a.getTop(),width:a.getWidth(),height:a.getHeight()};kb.set(ub.c,ub.f,Nb);},_saveSystemOutWindowState:function(o){var
B=null;if(arguments.length>=4)B={left:arguments[0],top:arguments[1],width:arguments[2],height:arguments[3]};else if(o.isOpen())B={left:o.getOffsetLeft(),top:o.getOffsetTop(),width:o.getWidth(),height:o.getHeight()};if(B){var
ib=jsx3.ide.getIDESettings();ib.set(ub.c,ub.d,B);}},_restoreSystemOutFloatState:function(s,i){if(i==null)i=jsx3.ide.getIDESettings();var
W=i.get(ub.c,ub.f);if(W&&W.left){s.setDimensions(W.left,W.top,W.width,W.height,true);s.constrainPosition();}},_restoreSystemOutWindowState:function(c,s){if(s==null)s=jsx3.ide.getIDESettings();var
ya=s.get(ub.c,ub.d);if(ya&&ya.left){c.moveTo(ya.left,ya.top);c.setWidth(ya.width);c.setHeight(ya.height);c.constrainToScreen();}},updateLoggerMenu:function(k){var
Ta=(jsx3.util.Logger.Manager.getManager()).getHandler(ub.t);if(Ta)k.selectItem(Ta.getLevel(),true);},updateLoggerLevelOnMenu:function(c){var
oa=(jsx3.util.Logger.Manager.getManager()).getHandler(ub.t);if(oa)oa.setLevel(c);}});jsx3.Class.defineClass(ub.u,jsx3.util.Logger.FormatHandler,null,function(n,e){e.y8=1000;e.init=function(j){this.jsxsuper(j);this.y8=null;this.mx=jsx3.util.Logger.OFF;jsx3.ide.registerSound(ub.v,(r.getServer()).resolveURI(ub.w));};e.handle=function(p){if(r.isLoaded()){var
R=r._getSystemOut();if(R){var
Z=R.getBlock();if(Z==null)return;var
Ba=jsx3.util.strEscapeHTML(this.format(p));if(this.y8){var
Ka=this.y8-1;if(Z.getSize()>Ka)R.shift(Z.getSize()-Ka);}Z.log(Ba,p.getLevel());if(p.getLevel()<=this.mx)jsx3.ide.playSound(ub.v);}}};e.getBufferSize=function(){return this.y8;};e.setBufferSize=function(j){if(jsx3.util.numIsNaN(j))this.y8=0;else this.y8=Math.max(0,j);};e.getBeepLevel=function(){return this.mx;};e.setBeepLevel=function(l){this.mx=l;};});jsx3.util.Logger.Handler.registerHandlerClass(jsx3.ide.SystemLogHandler.jsxclass);if(jsx3.app.Monitor)jsx3.app.Monitor.ideDidLoad();})(this);]]></data>
    </script>
    <xml id="ui">
      <data>
        <serialization xmlns="urn:tibco.com/v3.0">
  <onAfterDeserialize><![CDATA[objJSX.log=function(a,o){var
ea=this.getRendered();if(!ea)return;var
cb=o?" jsxide_"+jsx3.util.Logger.levelAsString(o):"";jsx3.html.insertAdjacentHTML(ea,"beforeEnd",'<pre class="jsxide_sysout'+cb+'">'+a+"</pre>");this.showLast();};objJSX.showLast=function(){var
Ja=this.getRendered();if(!this._scrollTOID&&Ja.lastChild&&Ja.scrollTop>=Ja.lastChild.offsetTop-parseInt(Ja.style.height)-2*Ja.lastChild.offsetHeight)this._scrollTOID=window.setTimeout((jsx3.$F(function(){this._scrollTOID=null;if(Ja&&Ja.lastChild)Ja.scrollTop=Ja.lastChild.offsetTop;})).bind(this),200);};objJSX.shift=function(h){if(h==null)h=1;var
sa=this.getRendered();for(var
jb=0;jb<h;jb++)sa.removeChild(sa.childNodes[0]);};objJSX.clear=function(q){this.setText("",false);if(this.getRendered())(this.getRendered()).innerHTML="";};objJSX.transfer=function(r){if(this.getRendered()){r.setText((this.getRendered()).innerHTML,true);this.showLast();}};objJSX.getSize=function(o){var
Ea=this.getRendered();return Ea.childNodes.length;};]]></onAfterDeserialize>
    <object type="jsx3.gui.Block">
      <dynamics jsxbgcolor="@Solid Light"/>
      <variants jsxfontsize="11" jsxoverflow="1"/>
      <strings jsxheight="100%" jsxmenu="jsxmenu_systemout" jsxname="jsx_ide_systemout" jsxpadding="2 4 2 4" jsxwidth="100%"/>
    </object>
</serialization>
      </data>
    </xml>
    <xml id="menu-docking">
      <data>
        <data xmlns="" jsxid="jsxroot">
  <record jsxgroupname="position" jsxid="pane" jsximg="jsxapp:/images/icon_50.gif" jsxtext="Bottom"/>
  <record jsxgroupname="position" jsxid="dialog" jsximg="jsxapp:/images/icon_32.gif" jsxtext="Floating"/>
  <record jsxgroupname="position" jsxid="window" jsximg="jsxapp:/images/icon_32.gif" jsxtext="Window"/>
  <record jsxdivider="1" jsxid="close" jsximg="jsxapp:/images/icon_55.gif" jsxtext="Close"/>
</data>
      </data>
    </xml>
    <xml id="menu-log">
      <data>
        <data xmlns="" jsxid="jsxroot">
  <record jsxid="clear" jsximg="jsxapp:/images/icon_94.gif" jsxtext="Clear Log"/>
</data>
      </data>
    </xml>
    <xml id="menu-logger">
      <data>
        <data xmlns="" jsxid="jsxroot">
  <record jsxgroupname="level" jsxid="0" jsxtext="OFF"/>
  <record jsxgroupname="level" jsxid="1" jsxtext="FATAL"/>
  <record jsxgroupname="level" jsxid="2" jsxtext="ERROR"/>
  <record jsxgroupname="level" jsxid="3" jsxtext="WARN"/>
  <record jsxgroupname="level" jsxid="4" jsxtext="INFO"/>
  <record jsxgroupname="level" jsxid="5" jsxtext="DEBUG"/>
  <record jsxgroupname="level" jsxid="6" jsxtext="TRACE"/>
</data>
      </data>
    </xml>
    <xml id="as_dialog" load="manual">
      <data>
        <serialization xmlns="urn:tibco.com/v3.0">
  <onAfterDeserialize><![CDATA[objJSX.getBlock=function(){if(this._jsxblock==null)this._jsxblock=this.getDescendantOfName("jsx_ide_systemout");return this._jsxblock;};objJSX.doMinimize=function(){this.doToggleState(jsx3.gui.Dialog.MINIMIZED);};objJSX.doCloseMe=function(){(this.getPlugIn()).setDocking("close");};objJSX.registerHotKey("doMinimize","m",false,true,false);objJSX.registerHotKey("doCloseMe","w",false,false,true);objJSX.onRsrcLoad=function(){(this.getPlugIn()).loadRsrcComponent("ui",dialog);};]]></onAfterDeserialize>
    <object type="jsx3.gui.Dialog">
      <dynamics jsxbgcolor="@Solid Medium"/>
      <variants jsxheight="350" jsxwidth="500"/>
      <strings jsxhelpid="ide.sysout" jsxname="dialog"/>
      <events jsxaftermove="this.constrainPosition();(this.getPlugIn()).saveSystemOutFloatState(this);" jsxafterresize="(this.getPlugIn()).saveSystemOutFloatState(this);" jsxdestroy=""/>
        <object type="jsx3.gui.WindowBar">
          <variants/>
          <strings jsxname="title" jsxtext="System Log"/>
            <object type="jsx3.gui.ToolbarButton">
              <dynamics jsxtip="_sysout_clear"/>
              <variants/>
              <strings jsximage="jsxapp:/images/icon_94.gif" jsxname="jsx_ide_sysout_clear"/>
              <events jsxexecute="(dialog.getBlock()).clear();"/>
            </object>
            <object type="jsx3.gui.Menu">
              <dynamics jsxtip="_sysout_docking"/>
              <variants jsxshare="1" jsxstate="0" jsxtype="0"/>
              <strings jsximage="jsxapp:/images/icon_81.gif" jsxmargin="2 5 0 0" jsxname="jsxmenu_sysoutdock" jsxxmlid="jsx3.ide.log.menu-docking"/>
              <events jsxexecute="(dialog.getPlugIn()).setDocking(strRECORDID);" jsxmenu="this.selectItem(&quot;dialog&quot;);"/>
            </object>
            <object type="jsx3.gui.Menu">
             <variants jsxshare="1"/>
             <strings jsximage="jsxapp:/images/icon_19.gif" jsxname="jsx_loglevel" jsxtext="" jsxtip="Adjust Log Level" jsxxmlid="jsx3.ide.log.menu-logger"/>
              <events jsxexecute="(dialog.getPlugIn()).updateLoggerLevelOnMenu(strRECORDID);" jsxmenu="(dialog.getPlugIn()).updateLoggerMenu(this);"/>
            </object>
            <object type="jsx3.gui.ToolbarButton">
              <dynamics jsximage="@Min Icon" jsxtip="jsx3.gui.Dialog.min"/>
              <variants/>
              <strings/>
              <events jsxexecute="((this.getParent()).getParent()).doToggleState();"/>
            </object>
            <object type="jsx3.gui.Menu">
              <variants jsxshare="1"/>
              <strings jsxdisplay="none" jsxname="jsxmenu_systemout" jsxxmlid="jsx3.ide.log.menu-log"/>
              <events jsxexecute="(dialog.getPlugIn()).onLogMenu(strRECORDID);"/>
            </object>
        </object>
    </object>
</serialization>
      </data>
    </xml>
    <xml id="as_pane" load="manual">
      <data>
        <serialization xmlns="urn:tibco.com/v3.0">
  <onAfterDeserialize><![CDATA[objJSX.getBlock=function(){if(this._jsxblock==null)this._jsxblock=this.getDescendantOfName("jsx_ide_systemout");return this._jsxblock;};objJSX.onRsrcLoad=function(){(this.getPlugIn()).loadRsrcComponent("ui",outHolder);};]]></onAfterDeserialize>
    <object type="jsx3.gui.Block">
      <variants jsxoverflow="2"/>
      <strings jsxheight="100%" jsxhelpid="ide.sysout" jsxname="bottom" jsxwidth="100%"/>
        <object type="jsx3.gui.LayoutGrid">
          <variants jsxleft="0" jsxoverflow="2" jsxrelativeposition="0" jsxtop="0"/>
          <strings jsxbgcolor="" jsxcols="39,*" jsxheight="100%" jsxwidth="100%"/>
            <object type="jsx3.gui.Block">
              <dynamics jsxbgcolor="@Solid Medium"/>
              <variants jsxoverflow="2"/>
              <strings jsxborder="0px;solid 1px #a8a8b5;0px;0px" jsxheight="100%" jsxname="jsxsysouttoolblock" jsxpadding="2" jsxwidth="100%"/>
                <object type="jsx3.gui.ToolbarButton">
                  <dynamics jsxtip="_sysout_clear"/>
                  <variants/>
                  <strings jsximage="jsxapp:/images/icon_94.gif" jsxmargin="0 0 4 0" jsxname="jsx_ide_sysout_clear"/>
                  <events jsxexecute="(bottom.getBlock()).clear();"/>
                </object>
                <object type="jsx3.gui.Menu">
                  <dynamics jsxtip="_sysout_docking"/>
                  <variants jsxshare="1" jsxstate="0" jsxtype="0"/>
                  <strings jsximage="jsxapp:/images/icon_81.gif" jsxmargin="0" jsxname="jsxmenu_sysoutdock" jsxxmlid="jsx3.ide.log.menu-docking"/>
                  <events jsxexecute="(bottom.getPlugIn()).setDocking(strRECORDID);" jsxmenu="this.selectItem(&quot;pane&quot;);"/>
                </object>
                <object type="jsx3.gui.Menu">
                 <variants jsxshare="1"/>
                 <strings jsximage="jsxapp:/images/icon_19.gif" jsxname="jsx_loglevel" jsxtext="" jsxtip="Adjust Log Level" jsxxmlid="jsx3.ide.log.menu-logger"/>
                 <events jsxexecute="(bottom.getPlugIn()).updateLoggerLevelOnMenu(strRECORDID);" jsxmenu="(bottom.getPlugIn()).updateLoggerMenu(this);"/>
                </object>
                <object type="jsx3.gui.Menu">
                  <variants jsxshare="1"/>
                  <strings jsxdisplay="none" jsxname="jsxmenu_systemout" jsxxmlid="jsx3.ide.log.menu-log"/>
                  <events jsxexecute="(bottom.getPlugIn()).onLogMenu(strRECORDID);"/>
                </object>
            </object>
            <object type="jsx3.gui.Block">
              <variants jsxoverflow="2"/>
              <strings jsxheight="100%" jsxwidth="100%"/>
                <object type="jsx3.gui.LayoutGrid">
                  <variants jsxrelativeposition="0"/>
                  <strings jsxheight="100%" jsxname="outHolder" jsxrows="17,*" jsxwidth="100%"/>
                    <object type="jsx3.gui.Block">
                      <variants jsxfontsize="10" jsxoverflow="2"/>
                      <strings jsxborder="0px;0px;dashed 1px #a8a8b5;0px" jsxfontweight="bold" jsxheight="100%" jsxname="title" jsxpadding="1 0 0 4" jsxtext="System Log" jsxwidth="100%"/>
                    </object>
                </object>
            </object>
        </object>
    </object>
</serialization>
      </data>
    </xml>
    <xml id="as_window" load="manual">
      <data>
        <serialization xmlns="urn:tibco.com/v3.0">
  <onAfterDeserialize><![CDATA[window.getBlock=function(){if(this._jsxblock==null)this._jsxblock=this.getDescendantOfName("jsx_ide_systemout");return this._jsxblock;};window.unfocusWindow=function(){var
Eb=this.getAncestorOfType(jsx3.gui.Window);if(Eb){var
Ya=Eb.getParentWindow();if(Ya)Ya.focus();}};window.registerHotKey("unfocusWindow","l",false,true,false);objJSX.onRsrcLoad=function(){(this.getPlugIn()).loadRsrcComponent("ui",windowlg);};]]></onAfterDeserialize>
    <object type="jsx3.gui.Window">
      <variants jsxdependent="0" jsxresizable="1" jsxscrollable="0"/>
      <strings jsxheight="400" jsxhelpid="ide.sysout" jsxname="system_out" jsxtitle="System Log" jsxwidth="500"/>
        <object type="jsx3.gui.Block">
          <variants jsxleft="0" jsxoverflow="3" jsxrelativeposition="0" jsxtop="0"/>
          <strings jsxheight="100%" jsxname="window" jsxwidth="100%"/>
            <object type="jsx3.gui.LayoutGrid">
              <variants jsxleft="0" jsxoverflow="3" jsxrelativeposition="0" jsxtop="0"/>
              <strings jsxheight="100%" jsxname="windowlg" jsxrows="26,*" jsxwidth="100%"/>
                <object type="jsx3.gui.WindowBar">
                  <variants jsxbartype="1"/>
                  <strings jsxname="title" jsxtext="System Log" jsxtextalign="right"/>
                    <object type="jsx3.gui.ToolbarButton">
                      <dynamics jsxtip="_sysout_clear"/>
                      <variants/>
                      <strings jsximage="jsxapp:/images/icon_94.gif" jsxname="jsx_ide_sysout_clear"/>
                      <events jsxexecute="(window.getBlock()).clear();"/>
                    </object>
                    <object type="jsx3.gui.Menu">
                      <dynamics jsxtip="_sysout_docking"/>
                      <variants jsxshare="1" jsxstate="0" jsxtype="0"/>
                      <strings jsximage="jsxapp:/images/icon_81.gif" jsxmargin="2 5 0 0" jsxname="jsxmenu_sysoutdock" jsxxmlid="jsx3.ide.log.menu-docking"/>
                      <events jsxexecute="(system_out.getPlugIn()).setDocking(strRECORDID);" jsxmenu="this.selectItem(&quot;window&quot;);"/>
                    </object>
                    <object type="jsx3.gui.Menu">
                     <variants jsxshare="1"/>
                     <strings jsximage="jsxapp:/images/icon_19.gif" jsxname="jsx_loglevel" jsxtext="" jsxtip="Adjust Log Level" jsxxmlid="jsx3.ide.log.menu-logger"/>
                      <events jsxexecute="(system_out.getPlugIn()).updateLoggerLevelOnMenu(strRECORDID);" jsxmenu="(system_out.getPlugIn()).updateLoggerMenu(this);"/>
                    </object>
                    <object type="jsx3.gui.Menu">
                      <variants jsxshare="1"/>
                      <strings jsxdisplay="none" jsxname="jsxmenu_systemout" jsxxmlid="jsx3.ide.log.menu-log"/>
                      <events jsxexecute="(system_out.getPlugIn()).onLogMenu(strRECORDID);"/>
                    </object>
                </object>
            </object>
        </object>
    </object>
</serialization>
      </data>
    </xml>
  </resources>

  <extension id="menu.palettes" point="jsx3.ide.ui.action">
    <action execute="this.getPlugIn().toggleSystemOut();" hkconfig="true" hotkey="{hk.syslog}" id="jsx3.ide.syslog" label="System Log" menupath="/jsx3.ide.palettes/misc" selected="eval" selected-eval="this.getPlugIn().isOpen &amp;&amp; this.getPlugIn().isOpen()"/>
  </extension>

</plugin>
  <plugin id="jsx3.ide.apidoc" name="API Documentation Plug-In" version="0.1" xmlns="http://www.generalinterface.org/gi/amp" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.generalinterface.org/gi/amp http://www.generalinterface.org/xsd/plugin.xsd">

  <method id="addIndexFile" params="strPath"><![CDATA[
    this.getIndexFiles().push(strPath);
  ]]></method>

  <method id="getIndexFiles"><![CDATA[
    if (!this._indexes)
      this._indexes = jsx3.$A();
    return this._indexes;
  ]]></method>

  <method id="onRegister"><![CDATA[
    this.getExtPoint("index").processExts(jsx3.$F(function(ext, xml) {
      this.addIndexFile(ext.getPlugIn().resolveURI(xml.value()));
    }).bind(this));

    this.subscribe(jsx3.amp.PlugIn.EXTENDED, this, "_onExt");
  ]]></method>

  <method id="_onExt" params="objEvent"><![CDATA[
    if (objEvent.extpt.getLocalId() == "index") {
      objEvent.extpt.processExts(jsx3.$F(function(ext, xml) {
        this.addIndexFile(ext.getPlugIn().resolveURI(xml.value()));
      }).bind(this), objEvent.exts);
    }
  ]]></method>

  <method id="isInstalled"><![CDATA[
    return this.getIndexFiles().find(function(e) {
      return jsx3.ide.getSystemRelativeFile(e).isFile();
    }) != null;
  ]]></method>

  <method id="openDoc"><![CDATA[
    this._open(false);
  ]]></method>

  <method id="_open" params="bWindow"><![CDATA[
    this.load().when(jsx3.$F(function() {
      this.openApiHelp(bWindow);
    }).bind(this));
  ]]></method>

  <requires>
    <plugin id="jsx3.gui.BlockX"/>
    <plugin id="jsx3.gui.Matrix"/>
    <plugin id="jsx3.gui.ImageButton"/>
  </requires>

  <resources>
    <propsbundle id="strings" load="early" path="strings.xml"/>
    <script eval="true" id="js" path="apidoc.js"/>
    <xml id="ui" path="apihelp.xml">
      <prereq id="class-tree"/>
      <prereq id="member-list"/>
      <prereq id="content"/>
      <prereq id="search-results"/>
    </xml>
    <script id="ApiSearcher" load="manual" path="ApiSearcher.js"/>
    <xml id="as_dialog" load="manual" path="as_dialog.xml">
      <prereq id="menu-settings"/>
    </xml>
    <xml id="as_window" load="manual" path="as_window.xml">
      <prereq id="menu-settings"/>
    </xml>

    <xml id="menu-settings" load="manual" path="settings.xml"/>
    <xsl id="class-tree" load="manual" path="xsl/class-tree.xsl"/>
    <xsl id="content" load="manual" path="xsl/content.xsl"/>
    <xsl id="member-list" load="manual" path="xsl/member-list.xsl"/>
    <xsl id="search-results" load="manual" path="xsl/search-results.xsl"/>
  </resources>

  <!-- Displays JSXDOC repositories in the API Documentation dialog -->
  <extension-point id="index">
    <!-- Expects any number of path elements. The body of the path element is taken as the relative
         path from the plug-in directory to the XML file that is a JSXDOC index file. -->
  </extension-point>

  <extension point="jsx3.ide.apidoc.index">
    <path>jsx:/../api/xml/index.xml</path>
  </extension>

  <extension id="menus" point="jsx3.ide.ui.menu">
    <menu id="jsx3.ide.apidoc" label="{jsx3.ide.apidoc.m1}" path="/jsx3.ide.help/apisub">
      <section id="api"/>
      <divider id="ide"/>
      <section id="additions"/>
    </menu>
  </extension>

  <extension id="menu.help" point="jsx3.ide.ui.action">
    <action execute="jsx3.ide.openUserGuides();" hkconfig="true" id="jsx3.ide.help1_2" img="jsxapp:/images/icon_59.gif" label="{jsx3.ide.apidoc.mi1}" menupath="/jsx3.ide.help/api"/>
    <action enabled="eval" enabled-eval="this.getPlugIn().isInstalled()" execute="this.getPlugIn()._open();" hkconfig="true" hotkey="{hk.api}" id="jsx3.ide.help1" label="{jsx3.ide.apidoc.mi2}" menupath="/jsx3.ide.help/jsx3.ide.apidoc/api"/>
    <action enabled="eval" enabled-eval="this.getPlugIn().isInstalled()" execute="this.getPlugIn()._open(false);" hkconfig="true" id="jsx3.ide.help2" label="{jsx3.ide.apidoc.mi3}" menupath="/jsx3.ide.help/jsx3.ide.apidoc/api"/>
    <action enabled="eval" enabled-eval="this.getPlugIn().isInstalled()" execute="this.getPlugIn()._open(true);" hkconfig="true" id="jsx3.ide.help3" label="{jsx3.ide.apidoc.mi4}" menupath="/jsx3.ide.help/jsx3.ide.apidoc/api"/>
    <action enabled="file" enabled-file="../api/html/index.html" execute="jsx3.ide.openConsoleWindow('api/html/index.html', 'jsxide_api',null,null,'yes','yes','yes','yes','yes')" hkconfig="true" id="jsx3.ide.help4" label="{jsx3.ide.apidoc.mi5}" menupath="/jsx3.ide.help/jsx3.ide.apidoc/api"/>

    <action enabled="file" enabled-file="../api/properties/index.html" execute="jsx3.ide.openConsoleWindow('api/properties/index.html', 'jsxide_props',null,null,'yes','yes','yes','yes','yes')" hkconfig="true" id="jsx3.ide.help5" label="{jsx3.ide.apidoc.mi6}" menupath="/jsx3.ide.help/jsx3.ide.apidoc/ide"/>
    <action enabled="file" enabled-file="../api/events/index.html" execute="jsx3.ide.openConsoleWindow('api/events/index.html', 'jsxide_events',null,null,'yes','yes','yes','yes','yes')" hkconfig="true" id="jsx3.ide.help6" label="{jsx3.ide.apidoc.mi7}" menupath="/jsx3.ide.help/jsx3.ide.apidoc/ide"/>
    <action enabled="file" enabled-file="../api/xslparams/index.html" execute="jsx3.ide.openConsoleWindow('api/xslparams/index.html', 'jsxide_xslparams',null,null,'yes','yes','yes','yes','yes')" hkconfig="true" id="jsx3.ide.help7" label="{jsx3.ide.apidoc.mi8}" menupath="/jsx3.ide.help/jsx3.ide.apidoc/ide"/>
  </extension>

</plugin>
  <plugin class="jsx3.ide.ui.DialogToolPlugIn" id="jsx3.ide.colorpicker" name="Color Picker Plug-In" version="0.1" xmlns="http://www.generalinterface.org/gi/amp" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.generalinterface.org/gi/amp http://www.generalinterface.org/xsd/plugin.xsd">

  <requires>
    <plugin id="jsx3.ide.ui"/>
    <plugin id="jsx3.gui.ColorPicker"/>
    <plugin id="jsx3.gui.RadioButton"/>
    <plugin id="jsx3.gui.TextBox"/>
    <plugin id="jsx3.gui.ImageButton"/>
  </requires>

  <resources>
    <xml id="ui" path="colorpicker.xml"/>
  </resources>

  <extension id="menu.help" point="jsx3.ide.ui.action">
    <action execute="this.getPlugIn().openTool();" hkconfig="true" id="jsx3.ide.colorpicker" img="jsxapp:/images/prototypes/colorpicker.gif" label="Color Picker..." menupath="/jsx3.ide.tools/ide"/>
  </extension>

</plugin>
  <plugin class="jsx3.ide.ui.DialogToolPlugIn" id="jsx3.ide.deploytool" name="Deployment Tool Plug-In" version="0.1" xmlns="http://www.generalinterface.org/gi/amp" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.generalinterface.org/gi/amp http://www.generalinterface.org/xsd/plugin.xsd">

  <method id="createLaunchPage" params="objFile, bXHTML"><![CDATA[
    var jsFile = jsx3.ide.getSystemRelativeFile('JSX/js/JSX30.js');
    var template = jsx3.ide.getSystemRelativeFile(this.resolveURI('launch_page_template.' + (bXHTML ? 'xhtml' : 'html')));
    var content = template.read();
    var apppath = objFile.toURI().relativize(jsx3.ide.getActiveProjectDirectory().toURI());
    if (apppath == "") apppath = ".";

    content = content.replace(/@JSPATH@/g, objFile.relativePathTo(jsFile));
    content = content.replace(/@APPPATH@/g, apppath);

    jsx3.ide.writeUserFile(objFile, content);
  ]]></method>

  <requires>
    <plugin id="jsx3.ide.ui"/>
  </requires>

  <resources>
    <xml id="ui" path="launchutil.xml"/>
  </resources>

  <extension id="menu.help" point="jsx3.ide.ui.action">
    <action enabled="project" execute="this.getPlugIn().openTool();" hkconfig="true" id="jsx3.ide.launchpage" label="Deployment Utility..." menupath="/jsx3.ide.project/settings" tip="Create a launch page or launch HTML fragment"/>
  </extension>

</plugin>
  <plugin class="jsx3.ide.ui.DialogToolPlugIn" id="jsx3.ide.evaluator" name="JavaScript Evaluator Plug-In" version="0.1" xmlns="http://www.generalinterface.org/gi/amp" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.generalinterface.org/gi/amp http://www.generalinterface.org/xsd/plugin.xsd">

  <script><![CDATA[

var maxSize = 15;

this.isMultiInstance = function() {
  return true;
};

this.doScriptletExecute = function(objDialog) {
  var scriptletInput = objDialog.getDescendantOfName('jsx_txt_scriptlet_input');
  var scriptlet = scriptletInput.getValue();
  var resultArea = objDialog.getDescendantOfName('jsx_txt_scriptlet_output');

  var result = "undefined";
  try {
    result = jsx3.eval(scriptlet);
  } catch (e) {
    e = jsx3.NativeError.wrap(e);
    result = e.printStackTrace();
    this.getLog().error(e.toString(), e);
  } finally {
    var sResult = null;
    if (typeof(result) == "object" && result == null)
      sResult = "null";
    else if (result == null || typeof(result) == "undefined")
      sResult = "undefined";
    else
      sResult = result.toString();

    resultArea.setValue(sResult);
    this.storeScriptlet(objDialog, scriptlet);
  }
};

this.doScriptletHistory = function(objDialog, strHistoryId) {
  var menu = objDialog.getDescendantOfName('jsx_tbb_history');
  var record = menu.getRecord(strHistoryId);
  var scriptletInput = objDialog.getDescendantOfName('jsx_txt_scriptlet_input');
  scriptletInput.setValue(record.script);
};

this.getHistory = function() {
  var settings = jsx3.ide.getIDESettings();
  return settings.get("scriptlet", "history") || [];
};

this.setHistory = function(h) {
  var settings = jsx3.ide.getIDESettings();
  if (h)
    if (h.length > maxSize) h.splice(0, h.length - maxSize);
  settings.set("scriptlet", "history", h);
};

this.storeScriptlet = function(objDialog, strScriptlet) {
  if (! strScriptlet.match(/\S/)) return;

  var saved = this.getHistory();
  saved.push(strScriptlet);
  this.setHistory(saved);

  var menu = objDialog.getDescendantOfName('jsx_tbb_history');

  var xml = menu.getXML();
  var root = xml.getRootNode();
  var children = root.getChildNodes();

  var lastScript = children.get(0);

  if (lastScript != null && lastScript.getAttribute('script') == strScriptlet) {
    // skip insert
  } else {
    var oldestScript = null;
    if (children.size() >= maxSize) {
      oldestScript = root.getLastChild();
      root.removeChild(oldestScript);
    }

    var record = root.createNode(jsx3.xml.Entity.TYPEELEMENT, "record");

    record.setAttribute("jsxid", oldestScript != null ?
        oldestScript.getAttribute('jsxid') : children.size());
    record.setAttribute("jsxtext", jsx3.util.strTruncate(strScriptlet, 60, null, 2/3));
    record.setAttribute("script", strScriptlet);
    if (record.getAttribute("jsxtext").length < strScriptlet.length)
      record.setAttribute("jsxtip", strScriptlet);

    root.insertBefore(record, root.getFirstChild());

    menu.clearCachedContent();
  }
};

  ]]></script>

  <requires>
    <plugin id="jsx3.ide.ui"/>
    <plugin id="jsx3.amp.util.toolbarmgr"/>
  </requires>

  <resources>
    <xml id="ui" path="scriptlet.xml"/>
  </resources>

  <extension id="menu.help" point="jsx3.ide.ui.action">
    <action execute="this.getPlugIn().openTool();" hkconfig="true" hotkey="{hk.script}" id="jsx3.ide.scriptlet" img="jsxapp:/images/icon_38.gif" label="JavaScript Test Utility..." menupath="/jsx3.ide.tools/ide"/>
  </extension>

  <!-- Toolbar buttons, etc -->
  <extension-point id="toolbar">
    <processor instance-class="jsx3.amp.util.ToolbarItem" type="instantiator"/>
  </extension-point>

  <extension point="jsx3.ide.evaluator.toolbar">
    <button execute="this.getPlugIn().doScriptletExecute(item.getAncestorOfType(jsx3.gui.Dialog));" id="eval" img="jsxapp:/images/icon_9.gif" section="eval" tip="Evaluate the contents of the script input area"/>
    <native xmlns="urn:tibco.com/v3.0" id="history" section="history">
      <object type="jsx3.gui.Menu">
        <dynamics jsxtext="_script_history"/>
        <strings jsximage="jsxapp:/images/icon_54.gif" jsxname="jsx_tbb_history"/>
        <events jsxexecute="this.getAncestorOfType(jsx3.gui.Dialog)._doScriptletHistory(strRECORDID);"/>
      </object>
    </native>
  </extension>

</plugin>
  <plugin class="jsx3.ide.ui.DialogToolPlugIn" id="jsx3.ide.find" name="Find and Replace Plug-In" version="0.1" xmlns="http://www.generalinterface.org/gi/amp" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.generalinterface.org/gi/amp http://www.generalinterface.org/xsd/plugin.xsd">

  <!-- ctrl+f should advance the search if dialog is front -->
  
  <requires>
    <plugin id="jsx3.ide.ui"/>
  </requires>

  <resources>
    <xml id="ui" path="findreplace.xml"/>
  </resources>

  <subscribe event="jsx3.ide.editor.activeChanged                     jsx3.ide.editor.modeChanged"><![CDATA[
    var dialog = this.getSingleInstance();
    if (dialog) {
      jsx3.sleep(function() {
        var e = jsx3.ide.getActiveEditor();
        dialog.updateButtonState(e && e.canSearch());
      });
    }
  ]]></subscribe>

  <extension id="menu.help" point="jsx3.ide.ui.action">
    <action enabled="project" execute="this.getPlugIn().openTool();" hkconfig="true" hotkey="{hk.find}" id="jsx3.ide.find" img="jsxapp:/images/icon_4.gif" label="Find and Replace..." menupath="/jsx3.ide.tools/ide"/>
  </extension>

</plugin>
  <plugin class="jsx3.ide.ui.DialogToolPlugIn" id="jsx3.ide.ui.license" name="License Dialog Plug-In" version="0.1" xmlns="http://www.generalinterface.org/gi/amp" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.generalinterface.org/gi/amp http://www.generalinterface.org/xsd/plugin.xsd">

  <method id="agree" params="objDialog"><![CDATA[
    objDialog.doClose();
    jsx3.ide._startJobs();
  ]]></method>

  <method id="disagree" params="objDialog"><![CDATA[
    window.onbeforeunload = null;
    window.location.href = "http://www.generalinterface.org/alias/decline_license";
  ]]></method>

  <requires>
    <plugin id="jsx3.ide.ui"/>
  </requires>

  <resources>
    <xml id="ui" path="license.xml"/>
  </resources>

  <extension id="menu.help" point="jsx3.ide.ui.action">
    <action enabled="file" enabled-file="../legal/license.txt" execute="this.getPlugIn().openTool()" id="jsx3.ide.help1_6" label="License Agreement" menupath="/jsx3.ide.help/license"/>
  </extension>

</plugin>
  <plugin class="jsx3.ide.ui.DialogToolPlugIn" id="jsx3.ide.xsltool" name="XSLT Merge Tool Plug-In" version="0.1" xmlns="http://www.generalinterface.org/gi/amp" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.generalinterface.org/gi/amp http://www.generalinterface.org/xsd/plugin.xsd">

  <requires>
    <plugin id="jsx3.ide.ui"/>
    <plugin id="jsx3.gui.Button"/>
    <plugin id="jsx3.gui.ToolbarButton"/>
    <plugin id="jsx3.gui.RadioButton"/>
    <plugin id="jsx3.gui.Select"/>
    <plugin id="jsx3.gui.TabbedPane"/>
  </requires>

  <resources>
    <xml id="ui" path="merge.xml"/>
  </resources>

  <extension id="menu.help" point="jsx3.ide.ui.action">
    <action enabled="project" execute="this.getPlugIn().openTool()" hkconfig="true" id="jsx3.ide.merge" img="jsxapp:/images/icon_34.gif" label="XML/XSL Merge Tool..." menupath="/jsx3.ide.tools/ide"/>
  </extension>

</plugin>
  <plugin class="jsx3.ide.ui.DialogToolPlugIn" id="jsx3.ide.welcome" name="Welcome Dialog Plug-In" version="0.1" xmlns="http://www.generalinterface.org/gi/amp" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.generalinterface.org/gi/amp http://www.generalinterface.org/xsd/plugin.xsd">

  <requires>
    <plugin id="jsx3.ide"/> <!-- for CSS -->
    <plugin id="jsx3.ide.ui"/>
    <plugin id="jsx3.amp.util.menumgr"/>
    <plugin id="jsx3.gui.ImageButton"/>
  </requires>

  <resources>
    <xml id="ui" path="welcome.xml"/>
  </resources>

  <extension id="menu.help" point="jsx3.ide.ui.action">
    <action execute="this.getPlugIn().openTool();" hkconfig="true" id="jsx3.ide.help1_4" label="Welcome Screen" menupath="/jsx3.ide.help/about"/>
  </extension>

</plugin>
  <plugin id="jsx3.ide.debugger" name="Debugger Plug-In" version="0.1" xmlns="http://www.generalinterface.org/gi/amp" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.generalinterface.org/gi/amp http://www.generalinterface.org/xsd/plugin.xsd">

  <method id="isSupported"><![CDATA[
    return Boolean(jsx3.CLASS_LOADER.IE);
  ]]></method>

  <method id="_doScriptletStepThrough" params="objDialog"><![CDATA[
    var scriptletInput = objDialog.getDescendantOfName('jsx_txt_scriptlet_input');
    var scriptlet = scriptletInput.getValue();

    this.load().when(jsx3.$F(function(e) {
      this.debug(scriptlet);
    }).bind(this));
  ]]></method>

  <requires>
  </requires>

  <resources>
    <script eval="true" id="js" path="Debugger.js"/>
  </resources>

  <extension point="jsx3.ide.evaluator.toolbar">
    <button enabled="this.getPlugIn().isSupported()" execute="this.getPlugIn()._doScriptletStepThrough(item.getAncestorOfType(jsx3.gui.Dialog));" id="debug" img="jsxapp:/images/icon_8.gif" section="eval" tip="Use the step-through debugger (IE Only)"/>
  </extension>
  
</plugin>
  <plugin id="jsx3.ide.palette.prototypes" name="Prototypes Palette Plug-In" version="0.1" xmlns="http://www.generalinterface.org/gi/amp" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.generalinterface.org/gi/amp http://www.generalinterface.org/xsd/plugin.xsd">

  <method id="getPalette"><![CDATA[
    return this.getEngine().getPlugIn("jsx3.ide.ui").getPalette(this, "complibs.palette");
  ]]></method>

  <method id="getPrototypesTree"><![CDATA[
    var p = this.getPalette();
    if (p) {
      var ui = p.getUIObject();
      if (ui) {
        return ui.getTree();
      }
    }
    return null;
  ]]></method>

  <method id="addFolder" params="path, resolver, label">
    if (!this._otherFolders)
      this._otherFolders = jsx3.$A();
    this._otherFolders.push({path:path, resolver:resolver, label:label});
  </method>

  <method id="onLoaded" params="">
    this.getExtPoint("folder").processExts(jsx3.$F(function(ext, xml) {
      this.addFolder(xml.attr("path"), ext.getPlugIn(), xml.attr("label"));
    }).bind(this));
  </method>

  <requires>
    <plugin id="jsx3.ide.ui"/>
    <plugin id="jsx3.amp.util.menumgr"/>
    <plugin id="jsx3.amp.util.toolbarmgr"/>
    <plugin id="jsx3.gui.Tree"/>
    <plugin id="jsx3.gui.ToolbarButton"/>
  </requires>

  <resources>
    <script eval="true" id="js" path="prototypes.js"/>
    <xml id="ui" path="prototypes.xml">
      <prereq id="js"/>
    </xml>
  </resources>

  <event id="reloaded"/>
  <event id="selection">
    <param id="value"/>
  </event>

  <subscribe event="jsx3.ide.editor.activeChanged                     jsx3.ide.editor.modeChanged"><![CDATA[
    var content = this.getPalette().getUIObject();
    if (content)
      content.onEditorChanged(evt.editor, evt.previous);
  ]]></subscribe>

  <subscribe event="jsx3.ide.palette.prototypes.reloaded"><![CDATA[
    var content = this.getPalette().getUIObject();
    if (content)
      content.onPrototypesReloaded();
  ]]></subscribe>

  <!-- The palette context menu -->
  <extension-point id="folder">
    <!-- Expects any number of child elements, each with a @path attribute defined.
         The @path attribute is the relative path from the plug-in directory to a directory that
         contains prototypes to show in the prototypes palette. An optional @label attribute overrides
         the name of this folder in the tree. -->
  </extension-point>

  <!-- The palette context menu -->
  <extension-point id="ctxmenu">
    <processor instance-class="jsx3.ide.ui.IdeMenu" type="instantiator"/>
  </extension-point>

  <!-- The palette context menu items -->
  <extension-point id="ctxmenu-item">
    <processor instance-class="jsx3.ide.ui.IdeMenuItem" type="instantiator"/>
  </extension-point>

  <extension id="complibs.palette" point="jsx3.ide.ui.palette">
    <palette default-position="q3" hotkey="ctrl+6" idegroup="per-project" label="Component Libraries" resource="ui"/>
  </extension>

  <extension id="ctxmenu" point="jsx3.ide.palette.prototypes.ctxmenu">
    <menu id="jsx3.ide.prototypesctx" path="/">
      <section id="util"/>
      <divider id="additions"/>
    </menu>
  </extension>

  <extension id="ctxmenu-item" point="jsx3.ide.palette.prototypes.ctxmenu-item">
    <action execute="jsx3.html.copy(menu.getContextParent().getRecord(menu.getContextRecordId()).path);" id="copypath" label="Copy Path" menupath="/jsx3.ide.prototypesctx/edit"/>
  </extension>

  <!-- Toolbar buttons, etc -->
  <extension-point id="toolbar">
    <processor instance-class="jsx3.amp.util.ToolbarItem" type="instantiator"/>
  </extension-point>

  <extension point="jsx3.ide.palette.prototypes.toolbar">
    <button enabled="true" execute="this.getPlugIn().reloadPrototypeLibraries(this.getPlugIn().getPrototypesTree());" id="refresh" img="jsxapp:/images/icon_15.gif" section="utils" tip="Refresh the list of prototypes"/>
  </extension>

</plugin>
  <plugin id="jsx3.ide.palette.cache" name="Project Cache Palette Plug-In" version="0.1" xmlns="http://www.generalinterface.org/gi/amp" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.generalinterface.org/gi/amp http://www.generalinterface.org/xsd/plugin.xsd">

  <method id="getPalette"><![CDATA[
    return this.getEngine().getPlugIn("jsx3.ide.ui").getPalette(this, "cache.palette");
  ]]></method>

  <method id="getSelection"><![CDATA[
    var p = this.getPalette();
    if (p) {
      var ui = p.getUIObject();
      if (ui)
        return ui.getSelection();
    }
    return [];
  ]]></method>

  <requires>
    <plugin id="jsx3.ide.ui"/>
    <plugin id="jsx3.amp.util.menumgr"/>
    <plugin id="jsx3.amp.util.toolbarmgr"/>
    <plugin id="jsx3.gui.Tree"/>
    <plugin id="jsx3.gui.ToolbarButton"/>
  </requires>

  <resources>
    <script eval="true" id="js" path="cache.js">poo</script>
    <xml id="ui" path="cache.xml"/>
  </resources>

  <event id="selection">
    <param id="values"/>
  </event>

  <subscribe event="jsx3.ide.editor.activeChanged" when="loaded"><![CDATA[
    var content = this.getPalette().getUIObject();
    if (content && content.onEditorChanged)
      content.onEditorChanged(evt.editor, evt.previous);
  ]]></subscribe>

  <subscribe event="jsx3.ide.editor.closed" when="loaded"><![CDATA[
    this.cleanUpOrphanedCacheEditors(evt.editor);
    if (evt.editor.getServer())
      this.updateCache();
  ]]></subscribe>

  <subscribe event="jsx3.ide.editor.component.cacheChanged" when="loaded"><![CDATA[
    this.updateCache();
  ]]></subscribe>

  <subscribe event="jsx3.ide.project.app.cacheChanged" when="loaded"><![CDATA[
    this.updateCache();
  ]]></subscribe>

  <!-- The palette context menu -->
  <extension-point id="ctxmenu">
    <processor instance-class="jsx3.ide.ui.IdeMenu" type="instantiator"/>
  </extension-point>

  <!-- The palette context menu items -->
  <extension-point id="ctxmenu-item">
    <processor instance-class="jsx3.ide.ui.IdeMenuItem" type="instantiator"/>
  </extension-point>

  <extension id="cache.palette" point="jsx3.ide.ui.palette">
    <palette default-position="q2" hotkey="ctrl+7" idegroup="per-project" label="Local Data Cache" resource="ui"/>
  </extension>

  <extension id="ctxmenu" point="jsx3.ide.palette.cache.ctxmenu">
    <menu id="jsx3.ide.cachectx" path="/">
      <section id="edit"/>
      <divider id="util"/>
      <divider id="modify"/>
      <divider id="additions"/>
    </menu>
  </extension>

  <extension id="ctxmenu-item" point="jsx3.ide.palette.cache.ctxmenu-item">
    <action execute="this.getPlugIn().editSelectedCacheDoc(menu.getContextParent().getValue());" id="edit" img="jsxapp:/images/icon_21.gif" label="View/Edit" menupath="/jsx3.ide.cachectx/edit"/>
    <action execute="this.getPlugIn().viewSelectedCacheDoc(menu.getContextParent().getValue());" id="view" img="jsxapp:/images/icon_21.gif" label="View Markup" menupath="/jsx3.ide.cachectx/edit"/>

    <action enabled="eval" enabled-eval="menu.getContextParent().getValue().length == 1" execute="jsx3.html.copy(menu.getContextParent().getRecord(menu.getContextRecordId()).jsxtext);" id="copyname" label="Copy Name" menupath="/jsx3.ide.cachectx/util"/>
    <action enabled="eval" enabled-eval="menu.getContextParent().getValue().length == 1" execute="jsx3.html.copy(this.getPlugIn().getCacheDocByTreeId(menu.getContextParent(), menu.getContextRecordId()).getXML());" id="copysrc" label="Copy Source" menupath="/jsx3.ide.cachectx/util"/>

    <action execute="this.getPlugIn().deleteCacheDocument([menu.getContextRecordId()]);" id="remove" img="jsxapp:/images/icon_24.gif" label="Remove From Cache" menupath="/jsx3.ide.cachectx/modify"/>
  </extension>

  <bindable id="oneOrMoreSelected" subscribe="jsx3.ide.palette.cache.selection" value="this.getSelection().length &gt; 0"/>

  <!-- Toolbar buttons, etc -->
  <extension-point id="toolbar">
    <processor instance-class="jsx3.amp.util.ToolbarItem" type="instantiator"/>
  </extension-point>

  <extension point="jsx3.ide.palette.cache.toolbar">
    <button enabled="{oneOrMoreSelected}" execute="this.getPlugIn().editSelectedCacheDoc(this.getPlugIn().getSelection());" id="edit" img="jsxapp:/images/icon_21.gif" section="edit" tip="Edit a cache document"/>
    <button enabled="{oneOrMoreSelected}" execute="this.getPlugIn().viewSelectedCacheDoc(this.getPlugIn().getSelection());" id="view" img="jsxapp:/images/icon_20.gif" section="edit" tip="View a cache document"/>
    <button enabled="{oneOrMoreSelected}" execute="this.getPlugIn().deleteCacheDocument(this.getPlugIn().getSelection());" id="delete" img="jsxapp:/images/icon_24.gif" section="delete" tip="Delete a document from the cache"/>
  </extension>

</plugin>
  <plugin id="jsx3.ide.palette.resources" name="Project Resources Palette Plug-In" version="0.1" xmlns="http://www.generalinterface.org/gi/amp" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.generalinterface.org/gi/amp http://www.generalinterface.org/xsd/plugin.xsd">

  <method id="getPalette"><![CDATA[
    return this.getEngine().getPlugIn("jsx3.ide.ui").getPalette(this, "proj.palette");
  ]]></method>

  <method id="getResourcesTree"><![CDATA[
    var p = this.getPalette();
    if (p) {
      var ui = p.getUIObject();
      if (ui) {
        return ui.getTree();
      }
    }
    return null;
  ]]></method>

  <method id="getSelectedIds"><![CDATA[
    var tree = this.getResourcesTree();
    return tree ? tree.getValue() : [];
  ]]></method>

  <method id="getSelectedRecords"><![CDATA[
    var tree = this.getResourcesTree();
    if (tree) {
      return jsx3.$A(tree.getValue()).map(function(e) {
        return tree.getRecord(e);
      });
    }
    return [];
  ]]></method>

  <requires>
    <plugin id="jsx3.ide.ui"/>
    <plugin id="jsx3.amp.util.menumgr"/>
    <plugin id="jsx3.amp.util.toolbarmgr"/>
    <plugin id="jsx3.gui.Tree"/>
    <plugin id="jsx3.gui.ToolbarButton"/>
  </requires>

  <resources>
    <script eval="true" id="js">
      <data><![CDATA[(function(r){var
ub={A:"builder",B:"dereferencewarn",C:"Confirm Dereference",D:"Dereference the file <b>",E:"</b> from the current project?",F:"Dereference these files from the current project? <b>",G:", ",H:"</b>.",I:"Dereference",J:"Cancel",K:"missing",L:"0",M:"jsxclass",N:/\s*jsx3ide_resource_missing/,O:"1",P:" jsx3ide_resource_missing",a:"resources",b:"updateResources",c:"_root_",d:"jsxapp:/images/icon_7.gif",e:"jsxbgcolor",f:"@Solid Light",g:"objectseturl",h:"component",i:"jsx3ide_resource_initial",j:"jsx3ide_resource_noninitial",k:"jsx3ide_resource_autoload",l:"jsx3ide_resource_noload",m:"/",n:"",o:"_dir_",p:"selection",q:"Cannot change resource ID to an ID that is already in use: ",r:"Cannot change resource path to a path that is already in use: ",s:"changed",t:"Cannot find resource with ID: ",u:"jsx_ide_resourcesettings",v:"container",w:"pane",x:"resource-settings",y:"dims",z:"prefs"};jsx3.ide.PROJECT.subscribe(ub.a,r,ub.b);(jsx3.$O(r)).extend({updateResources:(jsx3.$F(function(){var
Z=this.getResourcesTree();if(Z!=null){var
kb=Z.getValue();Z.clearXmlData();Z.insertRecord({jsxid:ub.c,jsxtext:(jsx3.ide.PROJECT.getDirectory()).getName(),jsximg:ub.d,jsxopen:1});Z.setDynamicProperty(ub.e,ub.f);var
Ab=Z.getXML();var
Pa=jsx3.ide.getProjectSettings();var
u=jsx3.ide.PROJECT.getResources();var
pb=jsx3.net.URI.decode(Pa.get(ub.g));for(var
Nb=0;Nb<u.length;Nb++){var
T=u[Nb];var
Mb=jsx3.net.URI.decode(T.getPath());var
Fa=T.getFileType();var
V=T.getLoadType();var
lb=T.getId();var
sb={jsxid:lb,jsxtip:Mb,load:V?1:0};if(Fa.getId()==ub.h){sb.jsxclass=Mb==pb?ub.i:ub.j;}else sb.jsxclass=sb.load==jsx3.lang.ClassLoader.LOAD_ALWAYS?ub.k:ub.l;sb.jsximg=((Fa.getExt()).getPlugIn()).resolveURI(Fa.getImage());sb.supportsLoad=Fa.isReloadable()?1:null;var
X=Mb.split(ub.m);var
Aa=ub.n,ab=ub.c,hb=ub.c;for(var
xa=0;xa<X.length-1;xa++){Aa=Aa+X[xa];hb=ub.o+Aa;if(!Z.getRecordNode(hb))Z.insertRecord({jsxid:hb,jsxtext:X[xa],jsximg:ub.d,jsxopen:1,sorton:X[xa].toLowerCase()},ab,false);ab=hb;}sb.jsxtext=X[X.length-1];sb.sorton=sb.jsxtext.toLowerCase();Z.insertRecord(sb,hb,false);}Z.repaint();var
Lb=Z.getValue();if(!(jsx3.util.List.wrap(kb)).equals(jsx3.util.List.wrap(Lb)))this.publish({subject:ub.p,values:Lb});this._fileScanResources(Z,u);}})).throttled(),setResourceProps:function(i,n,s,c,f){var
ab=jsx3.ide.PROJECT.getResources();var
Sa=ab.find(function(o){return o.getId()==i;});if(n&&n!=i&&ab.find(function(a){return a.getId()==n;})){jsx3.ide.LOG.warn(ub.q+n);return;}if(Sa){if(s!=null&&Sa.getPath()!=s&&jsx3.ide.getResourceBySrc(s)!=null){jsx3.ide.LOG.warn(ub.r+s);return;}var
nb=new
jsx3.ide.ProjectRsrc(n!=null?n:Sa.getId(),c!=null?c:Sa.getType(),f!=null?f:Sa.getLoadType(),s!=null?s:Sa.getPath());var
zb=ab.indexOf(Sa);ab.splice(zb,1,nb);jsx3.ide.PROJECT.setResources(ab);this.publish({subject:ub.s});}else jsx3.ide.LOG.error(ub.t+i);},doToggleAutoload:function(s){var
db=s.jsxid;var
ma=s.onload==1||s.load==jsx3.lang.ClassLoader.LOAD_ALWAYS;this.setResourceProps(db,null,null,null,ma?jsx3.lang.ClassLoader.LOAD_AUTO:jsx3.lang.ClassLoader.LOAD_ALWAYS);},doReloadResource:function(b){b=jsx3.$A(b);var
F=[];for(var
tb=0;tb<b.length;tb++)F[tb]=jsx3.ide.getResourceById(b[tb]);jsx3.ide.doReloadResourceObj(F);},doShowResourceProps:function(n){var
Xa=this.getServer();var
Cb=Xa.getJSXByName(ub.u);var
Db=jsx3.ide.getResourceById(n);if(!Db)return;if(!Cb){((this.getResource(ub.v)).load()).when((jsx3.$F(function(){Cb=this.loadRsrcComponent(ub.v,Xa.getRootBlock());var
nb=new
jsx3.amp.util.Prefs();var
Ba=(this.getExtPoint(ub.w)).processExts();Ba.each(function(k){k.resourceObj=Db;nb.addPane(k);});nb.setCollapse(Ba.length==1);Cb.getPrefs=function(){return nb;};Cb.openPrefs();var
jb=jsx3.ide.getIDESettings();var
Ha=jb.get(ub.x,ub.y);if(jsx3.$A.is(Ha))Cb.setDimensions(Ha);Cb.focus();})).bind(this));}else Cb.focus();},doDereference:jsx3.$Y(function(q){var
ba=(q.args())[0];var
Q=[];for(var
Nb=0;Nb<ba.length;Nb++)Q[Nb]=jsx3.ide.getFileForResource(ba[Nb]);var
wa=jsx3.ide.getIDESettings();if(wa.get(ub.z,ub.A,ub.B)){var
ya=[];for(var
Nb=0;Nb<Q.length;Nb++)ya[Nb]=Q[Nb].getName();jsx3.IDE.confirm(ub.C,Q.length==1?ub.D+ya[0]+ub.E:ub.F+ya.join(ub.G)+ub.H,(jsx3.$F(function(i){i.doClose();(this._doDereference2(Q)).when(q);})).bind(this),(jsx3.$F(function(b){b.doClose();q.done(false);})).bind(this),ub.I,ub.J);}else (this._doDereference2(Q)).when(q);}),_doDereference2:jsx3.$Y(function(k){var
eb=(k.args())[0];var
Ya=null;for(var
kb=0;kb<eb.length&&Ya==null;kb++)Ya=jsx3.ide.getEditorForFile(eb[kb]);if(Ya){(jsx3.ide.close(Ya)).when((jsx3.$F(function(i){if(i)this._doDereference2(eb);else k.done(false);})).bind(this));}else (this._doDereference3(eb)).when(k);}),_doDereference3:jsx3.$Y(function(n){var
ob=(n.args())[0];var
Ba=jsx3.ide.PROJECT.getResources();(jsx3.$A(ob)).each(function(i){var
ja=jsx3.ide.getResourceByFile(i);Ba.remove(ja);});jsx3.ide.PROJECT.setResources(Ba);}),_fileScanResources:(jsx3.$F(function(e,j){for(var
Wa=0;j&&Wa<j.length;Wa++){var
Bb=j[Wa];var
db=(jsx3.ide.getSystemRelativeFile(jsx3.ide.PROJECT.resolveURI(Bb.src))).isFile();var
qa=e.getRecord(Bb.id);if(qa==null)continue;if(db&&qa.missing){e.insertRecordProperty(qa.jsxid,ub.K,ub.L,false);e.insertRecordProperty(qa.jsxid,ub.M,qa.jsxclass.replace(ub.N,ub.n));}else if(!db&&!qa.missing){e.insertRecordProperty(qa.jsxid,ub.K,ub.O,false);e.insertRecordProperty(qa.jsxid,ub.M,qa.jsxclass+ub.P);}}})).throttled()});})(this);]]></data>
    </script>
    <xml id="ui">
      <data>
        <serialization xmlns="urn:tibco.com/v3.0">
  <onAfterDeserialize><![CDATA[var
ga=jsx3.amp;objJSX._onSelect=function(c){(this.getPlugIn()).publish({subject:"selection",values:c.getValue()});};objJSX.onPaletteLoaded=function(){var
ub={a:"/",b:"menu",c:"action",d:"ctxmenu",e:"ctxmenu-item",f:"open",g:"edit",h:"utils",i:"additions",j:"toolbar"};var
Mb=this.getPlugIn();var
Ra=new
jsx3.amp.util.MenuManager();Ra.addMenuBar(ub.a,menuBar);((Mb.getExtPoint(ub.b)).processExts()).each(function(l){Ra.addMenu(l);});((Mb.getExtPoint(ub.c)).processExts()).each(function(q){Ra.addItem(q);});Ra.finishInit();Ra=new
jsx3.amp.util.MenuManager();Ra.addMenuBar(ub.a,ctxMenuBar);((Mb.getExtPoint(ub.d)).processExts()).each(function(b){Ra.addMenu(b);});((Mb.getExtPoint(ub.e)).processExts()).each(function(g){Ra.addItem(g);});Ra.finishInit();var
Hb=new
jsx3.amp.util.ToolbarManager(buttonBar);Hb.addSection(ub.f);Hb.addSection(ub.g,true);Hb.addSection(ub.h,true);Hb.addSection(ub.i,true);((Mb.getExtPoint(ub.j)).processExts()).each(function(j){Hb.addItem(j);});Mb.updateResources();};objJSX.getTree=function(){return jsxresources;};]]></onAfterDeserialize>
    <object type="jsx3.gui.Block">
      <dynamics/>
      <variants jsxleft="0" jsxoverflow="2" jsxtop="0"/>
      <strings jsxbgcolor="#ffffff" jsxheight="100%" jsxhelpid="ide.palette.files" jsxname="rsrcpal" jsxwidth="100%"/>
        <object type="jsx3.gui.Block">
          <strings jsxdisplay="none" jsxname="ctxMenuBar"/>
        </object>
        <object type="jsx3.gui.LayoutGrid">
          <variants jsxoverflow="2" jsxrelativeposition="0"/>
          <strings jsxheight="100%" jsxname="jsx_ide_cache_layout" jsxrows="26,*" jsxwidth="100%"/>
          <events/>
          <properties/>
            <object type="jsx3.gui.WindowBar">
              <dynamics jsxbgcolor="@Solid Medium" jsxborder="@Outset"/>
              <variants jsxbartype="2" jsxfontsize="10" jsxoverflow="3" jsxrelativeposition="1"/>
              <strings jsxname="jsx_ide_cache_bar"/>
              <object type="jsx3.gui.Block">
                <strings jsxname="menuBar"/>
              </object>
              <object type="jsx3.gui.Block">
                <strings jsxname="buttonBar" jsxstyleoverride="vertical-align:top;"/>
              </object>
            </object>
            <object type="jsx3.gui.Block">
              <dynamics jsxborder="@Outset"/>
              <variants jsxleft="0" jsxoverflow="1" jsxtop="0"/>
              <strings jsxheight="100%" jsxname="jsx_ide_cache_treeblock" jsxwidth="100%"/>
                <object type="jsx3.gui.Tree">
                  <dynamics jsxbgcolor="@Solid Light" jsxpadding="@Tree Padding"/>
                  <variants jsxmultiselect="1" jsxuseroot="1"/>
                  <strings jsxheight="100%" jsxmenu="jsx3.ide.rsrcctx" jsxname="jsxresources" jsxwidth="100%"/>
                  <events jsxchange="rsrcpal._onSelect(this);" jsxexecute="jsx3.ide.doOpenResources(this.getValue());"/>
                  <xslparameters jsxindent="12" jsxsortpath="sorton"/>
                </object>
            </object>
        </object>
    </object>
</serialization>
      </data>
    </xml>

    <xml id="container" load="manual">
      <prereq plugin="jsx3.amp.util.prefspanel"/>
    <data>
        <serialization xmlns="urn:tibco.com/v3.0">
  <onAfterDeserialize><![CDATA[var
ob=jsx3.amp.util.Prefs;objJSX._doMinimize=function(){this.doToggleState(jsx3.gui.Dialog.MINIMIZED);};objJSX._doConfirmedClose=function(){(this.getPrefs()).unload();};objJSX.registerHotKey("_doMinimize","m",false,true,false);objJSX.openPrefs=function(l){(this.getPrefs()).subscribe(ob.UNLOAD,objJSX,"_doPersistAndClose");(this.getPrefs()).renderIn(content,l);};objJSX._doPersistAndClose=function(){var
Ja=jsx3.ide.getIDESettings();var
Fa=Ja.set("resource-settings","dims",this.getDimensions());this.doClose();};objJSX.setResourceId=function(f){this._jsxresourceid=f;var
F=jsx3.ide.getResourceById(f);var
Y=F.getPath();Y=Y.substring(Y.lastIndexOf("/")+1);var
ab=(this.getServer()).getDynamicProperty("_pfl_title",Y);title.setText(ab,true);};]]></onAfterDeserialize>
    <object type="jsx3.gui.Dialog">
      <dynamics jsxbgcolor="@Solid Medium"/>
      <variants jsxheight="190" jsxmaxy="190" jsxminx="275" jsxminy="190" jsxmodal="1" jsxwidth="355"/>
      <strings jsxhelpid="ide.rsrcset" jsxname="jsx_ide_resourcesettings"/>
        <object type="jsx3.gui.WindowBar">
          <variants/>
          <strings jsxname="title" jsxtext="File Profile"/>
            <object type="jsx3.gui.ToolbarButton">
              <dynamics jsximage="@Min Icon" jsxtip="jsx3.gui.Dialog.min"/>
              <variants/>
              <strings/>
              <events jsxexecute="jsx_ide_resourcesettings._doMinimize();"/>
            </object>
            <object type="jsx3.gui.ToolbarButton">
              <dynamics jsximage="@Close Icon"/>
              <variants/>
              <strings jsxname="jsx_tbb" jsxtip="close dialog"/>
              <events jsxexecute="jsx_ide_resourcesettings._doConfirmedClose();"/>
            </object>
        </object>
        <object type="jsx3.gui.Block">
          <variants jsxoverflow="2"/>
          <strings jsxheight="100%" jsxname="content" jsxwidth="100%"/>
        </object>        
    </object>
</serialization>
      </data>
    </xml>
    <xml id="pane_profile" load="manual">
      <data>
        <serialization xmlns="urn:tibco.com/v3.0">
  <onAfterDeserialize><![CDATA[var
x=jsx3.amp.util.PrefsPane;objJSX.getFirstResponder=function(){return formId;};objJSX.savePrefs=function(){var
ab=(this.getPane()).resourceObj.getId();(this.getPlugIn()).setResourceProps(ab,formId.getValue(),formURI.getValue(),formType.getValue(),parseInt(formLoad.getValue()));return true;};objJSX.loadPrefs=function(){var
ub={a:"jsx3.ide",b:"component",c:"a"};var
eb=(this.getPane()).resourceObj;formType.clearXmlData();((jsx3.ide.getPlugIn(ub.a)).getFileTypes()).each(function(h){formType.insertRecord({jsxid:h.getId(),jsxtext:h.getLabel()});});if(eb){formId.setValue(eb.getId());var
Z=eb.getLoadType();if(Z==null)Z=jsx3.lang.ClassLoader.LOAD_AUTO;if(eb.getType()!=ub.b)formLoad.setValue(Z+ub.c);formType.setValue(eb.getType());formURI.setValue(eb.getPath());}this.updateLoadSelect(eb.getFileType());};objJSX.updateLoadSelect=function(j){var
K=formLoad;if(!j.isReloadable()){K.setEnabled(jsx3.gui.Form.STATEDISABLED,true);}else{K.setEnabled(jsx3.gui.Form.STATEENABLED,false);K.setXMLString("<data jsxid='jsxroot'><record jsxid='"+jsx3.lang.ClassLoader.LOAD_AUTO+"a' jsxtext='Manually/As Needed'/>"+"<record jsxid='"+jsx3.lang.ClassLoader.LOAD_ALWAYS+"a' jsxtext='At Init'/>"+"</data>");K.resetXmlCacheData();K.repaint();}};objJSX.makeDirty=function(h){if(h==formType)this.updateLoadSelect((jsx3.ide.getPlugIn("jsx3.ide")).getFileType(h.getValue()));(this.getPane()).setDirty(true);};objJSX._onOpen=function(){var
ub={a:"jsx3.io.browser",b:"rsrcprod"};var
sb=jsx3.ide.getSystemRelativeFile(jsx3.ide.PROJECT.resolveURI(formURI.getValue()));var
Z=sb.exists()?sb.getParentFile():null;(jsx3.ide.getPlugIn(ub.a)).chooseFile((this.getServer()).getRootBlock(),{name:ub.b,modal:true,folder:Z||jsx3.ide.getActiveProjectDirectory(),baseFolder:jsx3.ide.getCurrentUserHome(),onChoose:(jsx3.$F(function(r){formURI.setValue((jsx3.ide.PROJECT.getDirectory()).relativePathTo(r));this.makeDirty();})).bind(this)});};]]></onAfterDeserialize>
    <object type="jsx3.gui.Block">
      <dynamics jsxpadding="@8Pixel"/>
      <variants jsxoverflow="3" jsxrelativeposition="1"/>
      <strings jsxheight="100%" jsxname="prefspane" jsxwidth="100%"/>

        <object type="jsx3.gui.LayoutGrid">
          <variants/>
          <strings jsxname="jsxlayoutx" jsxrows="24,24,24,24"/>

            <object type="jsx3.gui.LayoutGrid">
              <variants jsxrelativeposition="1"/>
              <strings jsxcols="70,*" jsxheight="100%" jsxname="lo" jsxwidth="100%"/>
                <object type="jsx3.gui.Block">
                  <dynamics jsxtext="_gen_id"/>
                  <variants jsxoverflow="2" jsxrelativeposition="1"/>
                  <strings jsxfontweight="bold" jsxheight="100%" jsxpadding="6 6 0 0" jsxtextalign="right" jsxwidth="100%"/>
                </object>
                <object type="jsx3.gui.Block">
                  <variants jsxoverflow="2"/>
                  <strings jsxpadding="2 6 0 0"/>
                    <object type="jsx3.gui.TextBox">
                      <variants jsxheight="18"/>
                      <strings jsxname="formId" jsxwidth="100%"/>
                      <events jsxincchange="prefspane.makeDirty(this);"/>
                    </object>
                </object>
            </object>

            <object type="jsx3.gui.LayoutGrid">
              <variants jsxrelativeposition="1"/>
              <strings jsxcols="70,*" jsxheight="100%" jsxname="lo" jsxwidth="100%"/>
                <object type="jsx3.gui.Block">
                  <dynamics jsxtext="_gen_type"/>
                  <variants jsxoverflow="2" jsxrelativeposition="1"/>
                  <strings jsxfontweight="bold" jsxheight="100%" jsxpadding="6 6 0 0" jsxtextalign="right" jsxwidth="100%"/>
                </object>
                <object type="jsx3.gui.Block">
                  <variants jsxoverflow="2"/>
                  <strings jsxpadding="2 6 0 2"/>
                    <object type="jsx3.gui.Select">
                      <strings jsxname="formType" jsxwidth="100%"/>
                      <events jsxselect="prefspane.makeDirty(this);"/>
                    </object>
                </object>
            </object>

            <object type="jsx3.gui.LayoutGrid">
              <variants jsxrelativeposition="1"/>
              <strings jsxcols="70,*" jsxheight="100%" jsxname="lo" jsxwidth="100%"/>
                <object type="jsx3.gui.Block">
                  <dynamics jsxtext="_pfl_autoload"/>
                  <variants jsxoverflow="2" jsxrelativeposition="1"/>
                  <strings jsxfontweight="bold" jsxheight="100%" jsxpadding="6 6 0 0" jsxtextalign="right" jsxwidth="100%"/>
                </object>
                <object type="jsx3.gui.Block">
                  <variants jsxoverflow="2"/>
                  <strings jsxpadding="2 6 0 2"/>
                    <object type="jsx3.gui.Select">
                      <variants/>
                      <strings jsxname="formLoad" jsxwidth="100%"/>
                      <events jsxselect="prefspane.makeDirty(this);"/>
                    </object>
                </object>
            </object>

            <object type="jsx3.gui.LayoutGrid">
              <variants jsxrelativeposition="1"/>
              <strings jsxcols="70,*,36" jsxheight="100%" jsxname="lo" jsxwidth="100%"/>
                <object type="jsx3.gui.Block">
                  <dynamics jsxtext="_gen_uri"/>
                  <variants jsxoverflow="2" jsxrelativeposition="1"/>
                  <strings jsxfontweight="bold" jsxheight="100%" jsxpadding="6 6 0 0" jsxtextalign="right" jsxwidth="100%"/>
                </object>
                <object type="jsx3.gui.Block">
                  <variants jsxoverflow="2"/>
                  <strings jsxpadding="2 6 0 0"/>
                    <object type="jsx3.gui.TextBox">
                      <variants jsxheight="18"/>
                      <strings jsxname="formURI" jsxwidth="100%"/>
                      <events jsxincchange="prefspane.makeDirty(this);"/>
                    </object>
                </object>
                <object type="jsx3.gui.Block">
                  <variants jsxoverflow="2"/>
                  <strings jsxpadding="2 6 0 0"/>
                    <object type="jsx3.gui.ImageButton">
                      <dynamics jsxtip="_gen_browse"/>
                      <variants jsxheight="16" jsxwidth="16"/>
                      <strings jsximage="jsxapp:/images/icon_60.gif" jsxmargin="0 0 0 8" jsxname="jsxbrowse"/>
                      <events jsxexecute="prefspane._onOpen();"/>
                    </object>
                </object>
            </object>

        </object>
    </object>
</serialization>
      </data>
    </xml>
  </resources>

  <event id="changed">
  </event>

  <event id="selection">
    <param id="values"/>
  </event>

  <subscribe event="jsx3.ide.settings.project.saved">
    this.updateResources();
  </subscribe>

  <extension-point id="menu">
    <processor instance-class="jsx3.ide.ui.IdeMenu" type="instantiator"/>
  </extension-point>

  <extension-point id="action">
    <processor instance-class="jsx3.ide.ui.IdeMenuItem" type="instantiator"/>
  </extension-point>

  <!-- The palette context menu -->
  <extension-point id="ctxmenu">
    <processor instance-class="jsx3.ide.ui.IdeMenu" type="instantiator"/>
  </extension-point>

  <!-- The palette context menu items -->
  <extension-point id="ctxmenu-item">
    <processor instance-class="jsx3.ide.ui.IdeMenuItem" type="instantiator"/>
  </extension-point>

  <!-- Pane for the resource settings dialog -->
  <extension-point id="pane">
    <processor instance-class="jsx3.amp.util.PrefsPane" type="instantiator"/>
  </extension-point>

  <extension id="proj.palette" point="jsx3.ide.ui.palette">
    <palette default-position="q1" hotkey="ctrl+8" idegroup="per-project" label="Project Files" resource="ui"/>
  </extension>

  <extension id="menus" point="jsx3.ide.palette.resources.menu">
    <menu ext-class="jsx3.ide.ui.NewFileMenu" id="new" label="New" path="/"/>
  </extension>

  <extension id="default" point="jsx3.ide.palette.resources.pane">
    <pane img="" label="Settings" path="profile.xml" resource="pane_profile" tip="Project settings related to deployment."/>
  </extension>

  <extension id="ctxmenu" point="jsx3.ide.palette.resources.ctxmenu">
    <menu id="jsx3.ide.rsrcctx" path="/">
      <section id="edit"/>
      <divider id="settings"/>
      <divider id="load"/>
      <section id="util"/>
      <divider id="additions"/>
    </menu>
  </extension>

  <extension id="ctxmenu-item" point="jsx3.ide.palette.resources.ctxmenu-item">
    <action execute="jsx3.ide.doOpenResources([menu.getContextRecordId()])" id="edit" img="jsxapp:/images/icon_21.gif" label="Edit" menupath="/jsx3.ide.rsrcctx/edit"/>
    <action execute="this.getPlugIn().doShowResourceProps(menu.getContextRecordId())" id="profile" img="jsxapp:/images/icon_76.gif" label="Edit Profile..." menupath="/jsx3.ide.rsrcctx/edit"/>

    <action enabled="eval" enabled-eval="var r = menu.getContextParent().getRecord(menu.getContextRecordId()); r &amp;&amp; r.supportsLoad == 1" execute="this.getPlugIn().doToggleAutoload(menu.getContextParent().getRecord(menu.getContextRecordId()))" id="autoload" label="Auto Load" menupath="/jsx3.ide.rsrcctx/settings" selected="eval" selected-eval="var r = menu.getContextParent().getRecord(menu.getContextRecordId()); r &amp;&amp; r.load == 1"/>
    <action execute="this.getPlugIn().doDereference([menu.getContextRecordId()])" id="dereference" img="jsxapp:/images/icon_24.gif" label="Dereference" menupath="/jsx3.ide.rsrcctx/settings"/>

    <action enabled="eval" enabled-eval="var r = menu.getContextParent().getRecord(menu.getContextRecordId()); r &amp;&amp; r.supportsLoad == 1" execute="this.getPlugIn().doReloadResource(menu.getContextRecordId())" id="reload" img="jsxapp:/images/icon_22.gif" label="Load/Reload" menupath="/jsx3.ide.rsrcctx/load"/>
    <action execute="var strPath = menu.getContextParent().getRecord(menu.getContextRecordId()).jsxtip; jsx3.html.copy(strPath);" id="copypath" label="Copy Path" menupath="/jsx3.ide.rsrcctx/util"/>
  </extension>

  <!-- Toolbar buttons, etc -->
  <extension-point id="toolbar">
    <processor instance-class="jsx3.amp.util.ToolbarItem" type="instantiator"/>
  </extension-point>

  <bindable id="oneSelected" subscribe="jsx3.ide.palette.resources.selection" value="this.getSelectedIds().length == 1"/>
  <bindable id="oneOrMoreSelected" subscribe="jsx3.ide.palette.resources.selection" value="this.getSelectedIds().length &gt; 0"/>
  <bindable id="onlyReloadableSelected" subscribe="jsx3.ide.palette.resources.selection" value="var recs = this.getSelectedRecords();       recs.length &gt; 0 &amp;&amp;       jsx3.$A(recs).find(function(e) { return !e.supportsLoad; }) == null"/>

  <extension point="jsx3.ide.palette.resources.toolbar">
    <button enabled="true" execute="jsx3.ide.open();" id="open" img="jsxapp:/images/icon_60.gif" section="open" tip="Open file..."/>
    <button enabled="{oneOrMoreSelected}" execute="jsx3.ide.doOpenResources(this.getPlugIn().getSelectedIds());" id="edit" img="jsxapp:/images/icon_21.gif" section="edit" tip="Edit resource"/>
    <button enabled="{oneSelected}" execute="this.getPlugIn().doShowResourceProps(this.getPlugIn().getSelectedIds()[0]);" id="profile" img="jsxapp:/images/icon_76.gif" section="edit" tip="Edit resource profile"/>
    <button enabled="{oneOrMoreSelected}" execute="this.getPlugIn().doDereference(this.getPlugIn().getSelectedIds());" id="dereference" img="jsxapp:/images/icon_24.gif" section="edit" tip="Dereference resource"/>
    <button enabled="{onlyReloadableSelected}" execute="this.getPlugIn().doReloadResource(this.getPlugIn().getSelectedIds());" id="reload" img="jsxapp:/images/icon_22.gif" section="edit" tip="Load/reload resource"/>
    <button enabled="true" execute="this.getPlugIn().updateResources();" id="refresh" img="jsxapp:/images/icon_15.gif" section="utils" tip="Refresh project resources"/>
  </extension>

</plugin>
  <plugin id="jsx3.ide.versioncheck" name="General Interface Version Check Plug-In" version="0.1" xmlns="http://www.generalinterface.org/gi/amp" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.generalinterface.org/gi/amp http://www.generalinterface.org/xsd/plugin.xsd">

  <method id="check" params="bForce"><![CDATA[
    if (this._newVchecking) return;

    // only perform check on compiled build
    if (!bForce && !"3.8.0".match(/\d/)) return;

    var settings = jsx3.ide.getIDESettings();
    if (bForce)
      settings.set("prefs", "versioncheck", "ignore", null);

    var doc = new jsx3.xml.Document();
    doc.setAsync(true);
    doc.subscribe("*", this, function(objEvent) {
      this._newVchecking = false;

      if (objEvent.subject == jsx3.xml.Document.ON_RESPONSE && !objEvent.target.hasError()) {
        var newVersion = objEvent.target.getValue();

        if (newVersion) {
          var ignoreVersion = settings.get("prefs", "versioncheck", "ignore");
          var myVersion = jsx3.getVersion();

          this.getLog().debug("VERSION CHECK -- latest version: " + newVersion + ", ignore version: " + ignoreVersion);

          // let the user ignore a version:
          if (ignoreVersion != newVersion) {
            if (jsx3.util.compareVersions(newVersion, myVersion) > 0)
              this.getServer().confirm(
                "New Version Available", "A new version (" + newVersion + ") of General Interface is available.",
                function() { window.open("http://www.generalinterface.org/alias/download", "jsxide_newversion"); }, null,
                "Download", "Later", 1,
                function(d) { d.doClose(); settings.set("prefs", "versioncheck", "ignore", newVersion); }, "Ignore Version",
                {nonModal:1}
              );
            else if (bForce)
              this.getServer().alert("Up-To-Date", "Your version (" + myVersion + ") of General Interface is up-to-date.",
                  null, null, {nonModal:1});
          }
        }
      } else {
        this.getLog().debug("Version check error: " + objEvent.target.getError());

        if (bForce)
          this.getServer().alert("Version Check Failed", "The version check failed. Check your network connection and try again.",
              null, null, {nonModal:1});
      }
    });

    doc.load("http://www.generalinterface.org/version/gi.xml?ts=" + new Date().getTime());
    /* @jsxobf-clobber */
    this._newVchecking = true;
  ]]></method>

  <requires>
  </requires>

  <resources>
  </resources>

  <extension id="menu.help" point="jsx3.ide.ui.action">
    <action execute="this.getPlugIn().check(true);" id="jsx3.ide.help1_4a" label="Check for Updates..." menupath="/jsx3.ide.help/about"/>
  </extension>

  <extension id="onReady" point="jsx3.ide.ui.ready">
    <eval>this.getPlugIn().check();</eval>
  </extension>

</plugin>
  <plugin id="jsx3.ide.amp" name="AMP Support Plug-In" version="0.1" xmlns="http://www.generalinterface.org/gi/amp" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.generalinterface.org/gi/amp http://www.generalinterface.org/xsd/plugin.xsd">

  <extension point="jsx3.ide.project.app.project-template">
    <template description="An empty AMP project." id="amp" label="AMP Project" path="sample-project"/>
  </extension>

</plugin>
  <plugin id="jsx3.ide.mapping" name="Data Mapping Plug-In" property="MappingPlugin" version="0.1" xmlns="http://www.generalinterface.org/gi/amp" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.generalinterface.org/gi/amp http://www.generalinterface.org/xsd/plugin.xsd">

  <requires>
    <plugin id="jsx3.net.Service"/>
    <plugin id="jsx3.gui.BlockX"/>
    <plugin id="jsx3.gui.RadioButton"/>
    <plugin id="jsx3.ide"/>
    <plugin id="jsx3.ide.editor"/>
  </requires>
  
  <resources>
    <script id="ide_js" load="early">
      <data><![CDATA[jsx3.Class.defineClass("jsx3.ide.mapper.Editor",jsx3.ide.Editor,null,function(j,f){var
ub={a:"components/Mapper.xml"};f.render=function(k){var
Jb=k.load(ub.a,null,this.getPlugIn());return Jb;};f.getPlugIn=function(){return jsx3.IDE.MappingPlugin;};f.loadFromFile=function(){var
K=this.getOpenFile();if(K){var
Ga=this.getContent();if(!Ga.getDirty())this._doOpenServiceEditorDelay(K,Ga);}};f._doOpenServiceEditorDelay=function(a,e){if(e.getMapper()!=null&&(e.getMapper()).INITIALIZED){e.doNewRulesFile(a);}else window.setTimeout((jsx3.$F(this._doOpenServiceEditorDelay)).bind(this,[a,e]),200);};});jsx3.ide.mapper.openUtility=function(){jsx3.ide.doNewEditor("services");};jsx3.Class.defineClass("jsx3.ide.mapper.FileType",jsx3.ide.FileType,null,function(s,f){var
ub={a:"/data/record[@jsxid='jsxwsdlroot']",b:"/data[@jsxnamespace='jsx3.ide.mapper.Mapper']",c:"/data[@jsxnamespace='jsx3.xml.Mapper']"};f.isTypeOf=function(a,c){if(c)return (c.selectSingleNode(ub.a)||c.selectSingleNode(ub.b)||c.selectSingleNode(ub.c))!=null;return false;};});]]></data>
    </script> <!-- replace this with plug-in extensions -->
    <script id="Mapper.js" path="js/jsx3/ide/mapper/Mapper.js"/>
    <script id="ServiceTest.js" path="js/jsx3/ide/mapper/ServiceTest.js"/>
  </resources>

  <extension id="actions" point="jsx3.ide.ui.action">
    <action execute="jsx3.ide.doNewEditor('services');" id="jsx3.ide.mapping" img="images/service.gif" label="XML Mapping Utility..." menupath="/jsx3.ide.tools/ide"/>
  </extension>

  <extension id="type.component" point="jsx3.ide.file-type">
    <type ext-class="jsx3.ide.mapper.FileType" id="services" img="jsxplugin://jsx3.ide.mapping/images/service.gif" label="Mapping Rule" precedence="10"/>
  </extension>

  <extension point="jsx3.ide.editor.type">
    <type class="jsx3.ide.mapper.Editor" dialog="true" multi="false">
      <filetype id="services"/>
    </type>
  </extension>

</plugin>
  <plugin id="jsx3.ide.charting" name="Charting Add-in Plug-In" version="0.1" xmlns="http://www.generalinterface.org/gi/amp" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.generalinterface.org/gi/amp http://www.generalinterface.org/xsd/plugin.xsd">

  <requires>
  </requires>

  <resources>
  </resources>

  <extension point="jsx3.ide.palette.properties.catalog">
    <catalog path="jsx:///addins/charting/properties/catalog.xml"/>
  </extension>

  <extension point="jsx3.ide.palette.events.catalog">
    <catalog path="jsx:///addins/charting/events/catalog.xml"/>
  </extension>

</plugin>
  <plugin id="jsx3.ide.testing" name="GIPP Integration Plug-In" version="0.1" xmlns="http://www.generalinterface.org/gi/amp" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.generalinterface.org/gi/amp http://www.generalinterface.org/xsd/plugin.xsd">

  <method id="launchGIPP" params="benchmarkJSPath, interval">
    var gipp = this.getGIPPDir();

    var query = "GI=" + gipp.relativePathTo(jsx3.ide.getSystemRelativeFile("")) + "&amp;APP=" +
        gipp.relativePathTo(jsx3.ide.PROJECT.getDirectory());

    if (benchmarkJSPath) {
      query = query + "&amp;BENCHMARK_JS=" + benchmarkJSPath;
    } else {
      var rsrc = jsx3.ide.PROJECT.getResources().filter(function(e) { return e.getType() == "gipp"; });
      if (rsrc.length &gt; 0) {
        var paths = rsrc.map(function(e) { return e.getPath(); });
        query = query + "&amp;BENCHMARK_JS=[" + paths.join(",") + "]";
      }
    }

    if (interval)
      query = query + "&amp;INTERVAL=" + interval;

    var uri = gipp.toURI();
    uri = jsx3.net.URI.fromParts(uri.getScheme(), uri.getUserInfo(), uri.getHost(), uri.getPort(),
        uri.getPath() + "gipp.html", query, null);

    window.open(uri.toString());
  </method>

  <method id="launchGITAK" params="testFilePath">
    var gitak = this.getGITAKDir();
    // Test Runner is under "core/" subdirectory, need go one more up from gitak.relativePath
    var query = "GI=../" + gitak.relativePathTo(jsx3.ide.getSystemRelativeFile("")) + "&amp;APP=../" +
        gitak.relativePathTo(jsx3.ide.PROJECT.getDirectory());

    if (testFilePath) {
      query = query + "&amp;TESTS=[" + testFilePath + "]";
    } else {
      var rsrc = jsx3.ide.PROJECT.getResources().filter(function(e) { return e.getType() == "gitak"; });
      if (rsrc.length &gt; 0) {
        var paths = rsrc.map(function(e) { return e.getPath(); });
        query = query + "&amp;TESTS=[" + paths.join(",") + "]";
      }
    }
    query = "test=TestSuiteAuto.html&amp;" + query;
    
    var uri = gitak.toURI();
    uri = jsx3.net.URI.fromParts(uri.getScheme(), uri.getUserInfo(), uri.getHost(), uri.getPort(),
        uri.getPath() + "core/TestRunner.html", query, null);

    window.open(uri.toString());
  </method>

  <method id="isGIPPConfigured">
    return this.isValidGIPP(this.getGIPPDir());
  </method>

  <method id="isGITAKConfigured">
    return this.isValidGITAK(this.getGITAKDir());
  </method>

  <method id="getGIPPDir">
    var p = jsx3.app.Browser.getLocation().resolve(this.getGIPPPath());
    return jsx3.ide.getPlugIn("jsx3.io").getFileForURI(p);
  </method>

  <method id="getGITAKDir">
    var p = jsx3.app.Browser.getLocation().resolve(this.getGITAKPath());
    return jsx3.ide.getPlugIn("jsx3.io").getFileForURI(p);
  </method>

  <method id="getGIPPPath">
    return jsx3.ide.getIDESettings().get(this.getId(), "path") || this.resolveURI("gipp");
  </method>

  <method id="getGITAKPath">
    return jsx3.ide.getIDESettings().get(this.getId(), "pathGitak") || this.resolveURI("gitak");
  </method>

  <method id="isValidGIPP" params="objFile">
    return objFile.resolve("gipp.html").isFile();
  </method>

  <method id="isValidGITAK" params="objFile">
    return objFile.resolve("core/TestRunner.html").isFile();
  </method>

  <requires>
  </requires>

  <resources>
    <xml id="pane_gipp" path="pane.xml"/>
  </resources>

  <extension id="default" point="jsx3.ide.settings.ide.pane">
    <pane img="gipp.gif" label="GIPP &amp;#38; GITAK" resource="pane_gipp" tip="Settings related to integration with the Test Automation Kit and Performance Profiler."/>
  </extension>

  <extension id="menu.project" point="jsx3.ide.ui.action">
    <action enabled="eval" enabled-eval="jsx3.ide.PROJECT &amp;&amp; this.getPlugIn().isGIPPConfigured()" execute="this.getPlugIn().launchGIPP();" hkconfig="true" id="jsx3.ide.testing.run" label="Run Project In GIPP..." menupath="/jsx3.ide.project/run" tip="Run project in the General Interface Performance Profiler"/>
    <action enabled="eval" enabled-eval="jsx3.ide.PROJECT &amp;&amp; this.getPlugIn().isGITAKConfigured()" execute="this.getPlugIn().launchGITAK();" hkconfig="true" id="jsx3.ide.testing.rungitak" label="Run Project In GITAK..." menupath="/jsx3.ide.project/run" tip="Run project in the General Interface Test Automation Kit"/>
  </extension>

</plugin>
  <plugin id="jsx3.ide.recorder" name="Test Recorder Base Plug-In" property="RecorderEditorPlugin" version="0.1" xmlns="http://www.generalinterface.org/gi/amp" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.generalinterface.org/gi/amp http://www.generalinterface.org/xsd/plugin.xsd">

  <requires>
    <plugin id="jsx3.ide.editor"/>
  </requires>

  <resources>
    <script id="js" path="RecorderEditor.js"/>
    <xml id="actionsxml" path="actions.xml"/>
    <xml id="editor" path="editor.xml">
      <prereq id="actionsxml"/>
    </xml>
  </resources>

</plugin>
  <plugin id="jsx3.ide.recorder.gipp" name="GIPP Test Recorder Plug-In" property="GippEditorPlugin" version="0.1" xmlns="http://www.generalinterface.org/gi/amp" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.generalinterface.org/gi/amp http://www.generalinterface.org/xsd/plugin.xsd">

  <requires>
    <plugin id="jsx3.ide.recorder"/>
  </requires>

  <resources>
    <css id="styles">
      .recordermatrix tr.testcasedelim td {
        border-bottom: 2px solid black;
      }
    </css>
    <script id="type" load="early" path="GippType.js"/>
    <script id="js" path="GippEditor.js"/>
  </resources>

  <extension id="type" point="jsx3.ide.file-type">
    <type ext-class="jsx3.ide.gipp.FileType" id="gipp" img="jsxplugin://jsx3.ide.recorder.gipp/file.gif" label="GIPP Test Cases" precedence="5"/>
  </extension>

  <extension point="jsx3.ide.editor.type">
    <type xmlns="" class="jsx3.ide.gipp.Editor">
      <filetype id="gipp"/>
    </type>
  </extension>

</plugin>
  <plugin id="jsx3.ide.recorder.gitak" name="GITAK Test Recorder Plug-In" property="GitakEditorPlugin" version="0.1" xmlns="http://www.generalinterface.org/gi/amp" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.generalinterface.org/gi/amp http://www.generalinterface.org/xsd/plugin.xsd">

  <requires>
    <plugin id="jsx3.ide.recorder"/>
  </requires>

  <resources>
    <script id="type" load="early" path="GitakType.js"/>
    <script id="editor" path="GitakEditor.js"/>
    <xml id="gitakxml" load="early" path="actions.xml"/>    
  </resources>

  <extension id="type" point="jsx3.ide.file-type">
    <type ext-class="jsx3.ide.gitak.FileType" id="gitak" img="jsxplugin://jsx3.ide.recorder.gitak/file.gif" label="GITAK Test Cases" precedence="5"/>
  </extension>

  <extension point="jsx3.ide.editor.type">
    <type xmlns="" class="jsx3.ide.gitak.Editor">
      <filetype id="gitak"/>
    </type>
  </extension>

</plugin>
  <plugin id="jsx3.ide.xmpp" name="Dojo XMPP Plug-In" version="0.1" xmlns="http://www.generalinterface.org/gi/amp" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.generalinterface.org/gi/amp http://www.generalinterface.org/xsd/plugin.xsd">

  <requires>
  </requires>

  <resources>
    <script id="js" path="dojo/dojo-xmpp.js"/>
  </resources>

</plugin>
  <plugin id="jsx3.ide.jabber" name="Jabber Plug-In" version="0.1" xmlns="http://www.generalinterface.org/gi/amp" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.generalinterface.org/gi/amp http://www.generalinterface.org/xsd/plugin.xsd">

  <method id="getPalette"><![CDATA[
    return this.getEngine().getPlugIn("jsx3.ide.ui").getPalette(this, "xmpp.palette");
  ]]></method>

  <requires>
    <plugin id="jsx3.ide.ui"/>
    <plugin id="jsx3.gui.Matrix"/>
  </requires>

  <resources>
    <script eval="true" id="xmpp_js" path="palette.js"/>

    <xml id="xmpp_settings" load="manual" path="settings.xml">
      <prereq id="xmpp_js"/>
      <prereq plugin="jsx3.amp.util.prefspanel"/>
    </xml>

    <xml id="xmpp_palette" path="palette.xml">
      <prereq id="xmpp_js"/>
      <prereq plugin="jsx3.ide.ui"/>
      <prereq plugin="jsx3.amp.util.menumgr"/>
      <prereq plugin="jsx3.amp.util.toolbarmgr"/>
    </xml>

    <xml id="xmpp_chat_dialog" path="chat.xml">
      <prereq id="xmpp_js"/>
    </xml>
    <xml id="xmpp_add_dialog" load="manual" path="add_dialog.xml"/>
    <xml id="xmpp_nick_dialog" load="manual" path="nick_dialog.xml"/>
    <xml id="xmpp_delete_dialog" load="manual" path="delete_dialog.xml"/>
  </resources>

  <subscribe event="jsx3.ide.settings.ide.saved" when="loaded">
    if (evt.pane.getTitle() == "Chat") {
      // if connected will shut down, if not connected, will repaint the UI according to whether pw is set
      this.doShutdown();
    }
  </subscribe>
  
  <extension id="default" point="jsx3.ide.settings.ide.pane">
    <pane img="images/xmpp.gif" label="Chat" resource="xmpp_settings" tip="Settings related to XMPP."/>
  </extension>

  <extension id="xmpp.palette" point="jsx3.ide.ui.palette">
    <palette default-closed="true" default-position="q3" hotkey="ctrl+0" idegroup="per-ide" label="Chat" resource="xmpp_palette"/>
  </extension>

  <!-- The palette context menu -->
  <extension-point id="ctxmenu">
    <processor instance-class="jsx3.ide.ui.IdeMenu" type="instantiator"/>
  </extension-point>

  <!-- The palette context menu items -->
  <extension-point id="ctxmenu-item">
    <processor instance-class="jsx3.ide.ui.IdeMenuItem" type="instantiator"/>
  </extension-point>

  <extension id="ctxmenu" point="jsx3.ide.jabber.ctxmenu">
    <menu id="jsx3.ide.xmppctx" path="/">
      <section id="edit"/>
    </menu>
  </extension>

  <extension id="ctxmenu-item" point="jsx3.ide.jabber.ctxmenu-item">
    <action execute="this.getPlugIn().editNickname(menu.getContextParent().getRecord(menu.getContextParent().getValue()));" id="alias" label="Set Nickname" menupath="/jsx3.ide.xmppctx/edit"/>
    <action execute="this.getPlugIn().deleteFromRoster(menu.getContextParent().getRecord(menu.getContextParent().getValue()));" id="delete" img="jsxapp:/images/icon_55.gif" label="Delete" menupath="/jsx3.ide.xmppctx/edit"/>
  </extension>

</plugin>
  <plugin id="net.sf.editarea" name="EditArea Library Plug-In" version="0.7.2.1" xmlns="http://www.generalinterface.org/gi/amp" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.generalinterface.org/gi/amp http://www.generalinterface.org/xsd/plugin.xsd">

  <requires>
  </requires>

  <resources>
    <script id="main" path="edit_area_full.js"/>
  </resources>

</plugin>
  <plugin id="com.google.gears" name="Google Gears Plug-In" version="0.1" xmlns="http://www.generalinterface.org/gi/amp" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.generalinterface.org/gi/amp http://www.generalinterface.org/xsd/plugin.xsd">

  <method id="isAvailable"><![CDATA[
    return window.google != null && google.gears != null && google.gears.factory != null &&
        typeof(google.gears.factory.create) == "function";
  ]]></method>

  <requires>
    <plugin id="jsx3.io"/>
  </requires>

  <resources>
    <script id="init" load="early">
      <data><![CDATA[(function(){if(window.google&&google.gears)return;var
w=null;if(typeof GearsFactory!="undefined"){w=new
GearsFactory();}else{if(window.ActiveXObject)try{w=new
ActiveXObject("Gears.Factory");if((w.getBuildInfo()).indexOf("ie_mobile")!=-1)w.privateSetGlobalObject(this);}catch(Kb){}if(!w)if(typeof navigator.mimeTypes!="undefined"&&navigator.mimeTypes["application/x-googlegears"]){w=document.createElement("object");w.style.display="none";w.width=0;w.height=0;w.type="application/x-googlegears";document.body.appendChild(w);}}if(!w)return;if(!window.google)google={};if(!google.gears)google.gears={factory:w};})();]]></data>
    </script>
    <script id="js" path="GearsFile.js"/>
  </resources>

  <extension point="jsx3.io.file-system">
    <method id="isAvailable"><![CDATA[
      return this.getPlugIn().isAvailable();
    ]]></method>

    <file-system class="com.google.gears.FileSystem" id="gears" label="Google Gears" list="true" read="true" scheme="gears" write="true"/>
  </extension>

  <extension id="gears" point="jsx3.amp.persist.provider">
    <method id="_getDB">
      var db = google.gears.factory.create('beta.database');
      db.open("AmpPersist");
      return db;
    </method>

    <method id="isAvailable">
      var rv = this.getPlugIn().isAvailable();
      if (rv) {
        var db = this._getDB();
        db.execute('CREATE TABLE IF NOT EXISTS map ' +
                   '  (key TEXT NOT NULL UNIQUE, value TEXT)');
        db.close();
      }
      return rv;
    </method>

    <method id="get" params="k">
      var db = this._getDB();
      var rs = db.execute("SELECT value FROM map WHERE key=?", [k]);
      var rv = null;
      if (rs.isValidRow())
        rv = rs.field(0);
      rs.close();
      db.close();
      return rv;
    </method>

    <method id="put" params="k, v">
      var db = this._getDB();
      db.execute("INSERT OR REPLACE INTO map (key,value) VALUES (?,?)", [k, v]);
      db.close();
    </method>

    <method id="remove" params="k">
      var db = this._getDB();
      db.execute("DELETE FROM map WHERE key=?", [k]);
      db.close();
    </method>
  </extension>

</plugin>
</plugins>
