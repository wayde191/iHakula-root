<?xml version="1.0" encoding="UTF-8"?>
<class access="public" deprecated="1" id="class:jsx3.EVT" name="jsx3.EVT" package="jsx3" shortname="EVT">
  <text>This class is the static event controller for the GI framework. It abstracts the browser-specific implementations
of the event object while providing extensions of its own (i.e., drag/drop, event binding, etc).</text>
  <deprecated>Use class &lt;code&gt;jsx3.gui.Event&lt;/code&gt; instead.</deprecated>
  <see source="jsx3.gui.Event">jsx3.gui.Event</see>
  <superclass id="super:0" loaded="1" name="Object"/>
  <superclass direct="1" id="super:1" loaded="1" name="jsx3.lang.Object"/>
  <implements direct="1" id="implements:0" loaded="1" name="jsx3.util.EventDispatcher"/>
  <constructor access="public" id="method:init" name="init">
    <param name="e"/>
    <text>Use this instance initializer for wrapped access to the current event object <code>event</code> at a later point in time.
   </text>
  </constructor>
  <method access="public" deprecated="1" id="method:handleEvent" name="handleEvent">
    <param name="strType" text="the event type to handle">
      <type link="1" name="String"/>
    </param>
    <param name="bReturn" text="">
      <type class="Boolean" link="1" name="boolean"/>
    </param>
    <return text="the result of the event eval, but only if parameter &lt;code&gt;bReturn&lt;/code&gt; is true, otherwise no return statement">
      <type link="1" name="Object"/>
    </return>
    <text>the JSXEVENT class maintains an object array indexed via the EVENTTYPE constant for the given event.  When the event bubbles up the IE DOM, or when this function is called directly, the JScript code bound to the given event is exectued via the JScript 'eval()' function</text>
    <deprecated>use jsx3.gui.Event.publish() instead
   </deprecated>
  </method>
  <method access="public" deprecated="1" id="method:registerEvent" name="registerEvent">
    <param name="EVENTTYPE" text="the type of event to handle such as mousedown, mouseup, etc">
      <type link="1" name="String"/>
    </param>
    <param name="strCode" text="JScript code (passed as string) that will be evaluated via the JScript eval() function when the given event fires.  Note: it is important that the code contain a trailing semicolon ';', in case a subsequent function binds its own callback code">
      <type link="1" name="String"/>
    </param>
    <text>typically called by a JSX GUI foundation class (such as the JSXMenu class).
         Allows the given class to be notified when a given event occurs.  For example in the case
         of the JSXMenu class, it must be notified to hide any visible menu when the user mouses down
         in the document.</text>
    <deprecated>use jsx3.gui.Event.subscribe instead</deprecated>
    <see idfk="smethod:subscribe" source="jsx3.gui.Event">jsx3.gui.Event.subscribe()</see>
  </method>
  <method access="public" id="method:event" name="event">
    <return text="event&#10;   ">
      <type link="1" name="Object"/>
    </return>
    <text>Returns handle to the native browser event object (window.event)</text>
  </method>
  <method access="public" id="method:srcElement" name="srcElement">
    <return text="HTML object&#10;   ">
      <type link="1" name="HTMLElement"/>
    </return>
    <text>Returns handle to the HTML element acted upon (click, mousedown, etc)</text>
  </method>
  <method access="public" id="method:toElement" name="toElement">
    <return text="HTML object&#10;   ">
      <type link="1" name="HTMLElement"/>
    </return>
    <text>Returns handle to the HTML element that was moused over (onmouseover)</text>
  </method>
  <method access="public" id="method:fromElement" name="fromElement">
    <return text="HTML object&#10;   ">
      <type link="1" name="HTMLElement"/>
    </return>
    <text>Returns handle to the HTML element that was moused away from (onmouseout)</text>
  </method>
  <method access="public" id="method:keyCode" name="keyCode">
    <return text="keycode&#10;   ">
      <type class="Number" link="1" name="int"/>
    </return>
    <text>Returns integer representing the key code of the key just pressed/keyed-down</text>
  </method>
  <method access="public" id="method:clientX" name="clientX">
    <return text="pixel position&#10;   ">
      <type class="Number" link="1" name="int"/>
    </return>
    <text>Returns the clientX property for the event (where it occurred on-screen)</text>
  </method>
  <method access="public" id="method:clientY" name="clientY">
    <return text="pixel position&#10;   ">
      <type class="Number" link="1" name="int"/>
    </return>
    <text>Returns the clientY property for the event (where it occurred on-screen)</text>
  </method>
  <method access="public" id="method:getTrueX" name="getTrueX">
    <return text="pixel position&#10;   ">
      <type class="Number" link="1" name="int"/>
    </return>
    <text>Returns the actual position in the browser from the left edge for where the event occurred;</text>
  </method>
  <method access="public" id="method:getTrueY" name="getTrueY">
    <return text="pixel position&#10;   ">
      <type class="Number" link="1" name="int"/>
    </return>
    <text>Returns the actual position in the browser from the top edge for where the event occurred;</text>
  </method>
  <method access="public" id="method:shiftKey" name="shiftKey">
    <return text="">
      <type class="Boolean" link="1" name="boolean"/>
    </return>
    <text>Returns true if the shift key was pressed</text>
  </method>
  <method access="public" id="method:ctrlKey" name="ctrlKey">
    <return text="">
      <type class="Boolean" link="1" name="boolean"/>
    </return>
    <text>Returns true if the ctrl key was pressed</text>
  </method>
  <method access="public" id="method:altKey" name="altKey">
    <return text="">
      <type class="Boolean" link="1" name="boolean"/>
    </return>
    <text>Returns true if the alt key was pressed</text>
  </method>
  <method access="public" id="method:enterKey" name="enterKey">
    <return text="">
      <type class="Boolean" link="1" name="boolean"/>
    </return>
    <text>Returns true if the enter key was pressed</text>
  </method>
  <method access="public" id="method:spaceKey" name="spaceKey">
    <return text="">
      <type class="Boolean" link="1" name="boolean"/>
    </return>
    <text>Returns true if the space bar was pressed</text>
  </method>
  <method access="public" id="method:tabKey" name="tabKey">
    <return text="">
      <type class="Boolean" link="1" name="boolean"/>
    </return>
    <text>Returns true if the tab key was pressed</text>
  </method>
  <method access="public" id="method:rightArrow" name="rightArrow">
    <return text="">
      <type class="Boolean" link="1" name="boolean"/>
    </return>
    <text>Returns true if the right-arrow key was pressed</text>
  </method>
  <method access="public" id="method:leftArrow" name="leftArrow">
    <return text="">
      <type class="Boolean" link="1" name="boolean"/>
    </return>
    <text>Returns true if the left-arrow key was pressed</text>
  </method>
  <method access="public" id="method:upArrow" name="upArrow">
    <return text="">
      <type class="Boolean" link="1" name="boolean"/>
    </return>
    <text>Returns true if the up-arrow key was pressed</text>
  </method>
  <method access="public" id="method:downArrow" name="downArrow">
    <return text="">
      <type class="Boolean" link="1" name="boolean"/>
    </return>
    <text>Returns true if the down-arrow key was pressed</text>
  </method>
  <method access="public" id="method:deleteKey" name="deleteKey">
    <return text="">
      <type class="Boolean" link="1" name="boolean"/>
    </return>
    <text>Returns true if the delete key was pressed</text>
  </method>
  <method access="public" id="method:backspaceKey" name="backspaceKey">
    <return text="">
      <type class="Boolean" link="1" name="boolean"/>
    </return>
    <text>Returns true if the backspace key was pressed</text>
  </method>
  <method access="public" id="method:insertKey" name="insertKey">
    <return text="">
      <type class="Boolean" link="1" name="boolean"/>
    </return>
    <text>Returns true if the insert key was pressed</text>
  </method>
  <method access="public" id="method:homeKey" name="homeKey">
    <return text="">
      <type class="Boolean" link="1" name="boolean"/>
    </return>
    <text>Returns true if the home key was pressed</text>
  </method>
  <method access="public" id="method:endKey" name="endKey">
    <return text="">
      <type class="Boolean" link="1" name="boolean"/>
    </return>
    <text>Returns true if the end key was pressed</text>
  </method>
  <method access="public" id="method:pageUpKey" name="pageUpKey">
    <return text="">
      <type class="Boolean" link="1" name="boolean"/>
    </return>
    <text>Returns true if the page-up key was pressed</text>
  </method>
  <method access="public" id="method:pageDownKey" name="pageDownKey">
    <return text="">
      <type class="Boolean" link="1" name="boolean"/>
    </return>
    <text>Returns true if the page-down key was pressed</text>
  </method>
  <method access="public" id="method:escapeKey" name="escapeKey">
    <return text="">
      <type class="Boolean" link="1" name="boolean"/>
    </return>
    <text>Returns true if the escape key was pressed</text>
  </method>
  <method access="public" id="method:exists" name="exists">
    <return text="">
      <type class="Boolean" link="1" name="boolean"/>
    </return>
    <text>Returns true if the native event object is present (if an event of any type actualy occurred)</text>
  </method>
  <method access="public" id="method:cancelBubble" name="cancelBubble">
    <text>cancels event bubbling for the event
   </text>
  </method>
  <method access="public" id="method:cancelReturn" name="cancelReturn">
    <text>cancels the returnValue for the event
   </text>
  </method>
  <method access="public" id="method:cancelKey" name="cancelKey">
    <text>cancels the key from firing by setting the keyCode to 0 (zero) for the event
   </text>
  </method>
  <method access="public" id="method:leftButton" name="leftButton">
    <return text="">
      <type class="Boolean" link="1" name="boolean"/>
    </return>
    <text>Returns true if the left-mouse-button was clicked</text>
  </method>
  <method access="public" id="method:rightButton" name="rightButton">
    <return text="">
      <type class="Boolean" link="1" name="boolean"/>
    </return>
    <text>Returns true if the right-mouse-button was clicked</text>
  </method>
  <method access="public" id="method:button" name="button">
    <return text="">
      <type class="Number" link="1" name="int"/>
    </return>
    <text>Returns integer designating the mouse button clicked/moused-down/moused-up; 1 (left), 2 (right), and as supported</text>
  </method>
  <method access="public" id="method:setReturn" name="setReturn">
    <param name="RETURN" text="string message to set on the returnValue for the event&#10;   ">
      <type link="1" name="String"/>
    </param>
    <text>sets string message to set on the returnValue for the event</text>
  </method>
  <method access="public" id="method:setKeyCode" name="setKeyCode">
    <param name="intKeyCode" text="keycode&#10;   ">
      <type class="Number" link="1" name="int"/>
    </param>
    <text>sets/updates the keycode for the event</text>
  </method>
  <method id="method:publish" idfk="method:publish" inherited="1" name="publish" source="jsx3.util.EventDispatcher"/>
  <method id="method:subscribe" idfk="method:subscribe" inherited="1" name="subscribe" source="jsx3.util.EventDispatcher"/>
  <method id="method:unsubscribe" idfk="method:unsubscribe" inherited="1" name="unsubscribe" source="jsx3.util.EventDispatcher"/>
  <method id="method:unsubscribeAll" idfk="method:unsubscribeAll" inherited="1" name="unsubscribeAll" source="jsx3.util.EventDispatcher"/>
  <method id="method:clone" idfk="method:clone" inherited="1" name="clone" source="jsx3.lang.Object"/>
  <method id="method:equals" idfk="method:equals" inherited="1" name="equals" source="jsx3.lang.Object"/>
  <method id="method:eval" idfk="method:eval" inherited="1" name="eval" source="jsx3.lang.Object"/>
  <method id="method:getClass" idfk="method:getClass" inherited="1" name="getClass" source="jsx3.lang.Object"/>
  <method deprecated="1" id="method:getInstanceOf" idfk="method:getInstanceOf" inherited="1" name="getInstanceOf" source="jsx3.lang.Object"/>
  <method deprecated="1" id="method:getInstanceOfClass" idfk="method:getInstanceOfClass" inherited="1" name="getInstanceOfClass" source="jsx3.lang.Object"/>
  <method deprecated="1" id="method:getInstanceOfPackage" idfk="method:getInstanceOfPackage" inherited="1" name="getInstanceOfPackage" source="jsx3.lang.Object"/>
  <method id="method:instanceOf" idfk="method:instanceOf" inherited="1" name="instanceOf" source="jsx3.lang.Object"/>
  <method deprecated="1" id="method:isInstanceOf" idfk="method:isInstanceOf" inherited="1" name="isInstanceOf" source="jsx3.lang.Object"/>
  <method deprecated="1" id="method:isSubclassOf" idfk="method:isSubclassOf" inherited="1" name="isSubclassOf" source="jsx3.lang.Object"/>
  <method deprecated="1" id="method:jsxmix" idfk="method:jsxmix" inherited="1" name="jsxmix" source="jsx3.lang.Object"/>
  <method id="method:jsxsuper" idfk="method:jsxsuper" inherited="1" name="jsxsuper" source="jsx3.lang.Object"/>
  <method id="method:jsxsupermix" idfk="method:jsxsupermix" inherited="1" name="jsxsupermix" source="jsx3.lang.Object"/>
  <method deprecated="1" id="method:setInstanceOf" idfk="method:setInstanceOf" inherited="1" name="setInstanceOf" source="jsx3.lang.Object"/>
  <method id="method:toString" idfk="method:toString" inherited="1" name="toString" source="jsx3.lang.Object"/>
</class>
