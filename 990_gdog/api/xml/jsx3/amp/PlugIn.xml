<?xml version="1.0" encoding="UTF-8"?>
<class access="public" id="class:jsx3.amp.PlugIn" name="jsx3.amp.PlugIn" package="jsx3.amp" shortname="PlugIn">
  <text>An AMP plug-in. A plug-in is a logical collection of application logic and resources. Plug-ins are loaded
as needed and may contain extension points and extensions.
 </text>
  <superclass id="super:0" loaded="1" name="Object"/>
  <superclass direct="1" id="super:1" loaded="1" name="jsx3.lang.Object"/>
  <implements direct="1" id="implements:0" loaded="1" name="jsx3.amp.Bindable"/>
  <implements direct="1" id="implements:1" loaded="1" name="jsx3.net.URIResolver"/>
  <implements direct="1" id="implements:2" loaded="1" name="jsx3.util.EventDispatcher"/>
  <field access="public" class="jsx3.amp.PlugIn" fullname="jsx3.amp.PlugIn.READY" id="sfield:READY" name="READY" static="1" value="&quot;ready&quot;">
    <type link="1" name="String"/>
    <text> Event subject published when this plug-in has loaded completely. </text>
  </field>
  <field access="public" class="jsx3.amp.PlugIn" fullname="jsx3.amp.PlugIn.EXTENDED" id="sfield:EXTENDED" name="EXTENDED" static="1" value="&quot;extended&quot;">
    <type link="1" name="String"/>
    <text> Event subject published when an extension point of this plug-in has been extended. </text>
  </field>
  <method access="public" id="method:setData" name="setData">
    <param name="objElm" text="">
      <type link="1" name="jsx3.xml.Entity"/>
    </param>
    <text>Called after this plug-in is instantiated to provide the plug-in with its XML configuration data. This method
is optional for objects used as plug-ins.</text>
  </method>
  <method access="public" id="method:setEngine" name="setEngine">
    <param name="objEngine" text="">
      <type link="1" name="jsx3.amp.Engine"/>
    </param>
    <text>Called after this plug-in is instantiated to provide the plug-in with the engine that created it. This method
is optional for objects used as plug-ins.</text>
  </method>
  <method access="public" id="method:setPath" name="setPath">
    <param name="strPath" text="">
      <type link="1" name="String"/>
    </param>
    <text>Called after this plug-in is instantiated to provide the plug-in with its path. This method
is optional for objects used as plug-ins.</text>
  </method>
  <method access="public" id="method:setResources" name="setResources">
    <param name="arrRsrc" text="">
      <type link="1" name="Array">
        <type link="1" name="jsx3.amp.Resource"/>
      </type>
    </param>
    <text>Called after this plug-in is instantiated to provide the plug-in with the resources defined in the 
configuration data. This method is optional for objects used as plug-ins.</text>
  </method>
  <method access="public" id="method:getId" name="getId">
    <return text="">
      <type link="1" name="String"/>
    </return>
    <text>Returns the id attribute from the plug-in configuration element.</text>
  </method>
  <method access="public" id="method:isGlobal" name="isGlobal">
    <return text="">
      <type class="Boolean" link="1" name="boolean"/>
    </return>
    <text>Returns whether this is a global plug-in. A global plug-in is only instantiated once for all of the
applications that register it.</text>
  </method>
  <method access="public" id="method:getName" name="getName">
    <return text="">
      <type link="1" name="String"/>
    </return>
    <text>Returns the name attribute from the plug-in configuration element.</text>
  </method>
  <method access="public" id="method:getVersion" name="getVersion">
    <return text="">
      <type link="1" name="String"/>
    </return>
    <text>Returns the version attribute from the plug-in configuration element.</text>
  </method>
  <method access="public" id="method:getResources" name="getResources">
    <return text="">
      <type link="1" name="jsx3.$Array">
        <type link="1" name="jsx3.amp.Resource"/>
      </type>
    </return>
    <text>Returns the resources of this plug-in that are defined in the plug-in configuration data.</text>
  </method>
  <method access="public" id="method:getEvents" name="getEvents">
    <return text="">
      <type link="1" name="jsx3.$Array">
        <type link="1" name="String"/>
      </type>
    </return>
    <text>Returns the list of event subjects that this plug-in declares to publish.</text>
  </method>
  <method access="public" id="method:getResource" name="getResource">
    <param name="strId" text="">
      <type link="1" name="String"/>
    </param>
    <return text="">
      <type link="1" name="jsx3.amp.Resource"/>
    </return>
    <text>Returns a resource of this plug-in by its ID.</text>
  </method>
  <method access="public" id="method:getRequires" name="getRequires">
    <return text="">
      <type link="1" name="jsx3.$Array">
        <type link="1" name="String"/>
      </type>
    </return>
    <text>Returns the list of plug-in IDs that this plug-in requires. These plug-ins must be loaded before this plug-in
loads.</text>
  </method>
  <method access="public" async="1" id="method:load" name="load">
    <return text="">
      <type link="1" name="jsx3.$AsyncRV"/>
    </return>
    <text>Loads this plug-in asynchronously if it is not already loaded. 
   </text>
  </method>
  <method access="public" id="method:isLoaded" name="isLoaded">
    <return text="">
      <type class="Boolean" link="1" name="boolean"/>
    </return>
    <text>Returns true is all of the resources of this plug-in have loaded.</text>
  </method>
  <method access="public" id="method:getEngine" name="getEngine">
    <return text="">
      <type link="1" name="jsx3.amp.Engine"/>
    </return>
    <text>Returns the engine of this plug-in.</text>
  </method>
  <method access="public" id="method:getServer" name="getServer">
    <return text="">
      <type link="1" name="jsx3.app.Server"/>
    </return>
    <text>Returns the server of the engine of this plug-in.</text>
  </method>
  <method access="public" id="method:getExtPoints" name="getExtPoints">
    <return text="">
      <type link="1" name="jsx3.$Array">
        <type link="1" name="jsx3.amp.ExtPoint"/>
      </type>
    </return>
    <text>Returns the extension points of this plug-in.</text>
  </method>
  <method access="public" id="method:getExtPoint" name="getExtPoint">
    <param name="strId" text="the local ID of the extension point.">
      <type link="1" name="String"/>
    </param>
    <return text="">
      <type link="1" name="jsx3.amp.ExtPoint"/>
    </return>
    <text>Returns an extension point of this plug-in by its ID.</text>
  </method>
  <method access="public" id="method:getExts" name="getExts">
    <return text="">
      <type link="1" name="jsx3.$Array">
        <type link="1" name="jsx3.amp.Ext"/>
      </type>
    </return>
    <text>Returns the extensions of this plug-in.</text>
  </method>
  <method access="public" id="method:getExt" name="getExt">
    <param name="strId" text="the local ID of the extension.">
      <type link="1" name="String"/>
    </param>
    <return text="">
      <type link="1" name="jsx3.amp.Ext"/>
    </return>
    <text>Returns an extension of this plug-in by its ID.</text>
  </method>
  <method access="public" id="method:onRegister" name="onRegister">
    <text>Calls when this plug-in is registered with its engine. Subclasses may override this method to provide custom
behavior.
   </text>
  </method>
  <method access="public" id="method:onLoaded" name="onLoaded">
    <text>Called when all the resources of this plug-in have loaded. Subclasses may override this method to provide custom
behavior.
   </text>
  </method>
  <method access="public" id="method:onStartup" name="onStartup">
    <text>Called when the engine of this plug-in has completely registered all plug-ins. Subclasses may override this 
method to provide custom behavior.
   </text>
  </method>
  <method access="public" id="method:onExtension" name="onExtension">
    <param name="objExtPt" text="">
      <type link="1" name="jsx3.amp.ExtPoint"/>
    </param>
    <param name="arrExts" text="">
      <type link="1" name="Array">
        <type link="1" name="jsx3.amp.Ext"/>
      </type>
    </param>
    <text>Called (after this plug-in is instantiated) any time extensions are registered for an extension
point of this plug-in. Subclasses may override this method to provide custom behavior but should call
<code>jsxsuper</code> to ensure that the <code>EXTENDED</code> event is published.</text>
  </method>
  <method access="public" id="method:resolveURI" name="resolveURI">
    <param name="strURI" text="">
      <type link="1" name="String"/>
      <type link="1" name="jsx3.net.URI"/>
    </param>
    <return text="">
      <type link="1" name="jsx3.net.URI"/>
    </return>
    <text>Implements <code>jsx3.net.URIResolver</code>.</text>
    <overridesmix id="overrides:resolveURI" idfk="method:resolveURI" name="resolveURI" source="jsx3.net.URIResolver"/>
  </method>
  <method access="public" id="method:getUriPrefix" name="getUriPrefix">
    <return text="">
      <type link="1" name="String"/>
    </return>
    <text>Implements <code>jsx3.net.URIResolver</code>.</text>
    <overridesmix id="overrides:getUriPrefix" idfk="method:getUriPrefix" name="getUriPrefix" source="jsx3.net.URIResolver"/>
  </method>
  <method access="public" id="method:relativizeURI" name="relativizeURI">
    <param name="strURI" text="">
      <type link="1" name="String"/>
      <type link="1" name="jsx3.net.URI"/>
    </param>
    <param name="bRel" text="">
      <type class="Boolean" link="1" name="boolean"/>
    </param>
    <return text="">
      <type link="1" name="jsx3.net.URI"/>
    </return>
    <text>Implements <code>jsx3.net.URIResolver</code>.</text>
    <overridesmix id="overrides:relativizeURI" idfk="method:relativizeURI" name="relativizeURI" source="jsx3.net.URIResolver"/>
  </method>
  <method access="public" id="method:getLog" name="getLog">
    <return text="">
      <type link="1" name="jsx3.util.Logger"/>
    </return>
    <text>Returns a logger for this plug-in.</text>
  </method>
  <method access="public" id="method:loadRsrcComponent" name="loadRsrcComponent">
    <param name="strRsrcId" text="">
      <type link="1" name="String"/>
      <type link="1" name="jsx3.amp.Resource"/>
    </param>
    <param name="objParent" text="the GUI component into which to load the resource.">
      <type link="1" name="jsx3.app.Model"/>
    </param>
    <param name="bPaint" text="whether to paint the loaded resource (default is &lt;code&gt;true&lt;/code&gt;).&#10;   ">
      <type class="Boolean" link="1" name="boolean"/>
    </param>
    <text>Loads the contents of a plug-in resource as a GUI component. The resource should be an XML resource whose
data is a GI component file. The resource must be already loaded to call this method. This method loads the
component with this plug-in as the URI resolver. Therefore, any relative paths in the component will be
resolved relative to the directory of this plug-in.
<p/>
Once the component is loaded, this method defines a <code>getPlugIn()</code> method on the root component object
that returns this component. In addition, if the root component object defines an <code>onRsrcLoad()</code>
method, that method is called.</text>
  </method>
  <method access="public" id="smethod:isBindExpr" name="isBindExpr" static="1">
    <param name="e" text="">
      <type link="1" name="String"/>
    </param>
    <text>Returns <code>true</code> if <code>e</code> is a binding expression. A binding expression starts with '{'
and ends with '}'.</text>
  </method>
  <method access="public" id="method:regBindExpr" name="regBindExpr">
    <param name="expression" text="a valid binding expression.">
      <type link="1" name="String"/>
    </param>
    <param name="handler" text="">
      <type link="1" name="Function"/>
    </param>
    <text>Registers a function to be called when the value of a binding expression changes.
<p/>
The binding expression should begin with a '{' and end with a '}'. The expression is parsed for any tokens that
match a bindable property of this object. <code>handler</code> will be invoked any time one of these
bindable properties changes value. This function is passed the value of the binding expression. The binding
expression is evaluated in the context of this object. The "this" keyword is optional in the expression
because the expression is evaluated inside of a <code>with</code> block.</text>
    <see>#isExpression()</see>
  </method>
  <method id="method:publish" idfk="method:publish" inherited="1" name="publish" source="jsx3.util.EventDispatcher"/>
  <method id="method:subscribe" idfk="method:subscribe" inherited="1" name="subscribe" source="jsx3.util.EventDispatcher"/>
  <method id="method:unsubscribe" idfk="method:unsubscribe" inherited="1" name="unsubscribe" source="jsx3.util.EventDispatcher"/>
  <method id="method:unsubscribeAll" idfk="method:unsubscribeAll" inherited="1" name="unsubscribeAll" source="jsx3.util.EventDispatcher"/>
  <method id="method:addBindableProp" idfk="method:addBindableProp" inherited="1" name="addBindableProp" source="jsx3.amp.Bindable"/>
  <method id="method:getBindableProps" idfk="method:getBindableProps" inherited="1" name="getBindableProps" source="jsx3.amp.Bindable"/>
  <method id="method:setBindableProp" idfk="method:setBindableProp" inherited="1" name="setBindableProp" source="jsx3.amp.Bindable"/>
  <method id="method:updateBindable" idfk="method:updateBindable" inherited="1" name="updateBindable" source="jsx3.amp.Bindable"/>
  <method id="method:updateBindableOn" idfk="method:updateBindableOn" inherited="1" name="updateBindableOn" source="jsx3.amp.Bindable"/>
  <method id="method:clone" idfk="method:clone" inherited="1" name="clone" source="jsx3.lang.Object"/>
  <method id="method:equals" idfk="method:equals" inherited="1" name="equals" source="jsx3.lang.Object"/>
  <method id="method:eval" idfk="method:eval" inherited="1" name="eval" source="jsx3.lang.Object"/>
  <method id="method:getClass" idfk="method:getClass" inherited="1" name="getClass" source="jsx3.lang.Object"/>
  <method deprecated="1" id="method:getInstanceOf" idfk="method:getInstanceOf" inherited="1" name="getInstanceOf" source="jsx3.lang.Object"/>
  <method deprecated="1" id="method:getInstanceOfClass" idfk="method:getInstanceOfClass" inherited="1" name="getInstanceOfClass" source="jsx3.lang.Object"/>
  <method deprecated="1" id="method:getInstanceOfPackage" idfk="method:getInstanceOfPackage" inherited="1" name="getInstanceOfPackage" source="jsx3.lang.Object"/>
  <method id="method:instanceOf" idfk="method:instanceOf" inherited="1" name="instanceOf" source="jsx3.lang.Object"/>
  <method deprecated="1" id="method:isInstanceOf" idfk="method:isInstanceOf" inherited="1" name="isInstanceOf" source="jsx3.lang.Object"/>
  <method deprecated="1" id="method:isSubclassOf" idfk="method:isSubclassOf" inherited="1" name="isSubclassOf" source="jsx3.lang.Object"/>
  <method deprecated="1" id="method:jsxmix" idfk="method:jsxmix" inherited="1" name="jsxmix" source="jsx3.lang.Object"/>
  <method id="method:jsxsuper" idfk="method:jsxsuper" inherited="1" name="jsxsuper" source="jsx3.lang.Object"/>
  <method id="method:jsxsupermix" idfk="method:jsxsupermix" inherited="1" name="jsxsupermix" source="jsx3.lang.Object"/>
  <method deprecated="1" id="method:setInstanceOf" idfk="method:setInstanceOf" inherited="1" name="setInstanceOf" source="jsx3.lang.Object"/>
  <method id="method:toString" idfk="method:toString" inherited="1" name="toString" source="jsx3.lang.Object"/>
</class>
