<?xml version="1.0" encoding="UTF-8"?>
<class access="public" id="class:jsx3.amp.util.WizardPane" name="jsx3.amp.util.WizardPane" package="jsx3.amp.util" shortname="WizardPane">
  <text>A pane of a wizard. Provided by the <code>jsx3.amp.util.wizard</code> plug-in.
 </text>
  <superclass id="super:0" loaded="1" name="Object"/>
  <superclass direct="1" id="super:1" loaded="1" name="jsx3.lang.Object"/>
  <implements direct="1" id="implements:0" loaded="1" name="jsx3.util.EventDispatcher"/>
  <constructor access="public" id="method:init" name="init">
    <param name="data" text="the UI component that renders this pane.">
      <type link="1" name="jsx3.xml.Entity"/>
      <type link="1" name="jsx3.amp.Resource"/>
    </param>
    <param name="resolver" text="the plug-in against which to resolve paths in the UI component.">
      <type link="1" name="jsx3.amp.PlugIn"/>
    </param>
    <return text="">
      <type link="1" name="jsx3.app.Model"/>
    </return>
    <text>The instance initializer.</text>
  </constructor>
  <method access="public" id="method:getTitle" name="getTitle">
    <return text="">
      <type link="1" name="String"/>
    </return>
    <text>Returns the title of this pane.</text>
  </method>
  <method access="public" id="method:getUI" name="getUI">
    <return text="">
      <type link="1" name="jsx3.app.Model"/>
    </return>
    <text>Returns the root UI component of this pane once it has been rendered.</text>
  </method>
  <method access="public" id="method:getFirstResponder" name="getFirstResponder">
    <return text="">
      <type link="1" name="jsx3.app.Model"/>
    </return>
    <text>Returns the object in the UI of this pane that should be focused when the pane is revealed. This method
delegates to the <code>getFirstResponder()</code> method of the UI component, if that method is defined.</text>
  </method>
  <method access="public" id="method:getWizard" name="getWizard">
    <return text="">
      <type link="1" name="jsx3.amp.util.Wizard"/>
    </return>
    <text>Returns the wizard owning this pane.</text>
  </method>
  <method access="public" id="method:onNext" name="onNext">
    <return text="&lt;code&gt;{ok:Boolean, alert:Boolean, title:String, message:String}&lt;/code&gt;&#10;   "/>
    <text>Called when the UI requests continuing to the next pane.  This pane may veto such a change by returning
an object with the <code>ok</code> field equal to <code>false</code>.</text>
  </method>
  <method access="public" id="method:onPrevious" name="onPrevious">
    <return text="&lt;code&gt;{ok:Boolean, alert:Boolean, title:String, message:String}&lt;/code&gt;&#10;   "/>
    <text>Called when the UI requests backtracking to the previous pane. This pane may veto such a change by returning
an object with the <code>ok</code> field equal to <code>false</code>.</text>
  </method>
  <method access="public" id="method:onEnter" name="onEnter">
    <param name="objSession" text="">
      <type link="1" name="Object"/>
    </param>
    <text>Called when this pane is revealed. Calls the <code>onReveal()</code> method of the root UI component, if that
method is defined.</text>
  </method>
  <method access="public" id="method:onExit" name="onExit">
    <param name="objSession" text="">
      <type link="1" name="Object"/>
    </param>
    <text>Called when this pane is hidden. Calls the <code>onConceal()</code> method of the root UI component, if that
method is defined.</text>
  </method>
  <method access="public" id="method:mayPrevious" name="mayPrevious">
    <return text="">
      <type class="Boolean" link="1" name="boolean"/>
    </return>
    <text>Returns <code>true</code> if the previous button should be enabled.</text>
  </method>
  <method access="public" id="method:mayCancel" name="mayCancel">
    <return text="">
      <type class="Boolean" link="1" name="boolean"/>
    </return>
    <text>Returns <code>true</code> if the cancel button should be enabled.</text>
  </method>
  <method access="public" id="method:mayNext" name="mayNext">
    <return text="">
      <type class="Boolean" link="1" name="boolean"/>
    </return>
    <text>Returns <code>true</code> if the next button should be enabled.</text>
  </method>
  <method access="public" id="method:mayFinish" name="mayFinish">
    <return text="">
      <type class="Boolean" link="1" name="boolean"/>
    </return>
    <text>Returns <code>true</code> if the finish button should be enabled.</text>
  </method>
  <method id="method:publish" idfk="method:publish" inherited="1" name="publish" source="jsx3.util.EventDispatcher"/>
  <method id="method:subscribe" idfk="method:subscribe" inherited="1" name="subscribe" source="jsx3.util.EventDispatcher"/>
  <method id="method:unsubscribe" idfk="method:unsubscribe" inherited="1" name="unsubscribe" source="jsx3.util.EventDispatcher"/>
  <method id="method:unsubscribeAll" idfk="method:unsubscribeAll" inherited="1" name="unsubscribeAll" source="jsx3.util.EventDispatcher"/>
  <method id="method:clone" idfk="method:clone" inherited="1" name="clone" source="jsx3.lang.Object"/>
  <method id="method:equals" idfk="method:equals" inherited="1" name="equals" source="jsx3.lang.Object"/>
  <method id="method:eval" idfk="method:eval" inherited="1" name="eval" source="jsx3.lang.Object"/>
  <method id="method:getClass" idfk="method:getClass" inherited="1" name="getClass" source="jsx3.lang.Object"/>
  <method deprecated="1" id="method:getInstanceOf" idfk="method:getInstanceOf" inherited="1" name="getInstanceOf" source="jsx3.lang.Object"/>
  <method deprecated="1" id="method:getInstanceOfClass" idfk="method:getInstanceOfClass" inherited="1" name="getInstanceOfClass" source="jsx3.lang.Object"/>
  <method deprecated="1" id="method:getInstanceOfPackage" idfk="method:getInstanceOfPackage" inherited="1" name="getInstanceOfPackage" source="jsx3.lang.Object"/>
  <method id="method:instanceOf" idfk="method:instanceOf" inherited="1" name="instanceOf" source="jsx3.lang.Object"/>
  <method deprecated="1" id="method:isInstanceOf" idfk="method:isInstanceOf" inherited="1" name="isInstanceOf" source="jsx3.lang.Object"/>
  <method deprecated="1" id="method:isSubclassOf" idfk="method:isSubclassOf" inherited="1" name="isSubclassOf" source="jsx3.lang.Object"/>
  <method deprecated="1" id="method:jsxmix" idfk="method:jsxmix" inherited="1" name="jsxmix" source="jsx3.lang.Object"/>
  <method id="method:jsxsuper" idfk="method:jsxsuper" inherited="1" name="jsxsuper" source="jsx3.lang.Object"/>
  <method id="method:jsxsupermix" idfk="method:jsxsupermix" inherited="1" name="jsxsupermix" source="jsx3.lang.Object"/>
  <method deprecated="1" id="method:setInstanceOf" idfk="method:setInstanceOf" inherited="1" name="setInstanceOf" source="jsx3.lang.Object"/>
  <method id="method:toString" idfk="method:toString" inherited="1" name="toString" source="jsx3.lang.Object"/>
</class>
