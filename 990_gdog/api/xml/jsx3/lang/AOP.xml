<?xml version="1.0" encoding="UTF-8"?>
<class access="public" id="class:jsx3.lang.AOP" name="jsx3.lang.AOP" package="jsx3.lang" shortname="AOP" since="3.6&#10; ">
  <text>Simple aspect oriented programming for General Interface.
<p/>
Advice can be added before, after, and around any call to an instance method of a GI class. 
<p/>
<b>Note that only the exact class and subclasses loaded after a pointcut is defined are affected.</b> 
<p/>
<b>Note that only instance methods and not static methods can define pointcuts.</b>
<p/>
The second argument to the before, after, and around methods is the advice function, examples of which are 
provided here:
<pre>
jsx3.AOP.pc("myPointcut", {classes:"jsx3.xml.Document", methods:"load"});
jsx3.AOP.before("myPointcut", function(strURL, intTimeout) {
  jsx3.log("load() called on " + this + " with URL " + strURL + ".");
});
jsx3.AOP.after("myPointcut", function(rv, strURL, intTimeout) {
  jsx3.log("load() called on " + this + " with URL " + strURL + " returned " + rv + ".");
});
jsx3.AOP.around("myPointcut", function(aop, strURL, intTimeout) {
  var t1 = new Date().getTime();
  var rv = aop.proceed(strURL, intTimeout);
  var tTotal = new Date().getTime() - t1;
  jsx3.log("load() called on " + this + " with URL " + strURL + " took " + tTotal + " ms and returned " + rv + ".");
  return rv;
});
</pre>
Note that after advice receives the method return value as the first method parameter. Note also that around
advice must manage the AOP chain by calling <code>proceed()</code> on the first method parameter and by returning
the return value of this call. </text>
  <superclass id="super:0" loaded="1" name="Object"/>
  <superclass direct="1" id="super:1" loaded="1" name="jsx3.lang.Object"/>
  <method access="public" id="smethod:pc" name="pc" static="1">
    <param name="strName" text="the name of the pointcut to create.">
      <type link="1" name="String"/>
    </param>
    <param name="objConditions" text="the pointcut conditions. &#10;   ">
      <type link="1" name="Object"/>
    </param>
    <text>Creates a new pointcut. The supported conditions are as follows:
<ul>
  <li>classes {String|Function|jsx3.Class|Array&lt;String|Function|jsx3.Class&gt;}: 
        the classes for which to look for methods.</li>
  <li>methods {String|Array&lt;String&gt;}: the names of the methods for which to add pointcuts. Any name can be a 
        regular expression with "*" expanded to <code>\w+</code>.</li>
  <li>type: {String|Function|jsx3.Class}: the pointcut will only affect objects that are 
        <code>instanceOf(type)</code>.</li>
</ul>
    </text>
  </method>
  <method access="public" id="smethod:pcrem" name="pcrem" static="1">
    <param name="strName" text="the name of the pointcut to remove.&#10;   ">
      <type link="1" name="String"/>
    </param>
    <text>Removes a pointcut.</text>
  </method>
  <method access="public" id="smethod:before" name="before" static="1">
    <param name="strPName" text="the pointcut name.">
      <type link="1" name="String"/>
    </param>
    <param name="fctAdvice" text="the advice function.">
      <type link="1" name="Function"/>
    </param>
    <param name="bRemove" text="if &lt;code&gt;true&lt;/code&gt;, remove this advice.&#10;   ">
      <type class="Boolean" link="1" name="boolean"/>
    </param>
  </method>
  <method access="public" id="smethod:after" name="after" static="1">
    <param name="strPName" text="the pointcut name.">
      <type link="1" name="String"/>
    </param>
    <param name="fctAdvice" text="the advice function.">
      <type link="1" name="Function"/>
    </param>
    <param name="bRemove" text="if &lt;code&gt;true&lt;/code&gt;, remove this advice.&#10;   ">
      <type class="Boolean" link="1" name="boolean"/>
    </param>
  </method>
  <method access="public" id="smethod:around" name="around" static="1">
    <param name="strPName" text="the pointcut name.">
      <type link="1" name="String"/>
    </param>
    <param name="fctAdvice" text="the advice function.">
      <type link="1" name="Function"/>
    </param>
    <param name="bRemove" text="if &lt;code&gt;true&lt;/code&gt;, remove this advice.&#10;   ">
      <type class="Boolean" link="1" name="boolean"/>
    </param>
  </method>
  <method id="method:clone" idfk="method:clone" inherited="1" name="clone" source="jsx3.lang.Object"/>
  <method id="method:equals" idfk="method:equals" inherited="1" name="equals" source="jsx3.lang.Object"/>
  <method id="method:eval" idfk="method:eval" inherited="1" name="eval" source="jsx3.lang.Object"/>
  <method id="method:getClass" idfk="method:getClass" inherited="1" name="getClass" source="jsx3.lang.Object"/>
  <method deprecated="1" id="method:getInstanceOf" idfk="method:getInstanceOf" inherited="1" name="getInstanceOf" source="jsx3.lang.Object"/>
  <method deprecated="1" id="method:getInstanceOfClass" idfk="method:getInstanceOfClass" inherited="1" name="getInstanceOfClass" source="jsx3.lang.Object"/>
  <method deprecated="1" id="method:getInstanceOfPackage" idfk="method:getInstanceOfPackage" inherited="1" name="getInstanceOfPackage" source="jsx3.lang.Object"/>
  <method id="method:instanceOf" idfk="method:instanceOf" inherited="1" name="instanceOf" source="jsx3.lang.Object"/>
  <method deprecated="1" id="method:isInstanceOf" idfk="method:isInstanceOf" inherited="1" name="isInstanceOf" source="jsx3.lang.Object"/>
  <method deprecated="1" id="method:isSubclassOf" idfk="method:isSubclassOf" inherited="1" name="isSubclassOf" source="jsx3.lang.Object"/>
  <method deprecated="1" id="method:jsxmix" idfk="method:jsxmix" inherited="1" name="jsxmix" source="jsx3.lang.Object"/>
  <method id="method:jsxsuper" idfk="method:jsxsuper" inherited="1" name="jsxsuper" source="jsx3.lang.Object"/>
  <method id="method:jsxsupermix" idfk="method:jsxsupermix" inherited="1" name="jsxsupermix" source="jsx3.lang.Object"/>
  <method deprecated="1" id="method:setInstanceOf" idfk="method:setInstanceOf" inherited="1" name="setInstanceOf" source="jsx3.lang.Object"/>
  <method id="method:toString" idfk="method:toString" inherited="1" name="toString" source="jsx3.lang.Object"/>
</class>
