<?xml version="1.0" encoding="UTF-8"?>
<class access="public" id="class:jsx3.lang.Method" name="jsx3.lang.Method" package="jsx3.lang" shortname="Method" since="3.1">
  <text>JSX Class extends the build in JavaScript class Function. Provides reflection capabilities.</text>
  <superclass id="super:0" loaded="1" name="Object"/>
  <superclass direct="1" id="super:1" loaded="1" name="jsx3.lang.Object"/>
  <method access="public" id="method:getName" name="getName">
    <return text="">
      <type link="1" name="String"/>
    </return>
    <text>Returns the name of the method. The name of the method is determined when the class is defined.</text>
  </method>
  <method access="public" id="method:getArity" name="getArity">
    <return text="">
      <type class="Number" link="1" name="int"/>
    </return>
    <text>Returns the number of parameters that this method takes (as declared in the JavaScript source).</text>
  </method>
  <method access="public" id="method:getParameterNames" name="getParameterNames">
    <return text="">
      <type link="1" name="Array">
        <type link="1" name="String"/>
      </type>
    </return>
    <text>Returns the names of parameters that this method takes (as declared in the JavaScript source).</text>
  </method>
  <method access="public" id="method:getParameterName" name="getParameterName">
    <param name="intIndex" text="the index of the parameter name to return">
      <type class="Number" link="1" name="int"/>
    </param>
    <return text="">
      <type link="1" name="String"/>
    </return>
    <text>Returns the name of a parameter that this method takes (as declared in the JavaScript source).</text>
  </method>
  <method access="public" id="method:getDeclaringClass" name="getDeclaringClass">
    <return text="">
      <type link="1" name="jsx3.lang.Class"/>
      <type link="1" name="jsx3.lang.Package"/>
    </return>
    <text>Returns the class that defined this method.</text>
  </method>
  <method access="public" id="method:isPackageMethod" name="isPackageMethod">
    <return text="">
      <type class="Boolean" link="1" name="boolean"/>
    </return>
    <text>Returns whether the definer of this class (returned by <code>getDeclaringClass()</code>) is in fact
   a package.</text>
  </method>
  <method access="public" id="method:isStatic" name="isStatic">
    <return text="">
      <type class="Boolean" link="1" name="boolean"/>
    </return>
    <text>Returns true if this method is static (is a class method).</text>
  </method>
  <method access="public" id="method:isAbstract" name="isAbstract">
    <return text="">
      <type class="Boolean" link="1" name="boolean"/>
    </return>
    <text>Returns true if this method is abstract. Abstract methods will throw an Exception if they are
   invoked.</text>
  </method>
  <method access="public" id="method:getFunction" name="getFunction">
    <return text="">
      <type link="1" name="Function"/>
    </return>
    <text>Returns the native JavaScript function of this method.</text>
  </method>
  <method access="public" id="method:apply" name="apply">
    <param name="thisArg" text="this argument to pass to &lt;code&gt;Function.apply()&lt;/code&gt;">
      <type link="1" name="Object"/>
    </param>
    <param name="argArray" text="argument array to pass to &lt;code&gt;Function.apply()&lt;/code&gt;">
      <type link="1" name="Array"/>
    </param>
    <return text="">
      <type link="1" name="Object"/>
      <type name="undefined"/>
    </return>
    <text>Calls apply on the native function.</text>
  </method>
  <method access="public" id="method:call" name="call">
    <param name="arg" text="arguments to pass to &lt;code&gt;Function.call()&lt;/code&gt;, supports up to 11 arguments (this+10)">
      <type link="1" name="Object" varargs="1"/>
    </param>
    <return text="">
      <type link="1" name="Object"/>
      <type name="undefined"/>
    </return>
    <text>Calls call on the native function.</text>
  </method>
  <method access="public" id="smethod:newAbstract" name="newAbstract" static="1">
    <param name="paramNames" text="the names of the parameters that the abtract method will take">
      <type link="1" name="String" varargs="1"/>
    </param>
    <return text="">
      <type link="1" name="Function"/>
    </return>
    <throws text="if any element in paramNames is not a valid JavaScript identifier.&#10;   ">
      <type link="1" name="jsx3.lang.IllegalArgumentException"/>
    </throws>
    <text>Creates a new abstract method.</text>
  </method>
  <method id="method:clone" idfk="method:clone" inherited="1" name="clone" source="jsx3.lang.Object"/>
  <method id="method:equals" idfk="method:equals" inherited="1" name="equals" source="jsx3.lang.Object"/>
  <method id="method:eval" idfk="method:eval" inherited="1" name="eval" source="jsx3.lang.Object"/>
  <method id="method:getClass" idfk="method:getClass" inherited="1" name="getClass" source="jsx3.lang.Object"/>
  <method deprecated="1" id="method:getInstanceOf" idfk="method:getInstanceOf" inherited="1" name="getInstanceOf" source="jsx3.lang.Object"/>
  <method deprecated="1" id="method:getInstanceOfClass" idfk="method:getInstanceOfClass" inherited="1" name="getInstanceOfClass" source="jsx3.lang.Object"/>
  <method deprecated="1" id="method:getInstanceOfPackage" idfk="method:getInstanceOfPackage" inherited="1" name="getInstanceOfPackage" source="jsx3.lang.Object"/>
  <method id="method:instanceOf" idfk="method:instanceOf" inherited="1" name="instanceOf" source="jsx3.lang.Object"/>
  <method deprecated="1" id="method:isInstanceOf" idfk="method:isInstanceOf" inherited="1" name="isInstanceOf" source="jsx3.lang.Object"/>
  <method deprecated="1" id="method:isSubclassOf" idfk="method:isSubclassOf" inherited="1" name="isSubclassOf" source="jsx3.lang.Object"/>
  <method deprecated="1" id="method:jsxmix" idfk="method:jsxmix" inherited="1" name="jsxmix" source="jsx3.lang.Object"/>
  <method id="method:jsxsuper" idfk="method:jsxsuper" inherited="1" name="jsxsuper" source="jsx3.lang.Object"/>
  <method id="method:jsxsupermix" idfk="method:jsxsupermix" inherited="1" name="jsxsupermix" source="jsx3.lang.Object"/>
  <method deprecated="1" id="method:setInstanceOf" idfk="method:setInstanceOf" inherited="1" name="setInstanceOf" source="jsx3.lang.Object"/>
  <method id="method:toString" idfk="method:toString" inherited="1" name="toString" source="jsx3.lang.Object"/>
</class>
