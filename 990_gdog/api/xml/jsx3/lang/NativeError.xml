<?xml version="1.0" encoding="UTF-8"?>
<class access="public" id="class:jsx3.lang.NativeError" name="jsx3.lang.NativeError" package="jsx3.lang" shortname="NativeError" since="3.1&#10; ">
  <text>Wraps the browser-native exception object (what might be caught in a typical try/catch/finally block).
<p/>
The following sample code shows how to use try/catch blocks in JavaScript and ensure that a caught 
exception is always an instance of <code>jsx3.lang.Exception</code>:
<pre>
try {
  tryIt(); // code that may throw a native error (null-pointer, etc)
           // or an instance of jsx3.Exception
} catch (e) {
  e = jsx3.NativeError.wrap(e);
  // now e is guaranteed to be an instance of jsx3.Exception
  window.alert(e.printStackTrace());
}
</pre>
  </text>
  <superclass id="super:0" loaded="1" name="Object"/>
  <superclass id="super:1" loaded="1" name="jsx3.lang.Object"/>
  <superclass direct="1" id="super:2" loaded="1" name="jsx3.lang.Exception"/>
  <method access="public" id="smethod:wrap" name="wrap" static="1">
    <param name="objError" text="">
      <type link="1" name="jsx3.lang.Exception"/>
      <type link="1" name="Object"/>
    </param>
    <return text="">
      <type link="1" name="jsx3.lang.Exception"/>
    </return>
    <text>Wraps a native browser exception in an instance of <code>NativeError</code>. This method also accepts 
an argument of type <code>jsx3.Exception</code>, in which case it will just return the argument. This method wraps 
any other type of argument by converting it to a string and and creating a new j<code>sx3.Exception</code> with that message.</text>
  </method>
  <method access="public" id="smethod:initErrorCapture" name="initErrorCapture" static="1">
    <param name="fctTrap" text="">
      <type link="1" name="Function"/>
    </param>
    <text>Initializes the error trapping mechanism. Once this methor is called, all uncaught exceptions will be routed
through this class to the logging system.</text>
  </method>
  <constructor access="public" id="method:init" name="init">
    <param name="objError" text="browser-native exception object (what would be thrown by a try/catch block)">
      <type link="1" name="Object"/>
    </param>
    <throws text="if &lt;code&gt;objException&lt;/code&gt; is not a native browser error. Use &#10;   &lt;code&gt;NativeError.wrap()&lt;/code&gt; if the type of caught object is unknown.">
      <type link="1" name="jsx3.lang.IllegalArgumentException"/>
    </throws>
    <text>The instance initializer.</text>
    <see idfk="smethod:wrap" source="jsx3.lang.NativeError">wrap()</see>
  </constructor>
  <method access="public" id="method:getMessage" name="getMessage">
    <return text="">
      <type link="1" name="String"/>
    </return>
    <text>Returns the native message for this error.</text>
    <overrides id="overrides:getMessage" idfk="method:getMessage" name="getMessage" source="jsx3.lang.Exception"/>
  </method>
  <method access="public" id="method:getFileName" name="getFileName">
    <return text="">
      <type link="1" name="String"/>
    </return>
    <text>Returns the URL of the JavaScript include where this error was raised.</text>
  </method>
  <method access="public" id="method:getLineNumber" name="getLineNumber">
    <return text="">
      <type class="Number" link="1" name="int"/>
    </return>
    <text>Returns the line number in the JavaScript include where this error was raised.</text>
  </method>
  <method access="public" id="method:getName" name="getName">
    <return text="">
      <type link="1" name="String"/>
    </return>
    <text>Returns the native browser name for this error.</text>
  </method>
  <method access="public" deprecated="1" id="method:isStructural" name="isStructural">
    <return text="">
      <type class="Boolean" link="1" name="boolean"/>
    </return>
    <text>Returns true if this error was due to poorly-formatted JavaScript (lexical/structural as opposed to logical).</text>
  </method>
  <method access="public" id="method:toString" name="toString">
    <return text="">
      <type link="1" name="String"/>
    </return>
    <text>Returns the native error as a human-readable string.</text>
    <overrides id="overrides:toString" idfk="method:toString" name="toString" source="jsx3.lang.Exception"/>
  </method>
  <method id="method:getCause" idfk="method:getCause" inherited="1" name="getCause" source="jsx3.lang.Exception"/>
  <method id="method:getStack" idfk="method:getStack" inherited="1" name="getStack" source="jsx3.lang.Exception"/>
  <method id="method:printStackTrace" idfk="method:printStackTrace" inherited="1" name="printStackTrace" source="jsx3.lang.Exception"/>
  <method id="method:clone" idfk="method:clone" inherited="1" name="clone" source="jsx3.lang.Object"/>
  <method id="method:equals" idfk="method:equals" inherited="1" name="equals" source="jsx3.lang.Object"/>
  <method id="method:eval" idfk="method:eval" inherited="1" name="eval" source="jsx3.lang.Object"/>
  <method id="method:getClass" idfk="method:getClass" inherited="1" name="getClass" source="jsx3.lang.Object"/>
  <method deprecated="1" id="method:getInstanceOf" idfk="method:getInstanceOf" inherited="1" name="getInstanceOf" source="jsx3.lang.Object"/>
  <method deprecated="1" id="method:getInstanceOfClass" idfk="method:getInstanceOfClass" inherited="1" name="getInstanceOfClass" source="jsx3.lang.Object"/>
  <method deprecated="1" id="method:getInstanceOfPackage" idfk="method:getInstanceOfPackage" inherited="1" name="getInstanceOfPackage" source="jsx3.lang.Object"/>
  <method id="method:instanceOf" idfk="method:instanceOf" inherited="1" name="instanceOf" source="jsx3.lang.Object"/>
  <method deprecated="1" id="method:isInstanceOf" idfk="method:isInstanceOf" inherited="1" name="isInstanceOf" source="jsx3.lang.Object"/>
  <method deprecated="1" id="method:isSubclassOf" idfk="method:isSubclassOf" inherited="1" name="isSubclassOf" source="jsx3.lang.Object"/>
  <method deprecated="1" id="method:jsxmix" idfk="method:jsxmix" inherited="1" name="jsxmix" source="jsx3.lang.Object"/>
  <method id="method:jsxsuper" idfk="method:jsxsuper" inherited="1" name="jsxsuper" source="jsx3.lang.Object"/>
  <method id="method:jsxsupermix" idfk="method:jsxsupermix" inherited="1" name="jsxsupermix" source="jsx3.lang.Object"/>
  <method deprecated="1" id="method:setInstanceOf" idfk="method:setInstanceOf" inherited="1" name="setInstanceOf" source="jsx3.lang.Object"/>
</class>
