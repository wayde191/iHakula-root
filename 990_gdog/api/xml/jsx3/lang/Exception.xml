<?xml version="1.0" encoding="UTF-8"?>
<class access="public" id="class:jsx3.lang.Exception" name="jsx3.lang.Exception" package="jsx3.lang" shortname="Exception" since="3.1&#10; ">
  <text>The base GI exception class.
<h4>Throwing an Exception</h4>
<pre>
// throwing a simple exception:
throw new jsx3.Exception("an error occurred");

// throwing a nested exception:
try {
  ...
} catch (e) {
  throw new jsx3.Exception("an error occurred while ...", 
      jsx3.NativeError.wrap(e));
}</pre>
<h4>Catching an Exception</h4>
<pre>
// catching an exception and logging it
try {
  ...
} catch (e) {
  jsx3.util.Logger.GLOBAL.error("an error occurred while ...", 
      jsx3.NativeError.wrap(e));
}</pre>
  </text>
  <superclass id="super:0" loaded="1" name="Object"/>
  <superclass direct="1" id="super:1" loaded="1" name="jsx3.lang.Object"/>
  <subclass id="sub:0" loaded="1" name="jsx3.lang.IllegalArgumentException"/>
  <subclass id="sub:1" loaded="1" name="jsx3.lang.NativeError"/>
  <constructor access="public" id="method:init" name="init">
    <param name="strMessage" text="the description of the exception.">
      <type link="1" name="String"/>
    </param>
    <param name="objCause" text="an optional argument. A caught exception that caused this exception to be raised.&#10;   ">
      <type link="1" name="jsx3.lang.Exception"/>
    </param>
    <text>The instance initializer. A subclass of this class should always chain its <code>init()</code> method.</text>
  </constructor>
  <method access="public" id="method:toString" name="toString">
    <return text="">
      <type link="1" name="String"/>
    </return>
    <text>Returns a string representation of this exception.</text>
    <overrides id="overrides:toString" idfk="method:toString" name="toString" source="jsx3.lang.Object"/>
  </method>
  <method access="public" id="method:getMessage" name="getMessage">
    <return text="">
      <type link="1" name="String"/>
    </return>
    <text>Returns the description of this exception, as specified when the constructor was called.</text>
  </method>
  <method access="public" id="method:getCause" name="getCause">
    <return text="">
      <type link="1" name="jsx3.lang.Exception"/>
    </return>
    <text>Returns the cause of this exception, if one was specified in the constructor.</text>
  </method>
  <method access="public" id="method:getStack" name="getStack">
    <return text="">
      <type link="1" name="Array">
        <type link="1" name="Function"/>
      </type>
    </return>
    <text>Returns the complete call stack from when this exception was instantiated as an array of functions.</text>
  </method>
  <method access="public" id="method:printStackTrace" name="printStackTrace">
    <return text="">
      <type link="1" name="String"/>
    </return>
    <text>Returns a string representation of the call stack for when this exception was instantiated. This stack trace
is delimited by new line characters (\n) but is not terminated with one.</text>
  </method>
  <method id="method:clone" idfk="method:clone" inherited="1" name="clone" source="jsx3.lang.Object"/>
  <method id="method:equals" idfk="method:equals" inherited="1" name="equals" source="jsx3.lang.Object"/>
  <method id="method:eval" idfk="method:eval" inherited="1" name="eval" source="jsx3.lang.Object"/>
  <method id="method:getClass" idfk="method:getClass" inherited="1" name="getClass" source="jsx3.lang.Object"/>
  <method deprecated="1" id="method:getInstanceOf" idfk="method:getInstanceOf" inherited="1" name="getInstanceOf" source="jsx3.lang.Object"/>
  <method deprecated="1" id="method:getInstanceOfClass" idfk="method:getInstanceOfClass" inherited="1" name="getInstanceOfClass" source="jsx3.lang.Object"/>
  <method deprecated="1" id="method:getInstanceOfPackage" idfk="method:getInstanceOfPackage" inherited="1" name="getInstanceOfPackage" source="jsx3.lang.Object"/>
  <method id="method:instanceOf" idfk="method:instanceOf" inherited="1" name="instanceOf" source="jsx3.lang.Object"/>
  <method deprecated="1" id="method:isInstanceOf" idfk="method:isInstanceOf" inherited="1" name="isInstanceOf" source="jsx3.lang.Object"/>
  <method deprecated="1" id="method:isSubclassOf" idfk="method:isSubclassOf" inherited="1" name="isSubclassOf" source="jsx3.lang.Object"/>
  <method deprecated="1" id="method:jsxmix" idfk="method:jsxmix" inherited="1" name="jsxmix" source="jsx3.lang.Object"/>
  <method id="method:jsxsuper" idfk="method:jsxsuper" inherited="1" name="jsxsuper" source="jsx3.lang.Object"/>
  <method id="method:jsxsupermix" idfk="method:jsxsupermix" inherited="1" name="jsxsupermix" source="jsx3.lang.Object"/>
  <method deprecated="1" id="method:setInstanceOf" idfk="method:setInstanceOf" inherited="1" name="setInstanceOf" source="jsx3.lang.Object"/>
</class>
