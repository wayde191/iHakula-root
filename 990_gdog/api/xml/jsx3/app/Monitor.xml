<?xml version="1.0" encoding="UTF-8"?>
<class access="public" id="class:jsx3.app.Monitor" name="jsx3.app.Monitor" package="jsx3.app" shortname="Monitor" since="3.1&#10; ">
  <text>A logging handler that can be instantiated per JSX application and displays logging messages in a separate
browser window while an application is running.</text>
  <superclass id="super:0" loaded="1" name="Object"/>
  <superclass id="super:1" loaded="1" name="jsx3.lang.Object"/>
  <superclass id="super:2" loaded="1" name="jsx3.util.Logger.Handler"/>
  <superclass direct="1" id="super:3" loaded="1" name="jsx3.util.Logger.FormatHandler"/>
  <constructor access="public" id="method:init" name="init">
    <param name="strName" text="">
      <type link="1" name="String"/>
    </param>
    <text>The instance initializer.</text>
  </constructor>
  <method access="public" id="method:handle" name="handle">
    <param name="objRecord" text="">
      <type link="1" name="jsx3.util.Logger.Record"/>
    </param>
    <text>Writes the formatted logging message to a separate browser window if all relevant conditions are met.</text>
    <overrides id="overrides:handle" idfk="method:handle" name="handle" source="jsx3.util.Logger.Handler"/>
  </method>
  <method access="public" id="method:getDisableInIDE" name="getDisableInIDE">
    <return text="">
      <type class="Boolean" link="1" name="boolean"/>
    </return>
    <text>Returns whether this monitor is disabled when its application is running inside the IDE.</text>
  </method>
  <method access="public" id="method:setDisableInIDE" name="setDisableInIDE">
    <param name="disableInIDE" text="">
      <type class="Boolean" link="1" name="boolean"/>
    </param>
    <text>Sets whether this monitor is disabled when its application is running inside the IDE.</text>
  </method>
  <method access="public" id="method:getServerNamespace" name="getServerNamespace">
    <return text="">
      <type link="1" name="String"/>
    </return>
    <text>Returns the server namespace of this monitor. When an application is created with a namespace equal to this value
that application is attached to this monitor and the monitor becomes live.</text>
  </method>
  <method access="public" id="method:setServerNamespace" name="setServerNamespace">
    <param name="serverNamespace" text="">
      <type link="1" name="String"/>
    </param>
    <text>Sets the server namespace of this monitor.</text>
  </method>
  <method access="public" id="method:getActivateOnHotKey" name="getActivateOnHotKey">
    <return text="">
      <type class="Boolean" link="1" name="boolean"/>
    </return>
    <text>Returns whether this monitor remains invisible until the user types the hotkey <code>ctrl+alt+m</code> in the attached
application. If <code>false</code> this monitor will appear when the application is loaded and anytime the 
monitor is closed and a logging message is received.</text>
  </method>
  <method access="public" id="method:setActivateOnHotKey" name="setActivateOnHotKey">
    <param name="activateOnHotKey" text="">
      <type class="Boolean" link="1" name="boolean"/>
    </param>
    <text>Sets whether this monitor waits for the hotkey <code>ctrl+alt+m</code> before becoming visible.</text>
  </method>
  <method id="method:getFormat" idfk="method:getFormat" inherited="1" name="getFormat" source="jsx3.util.Logger.FormatHandler"/>
  <method id="method:setFormat" idfk="method:setFormat" inherited="1" name="setFormat" source="jsx3.util.Logger.FormatHandler"/>
  <method id="method:getLevel" idfk="method:getLevel" inherited="1" name="getLevel" source="jsx3.util.Logger.Handler"/>
  <method id="method:getName" idfk="method:getName" inherited="1" name="getName" source="jsx3.util.Logger.Handler"/>
  <method id="method:isLoggable" idfk="method:isLoggable" inherited="1" name="isLoggable" source="jsx3.util.Logger.Handler"/>
  <method id="method:setLevel" idfk="method:setLevel" inherited="1" name="setLevel" source="jsx3.util.Logger.Handler"/>
  <method id="method:clone" idfk="method:clone" inherited="1" name="clone" source="jsx3.lang.Object"/>
  <method id="method:equals" idfk="method:equals" inherited="1" name="equals" source="jsx3.lang.Object"/>
  <method id="method:eval" idfk="method:eval" inherited="1" name="eval" source="jsx3.lang.Object"/>
  <method id="method:getClass" idfk="method:getClass" inherited="1" name="getClass" source="jsx3.lang.Object"/>
  <method deprecated="1" id="method:getInstanceOf" idfk="method:getInstanceOf" inherited="1" name="getInstanceOf" source="jsx3.lang.Object"/>
  <method deprecated="1" id="method:getInstanceOfClass" idfk="method:getInstanceOfClass" inherited="1" name="getInstanceOfClass" source="jsx3.lang.Object"/>
  <method deprecated="1" id="method:getInstanceOfPackage" idfk="method:getInstanceOfPackage" inherited="1" name="getInstanceOfPackage" source="jsx3.lang.Object"/>
  <method id="method:instanceOf" idfk="method:instanceOf" inherited="1" name="instanceOf" source="jsx3.lang.Object"/>
  <method deprecated="1" id="method:isInstanceOf" idfk="method:isInstanceOf" inherited="1" name="isInstanceOf" source="jsx3.lang.Object"/>
  <method deprecated="1" id="method:isSubclassOf" idfk="method:isSubclassOf" inherited="1" name="isSubclassOf" source="jsx3.lang.Object"/>
  <method deprecated="1" id="method:jsxmix" idfk="method:jsxmix" inherited="1" name="jsxmix" source="jsx3.lang.Object"/>
  <method id="method:jsxsuper" idfk="method:jsxsuper" inherited="1" name="jsxsuper" source="jsx3.lang.Object"/>
  <method id="method:jsxsupermix" idfk="method:jsxsupermix" inherited="1" name="jsxsupermix" source="jsx3.lang.Object"/>
  <method deprecated="1" id="method:setInstanceOf" idfk="method:setInstanceOf" inherited="1" name="setInstanceOf" source="jsx3.lang.Object"/>
  <method id="method:toString" idfk="method:toString" inherited="1" name="toString" source="jsx3.lang.Object"/>
</class>
