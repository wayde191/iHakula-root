<?xml version="1.0" encoding="UTF-8"?>
<class access="public" id="class:jsx3.net.URI" name="jsx3.net.URI" package="jsx3.net" shortname="URI" since="3.1&#10; ">
  <text>Represents a Uniform Resource Identifier (URI) reference. Modeled on the Java class <code>java.net.URI</code>.</text>
  <superclass id="super:0" loaded="1" name="Object"/>
  <superclass direct="1" id="super:1" loaded="1" name="jsx3.lang.Object"/>
  <method access="public" id="smethod:fromParts" name="fromParts" static="1">
    <param name="scheme" text="the URI scheme, may be &lt;code&gt;null&lt;/code&gt;">
      <type link="1" name="String"/>
    </param>
    <param name="userInfo" text="the URI user-information, may be &lt;code&gt;null&lt;/code&gt;; &lt;b&gt;or the scheme-specific part if called with 3 arguments&lt;/b&gt;">
      <type link="1" name="String"/>
    </param>
    <param name="host" text="the URI host, may be &lt;code&gt;null&lt;/code&gt;; &lt;b&gt;or the URI fragment if called with 3 arguments&lt;/b&gt;, may be &lt;code&gt;null&lt;/code&gt;">
      <type link="1" name="String"/>
    </param>
    <param name="port" text="the URI port, may be &lt;code&gt;null&lt;/code&gt;">
      <type class="Number" link="1" name="int"/>
    </param>
    <param name="path" text="the URI path">
      <type link="1" name="String"/>
    </param>
    <param name="query" text="the URI query, may be &lt;code&gt;null&lt;/code&gt;">
      <type link="1" name="String"/>
    </param>
    <param name="fragment" text="the URI fragment, may be &lt;code&gt;null&lt;/code&gt;">
      <type link="1" name="String"/>
    </param>
    <return text="">
      <type link="1" name="jsx3.net.URI"/>
    </return>
    <text>This method can be called with either 3 or 7 arguments. If it is called with 3 arguments, the signature is
<code>URI.fromParts(scheme, schemeSpecificPath, fragment)</code>.
</text>
  </method>
  <constructor access="public" id="method:init" name="init">
    <param name="strURI" text="uri&#10;   ">
      <type link="1" name="String"/>
    </param>
    <text>Instance initializer.</text>
  </constructor>
  <method access="public" id="method:normalize" name="normalize">
    <return text="">
      <type link="1" name="jsx3.net.URI"/>
    </return>
    <text>Normalizes this URI's path.</text>
  </method>
  <method access="public" id="method:resolve" name="resolve">
    <param name="uri" text="">
      <type link="1" name="String"/>
      <type link="1" name="jsx3.net.URI"/>
    </param>
    <return text="">
      <type link="1" name="jsx3.net.URI"/>
    </return>
    <text>Resolves the given URI against this URI.</text>
  </method>
  <method access="public" id="method:relativize" name="relativize">
    <param name="uri" text="">
      <type link="1" name="String"/>
      <type link="1" name="jsx3.net.URI"/>
    </param>
    <return text="">
      <type link="1" name="jsx3.net.URI"/>
    </return>
    <text>Relativizes the given URI against this URI.
<p/>
The returned URI is computed as follows:
<ol>
 <li>If this URI or <code>uri</code> is opaque, or their schemes are not equal or their authorities are not
   equal, <code>uri</code> is returned.</li>
 <li>Otherwise, a new URI is constructed with the query and fragment of <code>uri</code> and a path equal to:
   <ol>
     <li>If the common path prefix of this URI and <code>uri</code> is just <code>""</code> or
        <code>"/"</code>, the path of <code>uri</code>
            </li>
     <li>Otherwise, the last segment of this path is removed and the path is computed by removing any common
        path prefix between the two paths, prepending a ".." for every segment remaining in this path, and
        appending the remaining path of <code>uri</code>.</li>
   </ol>
 </li>
</ol>
    </text>
  </method>
  <method access="public" id="method:getAuthority" name="getAuthority">
    <return text="">
      <type link="1" name="String"/>
    </return>
  </method>
  <method access="public" id="method:getFragment" name="getFragment">
    <return text="">
      <type link="1" name="String"/>
    </return>
  </method>
  <method access="public" id="method:getHost" name="getHost">
    <return text="">
      <type link="1" name="String"/>
    </return>
  </method>
  <method access="public" id="method:getPath" name="getPath">
    <return text="">
      <type link="1" name="String"/>
    </return>
  </method>
  <method access="public" id="method:getPort" name="getPort">
    <return text="">
      <type class="Number" link="1" name="int"/>
    </return>
  </method>
  <method access="public" id="method:getQuery" name="getQuery">
    <return text="">
      <type link="1" name="String"/>
    </return>
  </method>
  <method access="public" id="method:getQueryParam" name="getQueryParam">
    <param name="strParam" text="">
      <type link="1" name="String"/>
    </param>
    <return text="">
      <type link="1" name="String"/>
      <type class="Boolean" link="1" name="boolean"/>
    </return>
    <text>Searches the query part for the value of a parameter. Parameters are specified as name value pairs delimited by
'&amp;' like: <code>name1=value1&amp;name2=value2&amp;...</code> If a parameter is specified without a following '='
this method will return boolean <code>true</code>.</text>
  </method>
  <method access="public" id="method:getQueryParams" name="getQueryParams">
    <return text="">
      <type link="1" name="Object">
        <type link="1" name="String"/>
        <type link="1" name="String"/>
      </type>
    </return>
  </method>
  <method access="public" id="method:getScheme" name="getScheme">
    <return text="">
      <type link="1" name="String"/>
    </return>
  </method>
  <method access="public" id="method:getSchemeSpecificPart" name="getSchemeSpecificPart">
    <return text="">
      <type link="1" name="String"/>
    </return>
  </method>
  <method access="public" id="method:getUserInfo" name="getUserInfo">
    <return text="">
      <type link="1" name="String"/>
    </return>
  </method>
  <method access="public" id="method:isAbsolute" name="isAbsolute">
    <return text="">
      <type class="Boolean" link="1" name="boolean"/>
    </return>
  </method>
  <method access="public" id="method:isOpaque" name="isOpaque">
    <return text="">
      <type class="Boolean" link="1" name="boolean"/>
    </return>
  </method>
  <method access="public" id="method:equals" name="equals">
    <param name="obj"/>
    <return text="">
      <type class="Boolean" link="1" name="boolean"/>
    </return>
    <overrides id="overrides:equals" idfk="method:equals" name="equals" source="jsx3.lang.Object"/>
  </method>
  <method access="public" id="method:toString" name="toString">
    <return text="">
      <type link="1" name="String"/>
    </return>
    <overrides id="overrides:toString" idfk="method:toString" name="toString" source="jsx3.lang.Object"/>
  </method>
  <method access="public" id="smethod:valueOf" name="valueOf" static="1">
    <param name="strURI" text="">
      <type link="1" name="String"/>
      <type link="1" name="jsx3.net.URI"/>
    </param>
    <return text="">
      <type link="1" name="jsx3.net.URI"/>
    </return>
  </method>
  <method id="method:clone" idfk="method:clone" inherited="1" name="clone" source="jsx3.lang.Object"/>
  <method id="method:eval" idfk="method:eval" inherited="1" name="eval" source="jsx3.lang.Object"/>
  <method id="method:getClass" idfk="method:getClass" inherited="1" name="getClass" source="jsx3.lang.Object"/>
  <method deprecated="1" id="method:getInstanceOf" idfk="method:getInstanceOf" inherited="1" name="getInstanceOf" source="jsx3.lang.Object"/>
  <method deprecated="1" id="method:getInstanceOfClass" idfk="method:getInstanceOfClass" inherited="1" name="getInstanceOfClass" source="jsx3.lang.Object"/>
  <method deprecated="1" id="method:getInstanceOfPackage" idfk="method:getInstanceOfPackage" inherited="1" name="getInstanceOfPackage" source="jsx3.lang.Object"/>
  <method id="method:instanceOf" idfk="method:instanceOf" inherited="1" name="instanceOf" source="jsx3.lang.Object"/>
  <method deprecated="1" id="method:isInstanceOf" idfk="method:isInstanceOf" inherited="1" name="isInstanceOf" source="jsx3.lang.Object"/>
  <method deprecated="1" id="method:isSubclassOf" idfk="method:isSubclassOf" inherited="1" name="isSubclassOf" source="jsx3.lang.Object"/>
  <method deprecated="1" id="method:jsxmix" idfk="method:jsxmix" inherited="1" name="jsxmix" source="jsx3.lang.Object"/>
  <method id="method:jsxsuper" idfk="method:jsxsuper" inherited="1" name="jsxsuper" source="jsx3.lang.Object"/>
  <method id="method:jsxsupermix" idfk="method:jsxsupermix" inherited="1" name="jsxsupermix" source="jsx3.lang.Object"/>
  <method deprecated="1" id="method:setInstanceOf" idfk="method:setInstanceOf" inherited="1" name="setInstanceOf" source="jsx3.lang.Object"/>
</class>
