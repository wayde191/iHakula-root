<?xml version="1.0" encoding="UTF-8"?>
<class access="public" id="class:jsx3.net.Service" name="jsx3.net.Service" package="jsx3.net" shortname="Service">
  <text>This class is used in conjunction with the XML Mapping Utility to provide transactional support for those services using XML-based messaging.
Support includes those services defined via Schema, XML, XHTML, and WSDL (SOAP).  In practice a developer would open General Interface Builder
to access the XML Mapping Utility.  They would then point the utility at a "pattern master" (i.e., WSDL, Schema, XML, etc) and begin using its
visual tools to bind application objects to nodes in the XML messages to be sent and received.
The output from the Mapping Utility is referred to as a mapping rule set.  This rule set is an XML document based upon the Common Exchange Format (CXF)
and defines the information necessary to support transactional data mapping. Many of the APIs available to the Service class allow the devloper to
dynamically update various static values that were set using the XML Mapping Utility.
 </text>
  <superclass id="super:0" loaded="1" name="Object"/>
  <superclass direct="1" id="super:1" loaded="1" name="jsx3.lang.Object"/>
  <implements direct="1" id="implements:0" loaded="1" name="jsx3.util.EventDispatcher"/>
  <field access="public" class="jsx3.net.Service" final="1" fullname="jsx3.net.Service.json_namespace" id="sfield:json_namespace" name="json_namespace" static="1" value="&quot;http://xsd.tns.tibco.com/gi/json/2007/&quot;">
    <type link="1" name="String"/>
    <text> XML namespace for JSON objects when converted to XML</text>
  </field>
  <field access="public" class="jsx3.net.Service" final="1" fullname="jsx3.net.Service.ON_SUCCESS" id="sfield:ON_SUCCESS" name="ON_SUCCESS" static="1" value="&quot;onSuccess&quot;">
    <type link="1" name="String"/>
    <text> event type for successful response</text>
  </field>
  <field access="public" class="jsx3.net.Service" final="1" fullname="jsx3.net.Service.ON_ERROR" id="sfield:ON_ERROR" name="ON_ERROR" static="1" value="&quot;onError&quot;">
    <type link="1" name="String"/>
    <text> event type for unsuccessful response</text>
  </field>
  <field access="public" class="jsx3.net.Service" final="1" fullname="jsx3.net.Service.ON_TIMEOUT" id="sfield:ON_TIMEOUT" name="ON_TIMEOUT" static="1" value="&quot;onTimeout&quot;">
    <type link="1" name="String"/>
    <text> Event type published when the response is still not ready after the specified timeout period.</text>
  </field>
  <field access="public" class="jsx3.net.Service" final="1" fullname="jsx3.net.Service.ON_INVALID" id="sfield:ON_INVALID" name="ON_INVALID" static="1" value="&quot;onInvalid&quot;">
    <type link="1" name="String"/>
    <text> Event type published each time a rule with one or more restrictions fails during message generation. The following named properties are available on the event object:
<ul>
        <li>
          <b>rule</b> the rule node</li>
<li>
          <b>message</b> the message node</li>
<li>
          <b>target</b> this jsx3.net.Service instance</li>
<li>
          <b>type</b> the type of restriction that caused the invalidation event to be publsihed. For example, pattern.</li>
<li>
          <b>value</b> the value for the type. For example if type is pattern, then [A-Z]*</li>
      </ul>
    </text>
  </field>
  <field access="public" class="jsx3.net.Service" final="1" fullname="jsx3.net.Service.ON_PROCESS_RULE" id="sfield:ON_PROCESS_RULE" name="ON_PROCESS_RULE" static="1" value="&quot;onProcessRule&quot;">
    <type link="1" name="String"/>
    <text> Event type published each time a mapping rule is used to create a node, locate a node, or map to a node.
<ul>
        <li>
          <b>target</b> this jsx3.net.Service instance</li>
<li>
          <b>rule</b> the rule node being processed</li>
<li>
          <b>action</b> the action being performed by the rule. For example, <code>Create Node</code>, <code>Map to Cache</code>, <code>Invalidate Node</code>, etc.</li>
<li>
          <b>description</b> a description of the 'action'. For example, <code>this.eval(setValue(2));</code>
        </li>
<li>
          <b>level</b> the log level (e.g., 'severity' level) for the message. For example, <code>6</code> would signify a 'Trace' level event.</li>
      </ul>
    </text>
  </field>
  <constructor access="public" id="method:init" name="init">
    <param name="strRulesURL" text="The resolved URI for the rules document (a CXF document).&#10;Note: since this class is lazily loaded as of v3.2, the preferred method of instantiating this class is by calling the &lt;code&gt;loadResource&lt;/code&gt;&#10;method on the context server (&lt;code&gt;jsx3.app.Server&lt;/code&gt;) instance. This ensures proper URL resolution while also establishing the&#10;appropriate server context.">
      <type link="1" name="String"/>
    </param>
    <param name="strOperationName" text="name of operation to call. This is only required if the rules file was generated via a WSDL.">
      <type link="1" name="String"/>
    </param>
    <param name="strOutboundURL" text="address of a sample outbound message to use as opposed to the one generated by the tool">
      <type link="1" name="String"/>
    </param>
    <param name="strInboundURL" text="when the project is run in static mode (as defined by the 'project deployment options' dialog),&#10;this document is used to simulate a typical server response&#10;   ">
      <type link="1" name="String"/>
    </param>
    <text>instance initializer</text>
  </constructor>
  <method access="public" id="method:getSupportedNamespaces" name="getSupportedNamespaces">
    <return text="">
      <type link="1" name="String"/>
    </return>
    <text>Returns a CR-LF delimited list of supported namespaces and thei related prefix (as defined by the Object, jsx3.net.Service._ns). Any nodes in a rules document (CXF) that implements one of the namespaces listed by this function, should implement the corresponding namespace prefix as also detailed here.</text>
  </method>
  <method access="public" id="smethod:XML2JSON" name="XML2JSON" static="1">
    <param name="objXML" text="">
      <type link="1" name="jsx3.xml.Document"/>
    </param>
    <return text="serialized JSON Object or null if document did not belong to the correct namepace">
      <type link="1" name="String"/>
      <type name="null"/>
    </return>
    <text>Converts an XML document belonging to the namespace URI, <code>http://xsd.tns.tibco.com/gi/json/2007/</code>, into a serialized JSON String.
This String, when evaluated, can then be converted back to the original document format by calling the complimentary method, JSON2XML.</text>
    <see>Service.JSON2XML()</see>
    <see>Service.json_namespace</see>
  </method>
  <method access="public" id="smethod:JSON2XML" name="JSON2XML" static="1">
    <param name="objJ" text="Serialized JSON">
      <type link="1" name="String"/>
      <type link="1" name="Object"/>
    </param>
    <return text="">
      <type link="1" name="jsx3.xml.Document"/>
    </return>
    <throws text="if objJ can not be evaluated as a valid JavaScript Object&#10;   ">
      <type link="1" name="jsx3.lang.Exception"/>
    </throws>
    <text>Converts a JSON object to an XML document belonging to the namespace URI, <code>http://xsd.tns.tibco.com/gi/json/2007/</code>.
This document can then be converted back to the same JSON format by calling the complimentary method, XML2JSON.</text>
    <see>Service.XML2JSON()</see>
    <see>Service.json_namespace</see>
  </method>
  <method access="public" id="method:getRulesURL" name="getRulesURL">
    <return text="">
      <type link="1" name="String"/>
    </return>
    <text>Gets the URL for the rules file to use (a CXF document). This rules file will be used by the Service instance to generate, send, receive and process XML messages</text>
  </method>
  <method access="public" id="method:setRulesURL" name="setRulesURL">
    <param name="strRulesURL" text="">
      <type link="1" name="String"/>
    </param>
    <return text="reference to self&#10;   ">
      <type link="1" name="jsx3.net.Service"/>
    </return>
    <text>Sets the URL for the rules file to use (a CXF document). This rules file will be used by the Service instance to generate, send, receive and process XML messages</text>
  </method>
  <method access="public" id="method:setOutboundStubDocument" name="setOutboundStubDocument">
    <param name="objDocument" text="">
      <type link="1" name="jsx3.xml.Document"/>
    </param>
    <return text="reference to self">
      <type link="1" name="jsx3.net.Service"/>
    </return>
    <text>Sets the document that will serve as the container for the message generated by <code>doCall</code> and/or <code>getServiceMessage</code>.
This is a useful way to dynamically assemble documents by chaining multiple service instances, using the output from one service as the input to another.
For example, when a SOAP Envelope requires both a SOAP Header as well as a SOAP Body, this method allows the Envelope to be assembled via a
two-step process of first adding mapped content to the Body, followed by a call to add mapped content to the Header.
Note that this method takes precedence over the static stub document url referenced in the rules file as well as
any call to <code>setOutboundStubURL</code>. Use this method in conjunction with <code>setOutboundStubPath</code> to
point to the specific location in the document where the generated message should be appended.</text>
    <see idfk="method:setOutboundStubPath" source="jsx3.net.Service">setOutboundStubPath()</see>
    <see idfk="method:setOutboundStubURL" source="jsx3.net.Service">setOutboundStubURL()</see>
  </method>
  <method access="public" id="method:getOutboundStubURL" name="getOutboundStubURL">
    <return text="">
      <type link="1" name="String"/>
      <type name="null"/>
    </return>
    <text>Gets URL for the base stub to use for the request message (the XML document to contain the generated document)</text>
  </method>
  <method access="public" id="method:setOutboundStubURL" name="setOutboundStubURL">
    <param name="strURL" text="URL for the document. Note that this URL will be resolved relative to the context server.&#10;For example, if the project directory for the context server is 'test', then the following inputs (all of which are valid) are&#10;equivalent: &lt;code&gt;jsxapp://test/xml/typical.xml&lt;/code&gt;, &lt;b&gt;and&lt;/b&gt; &lt;code&gt;xml/typical.xml&lt;/code&gt;, &lt;b&gt;and&lt;/b&gt; &lt;code&gt;JSXAPPS/test/xml/typical.xml&lt;/code&gt;">
      <type link="1" name="String"/>
    </param>
    <return text="reference to self">
      <type link="1" name="jsx3.net.Service"/>
    </return>
    <text>Sets the URL to the document that will serve as the container for the message generated by <code>doCall</code> and/or <code>getServiceMessage</code>.
Overrides the static setting stored in the rules file. Use this method in conjunction with <code>setOutboundStubPath</code> to
point to the specific location in the document where the generated message should be appended.</text>
    <see idfk="method:setOutboundStubPath" source="jsx3.net.Service">setOutboundStubPath()</see>
  </method>
  <method access="public" id="method:getNamespace" name="getNamespace">
    <return text="">
      <type link="1" name="String"/>
    </return>
    <text>Gets the namespace for the server/project to run the service instance within. If a namespace isn't provided, the system will look for the first
application and use its namespace. If no applications exist, the namespace will be completely ignored.</text>
  </method>
  <method access="public" id="method:getServer" name="getServer">
    <return text="">
      <type link="1" name="jsx3.app.Server"/>
    </return>
    <text>Returns the server that this service runs in, as set by the <code>setNamespace()</code> method.</text>
    <see idfk="method:setNamespace" source="jsx3.net.Service">setNamespace()</see>
  </method>
  <method access="public" id="method:setNamespace" name="setNamespace">
    <param name="namespace" text="the server (preferred) or the namespace of the server.">
      <type link="1" name="jsx3.app.Server"/>
      <type link="1" name="String"/>
    </param>
    <return text="this object&#10;   ">
      <type link="1" name="jsx3.net.Service"/>
    </return>
    <text>Sets the namespace for the server/project to run the service instance within.</text>
  </method>
  <method access="public" id="method:getOutboundStubPath" name="getOutboundStubPath">
    <return text="Valid XSL path&#10;   ">
      <type link="1" name="String"/>
    </return>
    <text>Gets XPath address for the node in the outbound stub document to which to append the generated message.</text>
  </method>
  <method access="public" id="method:setOutboundStubPath" name="setOutboundStubPath">
    <param name="strPath" text="Valid XSL path. For example, &lt;code&gt;/SOAP-ENV:Envelope/SOAP-ENV:Body&lt;/code&gt;">
      <type link="1" name="String"/>
    </param>
    <return text="reference to self">
      <type link="1" name="jsx3.net.Service"/>
    </return>
    <text>Sets XPath address for the node in the outbound stub document to which to append the generated message.
Overrides the static setting in the rules file.</text>
    <see idfk="method:setOutboundStubDocument" source="jsx3.net.Service">setOutboundStubDocument()</see>
    <see idfk="method:setOutboundStubURL" source="jsx3.net.Service">setOutboundStubURL()</see>
  </method>
  <method access="public" id="method:getInboundURL" name="getInboundURL">
    <return text="">
      <type link="1" name="String"/>
    </return>
    <text>Gets the URL for a "typical", XML-formatted server resonse document. This document is then used when the project is
run in <b>static</b> mode (as defined by the <b>Project Deployment Options</b>).</text>
  </method>
  <method access="public" id="method:setInboundURL" name="setInboundURL">
    <param name="strInboundURL" text="Alternate URL for the &quot;typical&quot; Service response. Note that this URL will be resolved&#10;relative to the context server. For example, if the project directory for the context server is 'test',&#10;then the following inputs (all of which are valid) are equivalent: &lt;code&gt;jsxapp://test/xml/typical.xml&lt;/code&gt;,&#10;&lt;b&gt;and&lt;/b&gt; &lt;code&gt;xml/typical.xml&lt;/code&gt;, &lt;b&gt;and&lt;/b&gt; &lt;code&gt;JSXAPPS/test/xml/typical.xml&lt;/code&gt;">
      <type link="1" name="String"/>
    </param>
    <return text="reference to self">
      <type link="1" name="jsx3.net.Service"/>
    </return>
    <text>Sets the URL for a "typical", XML-formatted server resonse document. This document is then used when the project is
run in <b>static</b> mode (as defined by the <b>Project Settings</b> dialog). Overrides the static setting in the rules file.</text>
    <see idfk="method:setMode" source="jsx3.net.Service">setMode()</see>
  </method>
  <method access="public" id="method:getOutboundURL" name="getOutboundURL">
    <return text="">
      <type link="1" name="String"/>
    </return>
    <text>Gets URL for a 'typical' XML-formatted request document to send to the server; when this is set, the mapper does not even attempt to generate a document. Instead, this document is sent directly to the server without any processing. Useful for testing requests that never change</text>
  </method>
  <method access="public" id="method:setOutboundURL" name="setOutboundURL">
    <param name="strOutboundURL" text="Alternate URL for the static request to send. Note that this URL will be resolved relative&#10;to the context server. For example, if the project directory for the context server is 'test', then the following inputs&#10;(all of which are valid) are equivalent:  &lt;code&gt;jsxapp://test/xml/typical.xml&lt;/code&gt;, &lt;b&gt;and&lt;/b&gt; &lt;code&gt;xml/typical.xml&lt;/code&gt;,&#10;&lt;b&gt;and&lt;/b&gt; &lt;code&gt;JSXAPPS/test/xml/typical.xml&lt;/code&gt;">
      <type link="1" name="String"/>
    </param>
    <return text="reference to self&#10;   ">
      <type link="1" name="jsx3.net.Service"/>
    </return>
    <text>Sets the URL for a static XML-formatted request document to send to the Service. Note that when this is set, the mapper does not even
attempt to generate a request document via the rules file. Instead, the static request document is sent directly to the remote Service
without any processing. This is useful for requests that never change or as a means to test whether a Service is working, using a known, valid input.</text>
  </method>
  <method access="public" id="method:getOperationName" name="getOperationName">
    <return text="">
      <type link="1" name="String"/>
    </return>
    <text>Gets the name of the operation to use within a multi-operation rules file. Note: Rules created via a WSDL often have multiple named operations. Rules files generated without a WSDL contain no named operations, and instead use a single transaction.</text>
  </method>
  <method access="public" id="method:setOperationName" name="setOperationName">
    <param name="strOperationName" text="operation name">
      <type link="1" name="String"/>
    </param>
    <return text="reference to self&#10;   ">
      <type link="1" name="jsx3.net.Service"/>
    </return>
    <text>Sets the name of the operation to use within a multi-operation rules file. Note: Rules created via a WSDL often have multiple operations</text>
  </method>
  <method access="public" id="method:getRulesXML" name="getRulesXML">
    <return text="">
      <type link="1" name="jsx3.xml.Document"/>
    </return>
    <text>Returns the rules document used by the Service instance (a CXF document)</text>
  </method>
  <method access="public" id="method:resetRulesTree" name="resetRulesTree">
    <return text="reference to self&#10;   ">
      <type link="1" name="jsx3.net.Service"/>
    </return>
    <text>Dereferences the parsed rules tree (a jsx3.xml.Document instance) managed by this Service instance, forcing a reload of the document from disk the next time the rules document is requested</text>
  </method>
  <method access="public" id="method:getUserName" name="getUserName">
    <return text="">
      <type link="1" name="String"/>
    </return>
    <text>Gets user name to send as part of the http request (for servers requiring http authentication)</text>
  </method>
  <method access="public" id="method:setUserName" name="setUserName">
    <param name="strName" text="user name">
      <type link="1" name="String"/>
    </param>
    <return text="reference to self&#10;   ">
      <type link="1" name="jsx3.net.Service"/>
    </return>
    <text>Sets the user name to send with the posting (for those sites requiring http authentication)</text>
  </method>
  <method access="public" id="method:getUserPass" name="getUserPass">
    <return text="">
      <type link="1" name="String"/>
    </return>
    <text>Gets password to send as part of the http request (for servers requiring http authentication)</text>
  </method>
  <method access="public" id="method:setUserPass" name="setUserPass">
    <param name="strPass" text="password for user">
      <type link="1" name="String"/>
    </param>
    <return text="reference to self&#10;   ">
      <type link="1" name="jsx3.net.Service"/>
    </return>
    <text>Sets the password to send with the posting (for those sites requiring http authentication)</text>
  </method>
  <method access="public" deprecated="1" id="method:setOnSuccess" name="setOnSuccess">
    <param name="vntItem" text="either a script (as string) to execute via eval or a function that will be notified when the service call completes. Note: this function will receive a single parameter, a reference to this jsx3.net.Service instance">
      <type link="1" name="String"/>
      <type link="1" name="Object"/>
      <type link="1" name="Function"/>
    </param>
    <return text="reference to self">
      <type link="1" name="jsx3.net.Service"/>
    </return>
    <text>Sets the script that will fire after the service has finished an inbound mapping or a function to callback to; allows for object repaints, cleanup, etc</text>
    <deprecated>Use &lt;code&gt;jsx3.EventDispatcher&lt;/code&gt; interface instead with event type &lt;code&gt;jsx3.net.Service.ON_SUCCESS&lt;/code&gt;.
   </deprecated>
  </method>
  <method access="public" deprecated="1" id="method:setOnError" name="setOnError">
    <param name="vntItem" text="either a script (as string) to execute via eval or a function that will be notified. Note: this function will receive a single parameter, a reference to this jsx3.net.Service instance">
      <type link="1" name="String"/>
      <type link="1" name="Object"/>
      <type link="1" name="Function"/>
    </param>
    <return text="reference to self">
      <type link="1" name="jsx3.net.Service"/>
    </return>
    <text>sets the script that will fire after the service has failed; if a soap fault envelope is returned, this will be processed as would any mapped tree. Allows for object repaints, cleanup, etc.</text>
    <deprecated>Use &lt;code&gt;jsx3.EventDispatcher&lt;/code&gt; interface instead with event type &lt;code&gt;jsx3.net.Service.ON_ERROR&lt;/code&gt;.
   </deprecated>
  </method>
  <method access="public" id="method:getRequest" name="getRequest">
    <return text="">
      <type link="1" name="jsx3.net.Request"/>
    </return>
    <text>Gets the jsx3.net.HttpRequest instance that performs the transaction with the remote service (the transport object for the message).</text>
  </method>
  <method access="public" id="method:getInboundDocument" name="getInboundDocument">
    <return text="">
      <type link="1" name="jsx3.xml.Document"/>
    </return>
    <text>Call this method <b>after</b> the service has responded to get a parsed instance of the server's XML response</text>
  </method>
  <method access="public" id="method:setInboundDocument" name="setInboundDocument">
    <param name="objXML" text="">
      <type link="1" name="jsx3.xml.Document"/>
    </param>
    <text>Sets a parsed instance of the <b>response</b> document as soon as it returns from the server returned from the service; otherwise null</text>
  </method>
  <method access="public" id="method:getOutboundDocument" name="getOutboundDocument">
    <return text="">
      <type link="1" name="jsx3.xml.Document"/>
    </return>
    <text>Call this method <b>after</b> 'doCall' has been called to get a parsed instance of the request document--what was actually sent to the remote service</text>
  </method>
  <method access="public" deprecated="1" id="method:getWSDL" name="getWSDL">
    <return text="">
      <type link="1" name="jsx3.xml.Document"/>
    </return>
    <text>Gets the parsed WSDL (what was used as the original input to create the rules file being used by this service instance).</text>
    <deprecated>The WSDL is no longer relevant to the Service class as the rules file will contain all information necessary to generate and process the Service interaction.
   </deprecated>
  </method>
  <method access="public" id="method:getEndpointURL" name="getEndpointURL">
    <return text="">
      <type link="1" name="String"/>
    </return>
    <text>Gets the URL for the service endpoint where the request will be sent</text>
  </method>
  <method access="public" id="method:setEndpointURL" name="setEndpointURL">
    <param name="strAlternateURL" text="">
      <type link="1" name="String"/>
    </param>
    <return text="reference to self&#10;   ">
      <type link="1" name="jsx3.net.Service"/>
    </return>
    <text>Sets the URL for the service endpoint where the request will be sent. Overrides the endpoint specified in the rules file.</text>
  </method>
  <method access="public" id="method:getMethod" name="getMethod">
    <return text="GET, POST, PUT, DELETE, or SCRIPT&#10;   ">
      <type link="1" name="String"/>
    </return>
    <text>Gets the method for the request. Default is POST</text>
  </method>
  <method access="public" id="method:setMethod" name="setMethod">
    <param name="METHOD" text="GET, POST, PUT, DELETE, or SCRIPT&#10;   ">
      <type link="1" name="String"/>
    </param>
    <text>Sets the method for the request different than the one described in the rules file.</text>
  </method>
  <method access="public" id="method:getJSONP" name="getJSONP">
    <return text="">
      <type class="Boolean" link="1" name="boolean"/>
    </return>
    <text>If true, the Script transport will use JSONP</text>
  </method>
  <method access="public" id="method:setJSONP" name="setJSONP">
    <param name="bJSONP" text="">
      <type class="Boolean" link="1" name="boolean"/>
      <type link="1" name="String"/>
    </param>
    <text>If set to true, the service class will append an additional parameter to the URL in the form, <code>callback={method}</code>, where
{method} is a temporary callback function managed by the Service instance.  This allows for flexibility when using
JSON Services that are also available as JSONP Services, in that the same URL can be used (setEndpointURL) but different
behaviors can be implemented.  If the given JSONP Service uses a callback name different than "callback", pass the parameter
name expected by the given JSON Service.  You may also implement a callback of your own by directly modifying the endpoint URL to call the named function of your
choosing.  In such situations, pass <code>false</code> to this method, so the transport will not attempt any form
of callback.  If you do choose to implement your own callback handlers, you must manually conclude the service call with a call to <code>doRespond</code>.</text>
    <see>setEndpointURL</see>
    <see>doRespond</see>
  </method>
  <method access="public" id="method:doCall" name="doCall">
    <param name="bCancelIfInvalid" text="If true, the remote service will not be called if the message does not pass validation while being generated.">
      <type class="Boolean" link="1" name="boolean"/>
    </param>
    <return text="true if the message passed all validation rules while being generated.&#10;   ">
      <type class="Boolean" link="1" name="boolean"/>
    </return>
    <text>Generates the request message (if applicable) and sends to the remote service.</text>
  </method>
  <method access="public" id="method:setRequestHeader" name="setRequestHeader">
    <param name="strName" text="name for header parameter">
      <type link="1" name="String"/>
    </param>
    <param name="strValue" text="value for the header parameter&#10;   ">
      <type link="1" name="String"/>
    </param>
    <text>Sets an HTTP Request header on the request. Set before calling, doCall()</text>
  </method>
  <method access="public" deprecated="1" id="method:setTimeouts" name="setTimeouts">
    <param name="intResolveTimeout" text="The value is applied to mapping host names (such as &quot;www.microsoft.com&quot;) to IP addresses; the default value is infinite, meaning no timeout.">
      <type class="Number" link="1" name="int"/>
    </param>
    <param name="intConnectTimeout" text="The value is applied to establishing a communication socket with the target server, with a default timeout value of 60 seconds.">
      <type class="Number" link="1" name="int"/>
    </param>
    <param name="intSendTimeout" text="The value applies to sending an individual packet of request data (if any) on the communication socket to the target server. A large request sent to a server will normally be broken up into multiple packets; the send timeout applies to sending each packet individually. The default value is 5 minutes.">
      <type class="Number" link="1" name="int"/>
    </param>
    <param name="intReceiveTimeout" text="The value applies to receiving a packet of response data from the target server. Large responses will be broken up into multiple packets; the receive timeout applies to fetching each packet of data off the socket. The default value is 60 minutes.">
      <type class="Number" link="1" name="int"/>
    </param>
    <return text="reference to self">
      <type link="1" name="jsx3.net.Service"/>
    </return>
    <text>Specifies timeout settings for resolving the domain name, establishing the connection to the server, sending the data, and receiving the response. The timeout parameters of the setTimeouts method are specified in milliseconds, so a value of 1000 would represent 1 second. A value of zero represents an infinite timeout. There are four separate timeout parameters: resolveTimeout, connectTimeout, sendTimeout, and receiveTimeout. When calling the setTimeouts method, all four values must be specified. The timeouts are applied at the Winsock layer.</text>
    <deprecated>Due to browser security constraints, this method is no longer used. Use setTimeout instead. This method no longer affects any aspect of the Service call.
   </deprecated>
  </method>
  <method access="public" id="method:setTimeout" name="setTimeout">
    <param name="intTimeout" text="number of milliseconds to wait befor publishing the ON_TIMEOUT event.">
      <type class="Number" link="1" name="int"/>
    </param>
    <param name="objHandler" text="if an object, the instance to notify of events (objFunction is required); if a string, the JSX id of the instance to notify of events (objFunction is required), must exist in the same Server; if a function, the function to call to notify of events (objFunction ignored)">
      <type link="1" name="Object"/>
      <type link="1" name="String"/>
      <type name="function"/>
    </param>
    <param name="objFunction" text="if objHandler is a string or object then the function to call on that instance. either a function or a string that is the name of a method of the instance">
      <type name="function"/>
      <type link="1" name="String"/>
    </param>
    <return text="reference to self&#10;   ">
      <type link="1" name="jsx3.net.Service"/>
    </return>
    <text>Specifies how long to wait for the service to respond before cancelling the call. Subscribes to the ON_TIMEOUT event</text>
  </method>
  <method access="public" id="method:resetRules" name="resetRules">
    <return text="reference to self&#10;   ">
      <type link="1" name="jsx3.net.Service"/>
    </return>
    <text>Resets the rules tree to default state (with all 'skip' flags removed) from those rules that were skipped during the previous transaction</text>
  </method>
  <method access="public" id="method:getServiceMessage" name="getServiceMessage">
    <param name="MESSAGETYPE" text="one of: input, output, or fault. If this value is provided, the server will generate test data for all nodes lacking a mapped or scripted value">
      <type link="1" name="String"/>
    </param>
    <param name="strShellURL" text="relative URL to message shell to use as the starting container to put content into. Note that calling &lt;code&gt;setOutboundStubURL&lt;/code&gt; or &lt;code&gt;setOutboundStubDocument&lt;/code&gt; in conjunction with &lt;code&gt;setOutboundStubPath&lt;/code&gt;&#10;are preferred to passing this parameter, since they provide much greater control. Also note that this value is stored statically in the rules document when the rules document is first created via the XML Mapping Utility.">
      <type link="1" name="String"/>
    </param>
    <return text="">
      <type link="1" name="jsx3.xml.Document"/>
    </return>
    <text>Gets the request message specific to the MESSAGETYPE (input, output, fault). Typically only used for input (outbound) messages, but can be used for simulating a server response for output and fault (in the case of a SOAP transaction, fault) messages</text>
  </method>
  <method access="public" id="method:doRespond" name="doRespond">
    <param name="objEvent" text="Event object with named property,&lt;code&gt; target&lt;/code&gt;; or JSON object&#10;   ">
      <type link="1" name="Object"/>
    </param>
    <text>Provides a method to manually trigger the response chain by initiating the <b>response</b> event for the instance. One parameter can be passed to
simulate the server response: <code>objEvent</code>.  Based upon the properties contained by this object, the response will be handled
differently by the response handler. The named properties are as follows:
<br/>
      <ul>
<li>
          <b>target</b>: A jsx3.net.Request instance or a JavaScript object that provides the methods, <code>getResponseXML</code>
(to handle XML-formatted responses) or <code>getResponseText</code> (to handle JSON-formatted responses). If the event object does not
expose the 'target' property and/or if the 'target' does not expose the methods getResponseText or getResponseXML, it is assumed that <code>objEvent</code>
is a JSON object--the response itself.</li>
      </ul>
    </text>
  </method>
  <method access="public" id="method:getStatus" name="getStatus">
    <return text="">
      <type class="Number" link="1" name="int"/>
    </return>
    <text>Gets the HTTP response code (i.e., 200, 404, 500, etc). This will be the response code provided by the bound jsx3.net.Request instance
used for the transport. However, if setStatus has been called on the Service instance, the value supplied by the developer will be used instead.</text>
  </method>
  <method access="public" id="method:setStatus" name="setStatus">
    <param name="intStatus" text="">
      <type class="Number" link="1" name="int"/>
    </param>
    <text>Sets the HTTP response code (i.e., 200, 404, 500, etc). Typically, the Service instance determines this value by querying the bound request instance
(<code>jsx3.net.Request</code>) returned by the method, <code>[service_instance].getRequest()</code>. However, calling this method will override
normal operation by forcing a valid/invalid state that affects methdods relying on the HTTP status
such as <code>doInboundMap</code>.  This is particularly useful for SOAP services that provide alternate processing
instructions and mappings when a Fault occurs as well as when running tests in Static mode.</text>
  </method>
  <method access="public" id="method:getMode" name="getMode">
    <return text="">
      <type link="1" name="jsx3.Boolean"/>
    </return>
    <text>Gets the mode (static <code>jsx3.Boolean.FALSE</code> or live <code>jsx3.Boolean.TRUE</code>).</text>
  </method>
  <method access="public" id="method:setMode" name="setMode">
    <param name="MODE" text="">
      <type link="1" name="jsx3.Boolean"/>
    </param>
    <text>Sets the mode (static <code>jsx3.Boolean.FALSE</code> or live <code>jsx3.Boolean.TRUE</code>).  Overrides the default setting for the context Server
instance within which this Service instnace is running.  (NOTE: This setting is accessible at the server level via the <b>Project Settings</b> dialog.)
Setting this value to <code>jsx3.Boolean.FALSE</code>, forces a test document
to be used to simulate a "typical" server response, instead of actually sending a request to a remote service.  This is useful when setting up
test environments as well as providing "live" interactions when the remote server may not be available.</text>
    <see idfk="method:setInboundURL" source="jsx3.net.Service">setInboundURL()</see>
  </method>
  <method access="public" id="method:doInboundMap" name="doInboundMap">
    <text>Applies all inbound mappings, using the server response document as the source for the operation. Although this method is called once automatically, it can be called at any time to reapply the mapping rules.
Example usage:
var oService = new jsx3.net.Service();
oService.setInboundDocument(objSomeDocumentIManuallyWantToLoad);
oService.doInboundMap();
   </text>
  </method>
  <method access="public" deprecated="1" id="smethod:getVersion" name="getVersion" static="1">
    <text>Gets the release/build for the class (i.e., "2.2.00")
@ returns        {String}</text>
  </method>
  <method access="public" id="method:compile" name="compile">
    <return text="XSLT document&#10;   ">
      <type link="1" name="jsx3.xml.Document"/>
    </return>
    <text>Compiles the CXF rules for this service instance to an equivalent XSLT document. This enables
much faster performance than using the DOM-based iterator (default) to convert the XML response
document into a CDF Document type. Note that this process only supports the map types
<code>CDF Document</code>, <code>CDF Record</code>, and <code>CDF Attribute</code>. Only one CDF Document
can be declared per Operation. Otherwise the compilation will fail.
All other mapping types will be ignored and will not be converted into an XSLT equivalent.  Also note
that the order of a set of sibling mapping rules does not proscribe proper processing by way of
sequence.  This means that any order of sibling mapping rules will result in appropriate processing, regardless of the
sibling node order returned from the given service.  This facilitates nested record structures in that
attributes can first be applied to a given record before child elements (e.g., a 'record') are added.
Stated otherwise, any rule that has a descendant rule that would created a nested 'record' node should follow
all sibling mapping rules that would create an 'attribute' entity. Call this method immediately before/after <code>doCall</code>
for best performance.</text>
  </method>
  <method access="public" deprecated="1" id="method:getOperation" name="getOperation">
    <deprecated>Renamed to getOperationName.</deprecated>
  </method>
  <method access="public" deprecated="1" id="method:setOperation" name="setOperation">
    <deprecated>Renamed to setOperationName.</deprecated>
  </method>
  <method access="public" deprecated="1" id="method:getStubURL" name="getStubURL">
    <deprecated>Renamed to getOutboundStubURL.</deprecated>
  </method>
  <method access="public" deprecated="1" id="method:setStubURL" name="setStubURL">
    <deprecated>Renamed to setOutboundStubURL.</deprecated>
  </method>
  <method access="public" deprecated="1" id="method:addHeader" name="addHeader">
    <deprecated>Renamed to setRequestHeader.</deprecated>
  </method>
  <method access="public" deprecated="1" id="method:setServiceURL" name="setServiceURL">
    <deprecated>Renamed to setEndpointURL.</deprecated>
  </method>
  <method id="method:publish" idfk="method:publish" inherited="1" name="publish" source="jsx3.util.EventDispatcher"/>
  <method id="method:subscribe" idfk="method:subscribe" inherited="1" name="subscribe" source="jsx3.util.EventDispatcher"/>
  <method id="method:unsubscribe" idfk="method:unsubscribe" inherited="1" name="unsubscribe" source="jsx3.util.EventDispatcher"/>
  <method id="method:unsubscribeAll" idfk="method:unsubscribeAll" inherited="1" name="unsubscribeAll" source="jsx3.util.EventDispatcher"/>
  <method id="method:clone" idfk="method:clone" inherited="1" name="clone" source="jsx3.lang.Object"/>
  <method id="method:equals" idfk="method:equals" inherited="1" name="equals" source="jsx3.lang.Object"/>
  <method id="method:eval" idfk="method:eval" inherited="1" name="eval" source="jsx3.lang.Object"/>
  <method id="method:getClass" idfk="method:getClass" inherited="1" name="getClass" source="jsx3.lang.Object"/>
  <method deprecated="1" id="method:getInstanceOf" idfk="method:getInstanceOf" inherited="1" name="getInstanceOf" source="jsx3.lang.Object"/>
  <method deprecated="1" id="method:getInstanceOfClass" idfk="method:getInstanceOfClass" inherited="1" name="getInstanceOfClass" source="jsx3.lang.Object"/>
  <method deprecated="1" id="method:getInstanceOfPackage" idfk="method:getInstanceOfPackage" inherited="1" name="getInstanceOfPackage" source="jsx3.lang.Object"/>
  <method id="method:instanceOf" idfk="method:instanceOf" inherited="1" name="instanceOf" source="jsx3.lang.Object"/>
  <method deprecated="1" id="method:isInstanceOf" idfk="method:isInstanceOf" inherited="1" name="isInstanceOf" source="jsx3.lang.Object"/>
  <method deprecated="1" id="method:isSubclassOf" idfk="method:isSubclassOf" inherited="1" name="isSubclassOf" source="jsx3.lang.Object"/>
  <method deprecated="1" id="method:jsxmix" idfk="method:jsxmix" inherited="1" name="jsxmix" source="jsx3.lang.Object"/>
  <method id="method:jsxsuper" idfk="method:jsxsuper" inherited="1" name="jsxsuper" source="jsx3.lang.Object"/>
  <method id="method:jsxsupermix" idfk="method:jsxsupermix" inherited="1" name="jsxsupermix" source="jsx3.lang.Object"/>
  <method deprecated="1" id="method:setInstanceOf" idfk="method:setInstanceOf" inherited="1" name="setInstanceOf" source="jsx3.lang.Object"/>
  <method id="method:toString" idfk="method:toString" inherited="1" name="toString" source="jsx3.lang.Object"/>
</class>
