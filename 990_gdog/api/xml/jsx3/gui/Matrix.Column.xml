<?xml version="1.0" encoding="UTF-8"?>
<class access="public" id="class:jsx3.gui.Matrix.Column" name="jsx3.gui.Matrix.Column" package="jsx3.gui" shortname="Matrix.Column" since="3.2&#10; ">
  <text>Column control for use as a child of a jsx3.gui.Matrix class</text>
  <superclass id="super:0" loaded="1" name="Object"/>
  <superclass id="super:1" loaded="1" name="jsx3.lang.Object"/>
  <superclass id="super:2" loaded="1" name="jsx3.app.Model"/>
  <superclass id="super:3" loaded="1" name="jsx3.gui.Painted"/>
  <superclass direct="1" id="super:4" loaded="1" name="jsx3.gui.Block"/>
  <implements id="implements:0" loaded="1" name="jsx3.gui.Interactive"/>
  <implements id="implements:1" loaded="1" name="jsx3.util.EventDispatcher"/>
  <field access="public" class="jsx3.gui.Matrix.Column" fullname="jsx3.gui.Matrix.Column.DEFAULT_WIDTH" id="sfield:DEFAULT_WIDTH" name="DEFAULT_WIDTH" static="1" value="100">
    <type class="Number" link="1" name="int"/>
    <text> 100
   </text>
  </field>
  <field access="public" class="jsx3.gui.Matrix.Column" final="1" fullname="jsx3.gui.Matrix.Column.TYPE_TEXT" id="sfield:TYPE_TEXT" name="TYPE_TEXT" static="1" value="&quot;text&quot;">
    <type link="1" name="String"/>
    <text> text (default)</text>
  </field>
  <field access="public" class="jsx3.gui.Matrix.Column" final="1" fullname="jsx3.gui.Matrix.Column.TYPE_NUMBER" id="sfield:TYPE_NUMBER" name="TYPE_NUMBER" static="1" value="&quot;number&quot;">
    <type link="1" name="String"/>
    <text> number</text>
  </field>
  <field access="public" class="jsx3.gui.Matrix.Column" final="1" fullname="jsx3.gui.Matrix.Column.DEFAULT_VALIGN" id="sfield:DEFAULT_VALIGN" name="DEFAULT_VALIGN" static="1" value="&quot;top&quot;">
    <type link="1" name="String"/>
    <text> top</text>
  </field>
  <constructor access="public" id="method:init" name="init">
    <param name="strName" text="unique name distinguishing this object from all other JSX GUI objects in the JSX application&#10;   ">
      <type link="1" name="String"/>
    </param>
    <text>instance initializer</text>
  </constructor>
  <method access="public" id="method:getValueTemplate" name="getValueTemplate">
    <param name="strDefault" text="xsl:template">
      <type link="1" name="String"/>
    </param>
    <return text="">
      <type link="1" name="String"/>
    </return>
    <text>Gets the user-defined XSL template (xsl:template) that will override the defualt template defined by <code>Column.TEMPLATES.default</code>.</text>
  </method>
  <method access="public" id="method:setValueTemplate" name="setValueTemplate">
    <param name="TEMPLATE" text="Either a valid xsl:template or a named system template, including: @default, @empty, @unescape, and @image&#10;   ">
      <type link="1" name="String"/>
    </param>
    <text>Sets the user-defined XSL template (xsl:template) that will override the defualt template defined by <code>Column.DEFAULT_VALUE_TEMPLATE</code>.
<br/>The path wildcard is as follows:
<ul>
        <li>
          <b>{0}</b> this will be replaced with the result of <code>[instance].getPath()</code>. For example: jsxtext</li>
      </ul>
    </text>
  </method>
  <method access="public" id="method:getResizable" name="getResizable">
    <return text="">
      <type link="1" name="jsx3.Boolean"/>
    </return>
    <text>Gets whether or not this column can be resized by the user. If not set, the column will be assumed resizable</text>
  </method>
  <method access="public" id="method:setResizable" name="setResizable">
    <param name="RESIZE" text="">
      <type link="1" name="jsx3.Boolean"/>
    </param>
    <text>Sets whether or not this column can be resized by the user. If not set, the column will be assumed resizable. Note that if the parent Matrix
is set as NOT resizable, this setting is ignored and no child columns can be resized. Note that the header row is immediately repainted to reflect the change.</text>
  </method>
  <method access="public" id="method:getTriggers" name="getTriggers">
    <return text="Comma-delimited attribute list&#10;   ">
      <type link="1" name="String"/>
    </return>
    <text>Returns one or more named attributes. When one of these attributes is updated by another column's edit mask iterface,
this column will called to repaint to reflect the updated value</text>
  </method>
  <method access="public" id="method:setTriggers" name="setTriggers">
    <param name="strTriggers" text="Comma-delimited attribute list. For example: &lt;code&gt;jsxtext, ssn, phone&lt;/code&gt;.&#10;   ">
      <type link="1" name="String"/>
    </param>
    <text>Sets one or more named attributes. When one of these attributes is updated by another column's edit mask iterface,
this column will called to repaint to reflect the updated value</text>
  </method>
  <method access="public" id="method:getPath" name="getPath">
    <return text="selection path&#10;   ">
      <type link="1" name="String"/>
    </return>
    <text>Returns the selection path for this column of data. Returns 'jsxid' if no path specified</text>
  </method>
  <method access="public" id="method:setPath" name="setPath">
    <param name="strPath" text="The name of the attribute For example &lt;code&gt;jsxtext&lt;/code&gt;">
      <type link="1" name="String"/>
    </param>
    <param name="bSuppressRepaint" text="Pass &lt;code&gt;true&lt;/code&gt; to stop the default repaint from occurring.&#10;Typically property updates that affect the XSLT (such as path) require that the XSLT be regenerated.&#10;However, the repaint can be suppressed to avoid unnecessary reparsing of the XSLT during repeated property updates.&#10;   ">
      <type class="Boolean" link="1" name="boolean"/>
    </param>
    <text>Sets the selection path for this column of data.</text>
  </method>
  <method access="public" id="method:getSortPath" name="getSortPath">
    <return text="">
      <type link="1" name="String"/>
    </return>
    <text>Returns the CDF attribute to use to sort on this column. If the sort path has not been set explicitly, this method
returns the value of <code>this.getPath()</code>. The data source of the matrix containing this column is
sorted on this attribute when the matrix is sorted on this column.</text>
    <see idfk="method:getPath" source="jsx3.gui.Matrix.Column">getPath()</see>
  </method>
  <method access="public" id="method:setSortPath" name="setSortPath">
    <param name="strPath" text="">
      <type link="1" name="String"/>
    </param>
    <text>Sets the CDF attribute to use to sort on this column. </text>
  </method>
  <method access="public" id="method:getDataType" name="getDataType">
    <return text="data type for this column's data&#10;   ">
      <type link="1" name="String"/>
    </return>
    <text>Returns the data type for this column of data (affects sorting if this column is used for sorting the data); valid types include: jsx3.gui.Matrix.Column.TYPE_TEXT and jsx3.gui.Matrix.Column.TYPE_NUMBER</text>
  </method>
  <method access="public" id="method:setDataType" name="setDataType">
    <param name="DATATYPE" text="one of: jsx3.gui.Matrix.Column.TYPE_TEXT, jsx3.gui.Matrix.Column.TYPE_NUMBER&#10;   ">
      <type link="1" name="String"/>
    </param>
    <text>Sets the data type for this column of data (affects sorting if this column is used for sorting the data); returns ref to self</text>
  </method>
  <method access="public" id="method:getSortDataType" name="getSortDataType">
    <return text="one of: jsx3.gui.Matrix.Column.TYPE_TEXT, jsx3.gui.Matrix.Column.TYPE_NUMBER&#10;   ">
      <type link="1" name="String"/>
    </return>
    <text>Returns the data type for this column of data (affects sorting if this column is used for sorting the data).</text>
  </method>
  <method access="public" id="method:setSortDataType" name="setSortDataType">
    <param name="DATATYPE" text="data type for this column's data. valid types include: jsx3.gui.Matrix.Column.TYPE_TEXT and jsx3.gui.Matrix.Column.TYPE_NUMBER&#10;   ">
      <type link="1" name="String"/>
    </param>
    <text>Sets the data type for this column of data (affects sorting if this column is used for sorting the data); returns ref to self</text>
  </method>
  <method access="public" id="method:getCanSort" name="getCanSort">
    <return text="">
      <type link="1" name="jsx3.Boolean"/>
    </return>
    <text>Returns whether the parent list/grid can be sorted on this column. If no value is provided, the column is assumed sortable unless
the parent control explicitly specifies that no column should sort.</text>
    <see idfk="method:getCanSort" source="jsx3.gui.Matrix">jsx3.gui.Matrix.getCanSort()</see>
  </method>
  <method access="public" id="method:setCanSort" name="setCanSort">
    <param name="SORT" text="">
      <type link="1" name="jsx3.Boolean"/>
    </param>
    <text>Sets whether the parnet list/grid can be sorted on this column. Note that the header row is immediately repainted to reflect the change.</text>
  </method>
  <method access="public" id="method:setFormatHandler" name="setFormatHandler">
    <param name="handler" text="including @unescape, @lookup, @message,  @datetime, @date, @time, and @number. For example: &lt;code&gt;@unescape&lt;/code&gt;.&#10;&lt;p&gt;&lt;b&gt;- or -&lt;/b&gt;&lt;/p&gt;&#10;Function literal with the signature, &lt;code&gt;function(element,cdfkey, matrix, column, rownumber,server)&lt;/code&gt;. For example:&#10;&lt;p&gt;&lt;pre&gt;&#10;function(element, cdfkey, matrix, column, rownumber, server) {&#10;  var mf = new jsx3.util.MessageFormat(&quot;{0,number,currency}&quot;);&#10;  element.innerHTML = mf.format(element.innerHTML);&#10;};&#10;&lt;/pre&gt;&lt;/p&gt;">
      <type link="1" name="String"/>
      <type link="1" name="Function"/>
      <type link="1" name="jsx3.gui.Matrix.ColumnFormat"/>
    </param>
    <text>Sets the identifier for which of the default column formatters should be implemented. A function literal can also be passed.</text>
    <see source="jsx3.gui.Matrix.ColumnFormat">jsx3.gui.Matrix.ColumnFormat</see>
  </method>
  <method access="public" id="method:getFormatHandler" name="getFormatHandler">
    <return text="named object or function literal">
      <type link="1" name="String"/>
    </return>
    <text>Gets the <i>named</i> object that will handle the reformatting of a given column's data cells. This object should
implment the interface, <code>jsx3.gui.Matrix.ColumnFormat</code>, or adhere to its APIs.
Can also return the function literal</text>
    <see source="jsx3.gui.Matrix.ColumnFormat">jsx3.gui.Matrix.ColumnFormat</see>
  </method>
  <method access="public" id="method:paint" name="paint">
    <return text="DHTML&#10;   ">
      <type link="1" name="String"/>
    </return>
    <text>Returns the DHTML, used for this object's on-screen VIEW</text>
    <overrides id="overrides:paint" idfk="method:paint" name="paint" source="jsx3.gui.Block"/>
  </method>
  <method access="public" id="method:repaint" name="repaint">
    <return text="the result of calling &lt;code&gt;paint()&lt;/code&gt; or &lt;code&gt;null&lt;/code&gt; if this object is not displayed.">
      <type link="1" name="String"/>
    </return>
    <text>Updates the view of this object by calling <code>paint()</code> and replacing the current view with the
returned HTML. This method has no effect if this object is not currently displayed.</text>
    <see idfk="method:paint" source="jsx3.gui.Matrix.Column">paint()</see>
    <overrides id="overrides:repaint" idfk="method:repaint" name="repaint" source="jsx3.gui.Painted"/>
  </method>
  <method access="public" id="method:setWidth" name="setWidth">
    <param name="vntWidth" text="Can be a valid number (pixel units are implied), a Percent, or a Wildcard.  For example: 100, 25%, *">
      <type link="1" name="String"/>
      <type class="Number" link="1" name="int"/>
    </param>
    <param name="bRepaint" text="always treated as &lt;code&gt;true&lt;/code&gt;.">
      <type class="Boolean" link="1" name="boolean"/>
    </param>
    <return text="">
      <type link="1" name="jsx3.gui.Matrix.Column"/>
    </return>
    <text>Sets the Width on the column.  Immediately updates MODEL and VIEW. Note that if a wilcard is used without <b>Scale Width</b>, it will be replaced
with the value of <code>jsx3.gui.Matrix.Column.DEFAULT_WIDTH</code>
    </text>
    <see idfk="method:setScaleWidth" source="jsx3.gui.Matrix">jsx3.gui.Matrix.setScaleWidth()</see>
    <overrides id="overrides:setWidth" idfk="method:setWidth" name="setWidth" source="jsx3.gui.Block"/>
  </method>
  <method access="public" id="method:setDisplay" name="setDisplay">
    <param name="DISPLAY" text="one of &lt;code&gt;jsx3.gui.Block.DISPLAYNONE&lt;/code&gt; and &lt;code&gt;jsx3.gui.Block.DISPLAYBLOCK&lt;/code&gt;">
      <type link="1" name="String"/>
    </param>
    <param name="bRepaint" text="if &lt;code&gt;true&lt;/code&gt;, the view of this object is immediately updated.">
      <type class="Boolean" link="1" name="boolean"/>
    </param>
    <return text="this object&#10;   ">
      <type link="1" name="jsx3.gui.Matrix.Column"/>
    </return>
    <text>Sets the display for the object. Note that although the framework uses CSS to apply this setting,
the actual values that get set are determined by the system. Only those values listed for the parameter,
<b>DISPLAY</b>, are supported as inputs to this function. Calling this method will cause the underlying XSLT
for the Matrix parent to be regenerated.</text>
    <overrides id="overrides:setDisplay" idfk="method:setDisplay" name="setDisplay" source="jsx3.gui.Block"/>
  </method>
  <method access="public" id="method:getDisplayIndex" name="getDisplayIndex">
    <return text="">
      <type class="Number" link="1" name="int"/>
    </return>
    <text>Returns the zero-based index for ths column in relation to its siblings.  This is different from getChildIndex in that
it corresponds to the position of this column as rendered on-screen, meaning if a child of a lesser index is not
displayed (e.g., display = none), the value returned from this method will be less than what would be returned by getChildIndex.
Returns null if this object is not displayed.</text>
    <see idfk="method:getChildIndex" source="jsx3.app.Model">jsx3.app.Model.getChildIndex()</see>
  </method>
  <method access="public" id="method:getCellBackgroundColor" name="getCellBackgroundColor">
    <return text="">
      <type link="1" name="String"/>
    </return>
    <text>Returns CSS property value for the data cell background-color.</text>
  </method>
  <method access="public" id="method:setCellBackgroundColor" name="setCellBackgroundColor">
    <param name="strColor" text="valid CSS property value, (e.g., red, #ff0000, rgb(255,0,0))&#10;   ">
      <type link="1" name="String"/>
    </param>
    <text>Sets CSS property value for the data cell background-color. Call <code>repaint</code> on the parent instance to update the view.</text>
  </method>
  <method access="public" id="method:getCellBorder" name="getCellBorder">
    <return text="">
      <type link="1" name="String"/>
    </return>
    <text>Returns CSS property value for the data cell border.</text>
  </method>
  <method access="public" id="method:setCellBorder" name="setCellBorder">
    <param name="strCSS" text="valid CSS property value for border. For example: &lt;code&gt;solid 1px red;solid 0px;solid 0px;solid 1px white&lt;/code&gt;">
      <type link="1" name="String"/>
    </param>
    <param name="bSuppressRepaint" text="Pass &lt;code&gt;true&lt;/code&gt; to stop the default repaint from occurring.&#10;Typically property updates that affect the browser-specific box model (such as borders) are repainted&#10;immediately to keep the box model abstraction in synch with the native view. However, the repaint can be&#10;suppressed to avoid unnecessary reparsing of the XSLT during repeated property updates.&#10;   ">
      <type class="Boolean" link="1" name="boolean"/>
    </param>
    <text>Sets CSS property value(s) for a border for the data cells. Updates MODEL and VIEW (unless repaint is suppressed).</text>
  </method>
  <method access="public" id="method:getCellColor" name="getCellColor">
    <return text="">
      <type link="1" name="String"/>
    </return>
    <text>Returns CSS property value for the data cell color.</text>
  </method>
  <method access="public" id="method:setCellColor" name="setCellColor">
    <param name="strColor" text="valid CSS property value, (e.g., red, #ffffff, rgb(255,0,0))&#10;   ">
      <type link="1" name="String"/>
    </param>
    <text>Sets CSS property value for the data cell color. Call <code>repaint</code> on the parent instance to update the view.</text>
  </method>
  <method access="public" id="method:getCellCursor" name="getCellCursor">
    <return text="">
      <type link="1" name="String"/>
    </return>
    <text>Returns CSS property value for the data cell cursor.</text>
  </method>
  <method access="public" id="method:setCellCursor" name="setCellCursor">
    <param name="strCursor" text="CSS property value, (e.g., default, wait, col-resize)&#10;   ">
      <type link="1" name="String"/>
    </param>
    <text>Sets CSS property value for the data cell cursor. Call <code>repaint</code> on the parent instance to update the view.</text>
  </method>
  <method access="public" id="method:getCellFontName" name="getCellFontName">
    <return text="">
      <type link="1" name="String"/>
    </return>
    <text>Returns the CSS property value for the data cell font-family.</text>
  </method>
  <method access="public" id="method:setCellFontName" name="setCellFontName">
    <param name="strFontName" text="valid CSS font-family property value (e.g., Arial, Courier)&#10;   ">
      <type link="1" name="String"/>
    </param>
    <text>Sets the CSS property value for the data cell font-family. Call <code>repaint</code> on the parent instance to update the view.</text>
  </method>
  <method access="public" id="method:getCellFontSize" name="getCellFontSize">
    <return text="">
      <type class="Number" link="1" name="int"/>
    </return>
    <text>Returns the CSS property value for the data cell font-size.</text>
  </method>
  <method access="public" id="method:setCellFontSize" name="setCellFontSize">
    <param name="intPixelSize" text="font-size (in pixels)&#10;   ">
      <type class="Number" link="1" name="int"/>
    </param>
    <text>Sets the CSS property value for the data cell font-size. Call <code>repaint</code> on the parent instance to update the view.</text>
  </method>
  <method access="public" id="method:getCellFontWeight" name="getCellFontWeight">
    <return text="">
      <type link="1" name="String"/>
    </return>
    <text>Returns the CSS property value for the data cell font-weight.</text>
  </method>
  <method access="public" id="method:setCellFontWeight" name="setCellFontWeight">
    <param name="FONTWEIGHT" text="one of: &lt;code&gt;jsx3.gui.Block.FONTBOLD&lt;/code&gt;, &lt;code&gt;jsx3.gui.Block.FONTNORMAL&lt;/code&gt;&#10;   ">
      <type link="1" name="String"/>
    </param>
    <text>Sets the CSS property value for the data cell font-weight. Call <code>repaint</code> on the parent instance to update the view.</text>
  </method>
  <method access="public" id="method:getCellPadding" name="getCellPadding">
    <return text="">
      <type link="1" name="String"/>
    </return>
    <text>Returns the CSS property value for the data cell padding.</text>
  </method>
  <method access="public" id="method:setCellPadding" name="setCellPadding">
    <param name="strCSS" text="valid CSS property value for padding. For example: &lt;code&gt;8 4 8 4&lt;/code&gt;">
      <type link="1" name="String"/>
    </param>
    <param name="bSuppressRepaint" text="Pass &lt;code&gt;true&lt;/code&gt; to stop the default repaint from occurring.&#10;Typically property updates that affect the browser-specific box model (such as padding) are repainted&#10;immediately to keep the box model abstraction in synch with the native view. However, the repaint can be&#10;suppressed to avoid unnecessary reparsing of the XSLT during repeated property updates.&#10;   ">
      <type class="Boolean" link="1" name="boolean"/>
    </param>
    <text>Sets the CSS property value for the data cell padding. Updates MODEL and VIEW (unless repaint is suppressed).</text>
  </method>
  <method access="public" id="method:getCellTextAlign" name="getCellTextAlign">
    <return text="">
      <type link="1" name="String"/>
    </return>
    <text>Returns the CSS property value for the data cell text-align.</text>
  </method>
  <method access="public" id="method:setCellTextAlign" name="setCellTextAlign">
    <param name="ALIGN" text="one of: &lt;code&gt;jsx3.gui.Block.ALIGNLEFT&lt;/code&gt;, &lt;code&gt;jsx3.gui.Block.ALIGNRIGHT&lt;/code&gt;, &lt;code&gt;jsx3.gui.Block.ALIGNCENTER&lt;/code&gt;&#10;   ">
      <type link="1" name="String"/>
    </param>
    <text>Sets the CSS property value for the data cell text-align. Call <code>repaint</code> on the parent instance to update the view.</text>
  </method>
  <method access="public" id="method:getCellVAlign" name="getCellVAlign">
    <return text="">
      <type link="1" name="String"/>
    </return>
    <text>Returns the CSS property value for the data cell vertical-align. If no value is provided, the data cells render top-aligned.</text>
  </method>
  <method access="public" id="method:setCellVAlign" name="setCellVAlign">
    <param name="VALIGN" text="valid CSS value for vertical-align style.&#10;   ">
      <type link="1" name="String"/>
    </param>
    <text>Sets  the CSS property value for the data cell vertical-align. Call <code>repaint</code> on the parent instance to update the view.</text>
  </method>
  <method access="public" id="method:getCellWrap" name="getCellWrap">
    <param name="strDefault" text="The default value to use if null">
      <type link="1" name="String"/>
    </param>
    <return text="">
      <type class="Number" link="1" name="int"/>
    </return>
    <text>Returns whether or not the data cellc will support text-wrapping. If no value is specified, the text will not wrap</text>
  </method>
  <method access="public" id="method:setCellWrap" name="setCellWrap">
    <param name="WRAP" text="&lt;code&gt;jsx3.Boolean.TRUE&lt;/code&gt; or &lt;code&gt;jsx3.Boolean.FALSE&lt;/code&gt;&#10;   ">
      <type class="Number" link="1" name="int"/>
    </param>
    <text>Sets whether or not the data cellc will support text-wrapping. If no value is
specified, the text will not wrap. Call <code>repaint</code> to update the VIEW</text>
  </method>
  <method access="public" id="method:setBorder" name="setBorder">
    <param name="strCSS" text="valid CSS property value for a border (border: solid 1px #000000) or GI shorthand notation for border&#10;   ">
      <type link="1" name="String"/>
    </param>
    <text>Sets property value(s) for a border for the header cell (<code>solid 1px #000000</code>). Updates are applied immediately</text>
    <overrides id="overrides:setBorder" idfk="method:setBorder" name="setBorder" source="jsx3.gui.Block"/>
  </method>
  <method access="public" id="method:setPadding" name="setPadding">
    <param name="strCSS" text="valid CSS property value for padding. For example: &lt;code&gt;8 4 8 4&lt;/code&gt;&#10;   ">
      <type link="1" name="String"/>
    </param>
    <text>Sets CSS property value(s) for a padding for the header cell. Updates are applied immediately.</text>
    <overrides id="overrides:setPadding" idfk="method:setPadding" name="setPadding" source="jsx3.gui.Block"/>
  </method>
  <method access="public" id="method:getWrap" name="getWrap">
    <param name="strDefault" text="The default value to use if null">
      <type link="1" name="String"/>
    </param>
    <return text="">
      <type link="1" name="jsx3.Boolean"/>
    </return>
    <text>Gets whether or not the header cell will support text-wrapping. If not specified, the cell will be painted with no wrapping.</text>
  </method>
  <method access="public" id="method:setWrap" name="setWrap">
    <param name="WRAP" text="">
      <type link="1" name="jsx3.Boolean"/>
    </param>
    <text>Sets whether or not the header cell will support text-wrapping. Repaints the header to immediately reflect this change.</text>
  </method>
  <method access="public" id="method:getVAlign" name="getVAlign">
    <return text="">
      <type link="1" name="String"/>
    </return>
    <text>Returns the CSS property value for the header cell vertical-align. If no value is provided, the header cell render top-aligned.</text>
  </method>
  <method access="public" id="method:setVAlign" name="setVAlign">
    <param name="VALIGN" text="valid CSS value for vertical-align style.&#10;   ">
      <type link="1" name="String"/>
    </param>
    <text>Sets the CSS property value for the header cell vertical-align. Repaints the header to immediately reflect this change.</text>
  </method>
  <method access="public" id="method:setText" name="setText">
    <param name="strText" text="text/HTML">
      <type link="1" name="String"/>
    </param>
    <param name="bRepaint" text="if &lt;code&gt;true&lt;/code&gt;, the view of this object is immediately updated, obviating the need to call &lt;code&gt;repaint()&lt;/code&gt;.">
      <type class="Boolean" link="1" name="boolean"/>
    </param>
    <return text="">
      <type link="1" name="jsx3.gui.Matrix.Column"/>
    </return>
    <text>Sets the text/HTML for the control to be displayed on-screen.</text>
    <overrides id="overrides:setText" idfk="method:setText" name="setText" source="jsx3.gui.Block"/>
  </method>
  <method id="method:getBackground" idfk="method:getBackground" inherited="1" name="getBackground" source="jsx3.gui.Block"/>
  <method id="method:getBackgroundColor" idfk="method:getBackgroundColor" inherited="1" name="getBackgroundColor" source="jsx3.gui.Block"/>
  <method id="method:getBorder" idfk="method:getBorder" inherited="1" name="getBorder" source="jsx3.gui.Block"/>
  <method id="method:getCDFAttribute" idfk="method:getCDFAttribute" inherited="1" name="getCDFAttribute" source="jsx3.gui.Block"/>
  <method id="method:getCDFId" idfk="method:getCDFId" inherited="1" name="getCDFId" source="jsx3.gui.Block"/>
  <method id="method:getCSSOverride" idfk="method:getCSSOverride" inherited="1" name="getCSSOverride" source="jsx3.gui.Block"/>
  <method id="method:getClassName" idfk="method:getClassName" inherited="1" name="getClassName" source="jsx3.gui.Block"/>
  <method id="method:getColor" idfk="method:getColor" inherited="1" name="getColor" source="jsx3.gui.Block"/>
  <method id="method:getCursor" idfk="method:getCursor" inherited="1" name="getCursor" source="jsx3.gui.Block"/>
  <method id="method:getDimensions" idfk="method:getDimensions" inherited="1" name="getDimensions" source="jsx3.gui.Block"/>
  <method id="method:getDisplay" idfk="method:getDisplay" inherited="1" name="getDisplay" source="jsx3.gui.Block"/>
  <method id="method:getFontName" idfk="method:getFontName" inherited="1" name="getFontName" source="jsx3.gui.Block"/>
  <method id="method:getFontSize" idfk="method:getFontSize" inherited="1" name="getFontSize" source="jsx3.gui.Block"/>
  <method id="method:getFontWeight" idfk="method:getFontWeight" inherited="1" name="getFontWeight" source="jsx3.gui.Block"/>
  <method id="method:getHeight" idfk="method:getHeight" inherited="1" name="getHeight" source="jsx3.gui.Block"/>
  <method id="method:getIndex" idfk="method:getIndex" inherited="1" name="getIndex" source="jsx3.gui.Block"/>
  <method id="method:getLeft" idfk="method:getLeft" inherited="1" name="getLeft" source="jsx3.gui.Block"/>
  <method id="method:getMargin" idfk="method:getMargin" inherited="1" name="getMargin" source="jsx3.gui.Block"/>
  <method id="method:getOverflow" idfk="method:getOverflow" inherited="1" name="getOverflow" source="jsx3.gui.Block"/>
  <method id="method:getPadding" idfk="method:getPadding" inherited="1" name="getPadding" source="jsx3.gui.Block"/>
  <method id="method:getRelativePosition" idfk="method:getRelativePosition" inherited="1" name="getRelativePosition" source="jsx3.gui.Block"/>
  <method id="method:getTagName" idfk="method:getTagName" inherited="1" name="getTagName" source="jsx3.gui.Block"/>
  <method id="method:getText" idfk="method:getText" inherited="1" name="getText" source="jsx3.gui.Block"/>
  <method id="method:getTextAlign" idfk="method:getTextAlign" inherited="1" name="getTextAlign" source="jsx3.gui.Block"/>
  <method id="method:getTip" idfk="method:getTip" inherited="1" name="getTip" source="jsx3.gui.Block"/>
  <method id="method:getTop" idfk="method:getTop" inherited="1" name="getTop" source="jsx3.gui.Block"/>
  <method id="method:getVisibility" idfk="method:getVisibility" inherited="1" name="getVisibility" source="jsx3.gui.Block"/>
  <method id="method:getWidth" idfk="method:getWidth" inherited="1" name="getWidth" source="jsx3.gui.Block"/>
  <method id="method:getZIndex" idfk="method:getZIndex" inherited="1" name="getZIndex" source="jsx3.gui.Block"/>
  <method id="method:hideMask" idfk="method:hideMask" inherited="1" name="hideMask" source="jsx3.gui.Block"/>
  <method id="method:setBackground" idfk="method:setBackground" inherited="1" name="setBackground" source="jsx3.gui.Block"/>
  <method id="method:setBackgroundColor" idfk="method:setBackgroundColor" inherited="1" name="setBackgroundColor" source="jsx3.gui.Block"/>
  <method id="method:setCDFAttribute" idfk="method:setCDFAttribute" inherited="1" name="setCDFAttribute" source="jsx3.gui.Block"/>
  <method id="method:setCDFId" idfk="method:setCDFId" inherited="1" name="setCDFId" source="jsx3.gui.Block"/>
  <method id="method:setCSSOverride" idfk="method:setCSSOverride" inherited="1" name="setCSSOverride" source="jsx3.gui.Block"/>
  <method id="method:setClassName" idfk="method:setClassName" inherited="1" name="setClassName" source="jsx3.gui.Block"/>
  <method id="method:setColor" idfk="method:setColor" inherited="1" name="setColor" source="jsx3.gui.Block"/>
  <method id="method:setCursor" idfk="method:setCursor" inherited="1" name="setCursor" source="jsx3.gui.Block"/>
  <method id="method:setDimensions" idfk="method:setDimensions" inherited="1" name="setDimensions" source="jsx3.gui.Block"/>
  <method id="method:setFontName" idfk="method:setFontName" inherited="1" name="setFontName" source="jsx3.gui.Block"/>
  <method id="method:setFontSize" idfk="method:setFontSize" inherited="1" name="setFontSize" source="jsx3.gui.Block"/>
  <method id="method:setFontWeight" idfk="method:setFontWeight" inherited="1" name="setFontWeight" source="jsx3.gui.Block"/>
  <method id="method:setHeight" idfk="method:setHeight" inherited="1" name="setHeight" source="jsx3.gui.Block"/>
  <method id="method:setIndex" idfk="method:setIndex" inherited="1" name="setIndex" source="jsx3.gui.Block"/>
  <method id="method:setLeft" idfk="method:setLeft" inherited="1" name="setLeft" source="jsx3.gui.Block"/>
  <method id="method:setMargin" idfk="method:setMargin" inherited="1" name="setMargin" source="jsx3.gui.Block"/>
  <method id="method:setOverflow" idfk="method:setOverflow" inherited="1" name="setOverflow" source="jsx3.gui.Block"/>
  <method id="method:setRelativePosition" idfk="method:setRelativePosition" inherited="1" name="setRelativePosition" source="jsx3.gui.Block"/>
  <method id="method:setTagName" idfk="method:setTagName" inherited="1" name="setTagName" source="jsx3.gui.Block"/>
  <method id="method:setTextAlign" idfk="method:setTextAlign" inherited="1" name="setTextAlign" source="jsx3.gui.Block"/>
  <method id="method:setTip" idfk="method:setTip" inherited="1" name="setTip" source="jsx3.gui.Block"/>
  <method id="method:setTop" idfk="method:setTop" inherited="1" name="setTop" source="jsx3.gui.Block"/>
  <method id="method:setVisibility" idfk="method:setVisibility" inherited="1" name="setVisibility" source="jsx3.gui.Block"/>
  <method id="method:setZIndex" idfk="method:setZIndex" inherited="1" name="setZIndex" source="jsx3.gui.Block"/>
  <method id="method:showMask" idfk="method:showMask" inherited="1" name="showMask" source="jsx3.gui.Block"/>
  <method id="method:doEvent" idfk="method:doEvent" inherited="1" name="doEvent" source="jsx3.gui.Interactive"/>
  <method id="method:getCanDrag" idfk="method:getCanDrag" inherited="1" name="getCanDrag" source="jsx3.gui.Interactive"/>
  <method id="method:getCanDrop" idfk="method:getCanDrop" inherited="1" name="getCanDrop" source="jsx3.gui.Interactive"/>
  <method id="method:getCanMove" idfk="method:getCanMove" inherited="1" name="getCanMove" source="jsx3.gui.Interactive"/>
  <method id="method:getCanSpy" idfk="method:getCanSpy" inherited="1" name="getCanSpy" source="jsx3.gui.Interactive"/>
  <method id="method:getEvent" idfk="method:getEvent" inherited="1" name="getEvent" source="jsx3.gui.Interactive"/>
  <method id="method:getEvents" idfk="method:getEvents" inherited="1" name="getEvents" source="jsx3.gui.Interactive"/>
  <method id="method:getMenu" idfk="method:getMenu" inherited="1" name="getMenu" source="jsx3.gui.Interactive"/>
  <method id="method:hasEvent" idfk="method:hasEvent" inherited="1" name="hasEvent" source="jsx3.gui.Interactive"/>
  <method id="method:registerHotKey" idfk="method:registerHotKey" inherited="1" name="registerHotKey" source="jsx3.gui.Interactive"/>
  <method id="method:removeEvent" idfk="method:removeEvent" inherited="1" name="removeEvent" source="jsx3.gui.Interactive"/>
  <method id="method:removeEvents" idfk="method:removeEvents" inherited="1" name="removeEvents" source="jsx3.gui.Interactive"/>
  <method id="method:setCanDrag" idfk="method:setCanDrag" inherited="1" name="setCanDrag" source="jsx3.gui.Interactive"/>
  <method id="method:setCanDrop" idfk="method:setCanDrop" inherited="1" name="setCanDrop" source="jsx3.gui.Interactive"/>
  <method id="method:setCanMove" idfk="method:setCanMove" inherited="1" name="setCanMove" source="jsx3.gui.Interactive"/>
  <method id="method:setCanSpy" idfk="method:setCanSpy" inherited="1" name="setCanSpy" source="jsx3.gui.Interactive"/>
  <method id="method:setEvent" idfk="method:setEvent" inherited="1" name="setEvent" source="jsx3.gui.Interactive"/>
  <method id="method:setMenu" idfk="method:setMenu" inherited="1" name="setMenu" source="jsx3.gui.Interactive"/>
  <method id="method:setSpyStyles" idfk="method:setSpyStyles" inherited="1" name="setSpyStyles" source="jsx3.gui.Interactive"/>
  <method id="method:showSpy" idfk="method:showSpy" inherited="1" name="showSpy" source="jsx3.gui.Interactive"/>
  <method id="method:focus" idfk="method:focus" inherited="1" name="focus" source="jsx3.gui.Painted"/>
  <method id="method:getAbsolutePosition" idfk="method:getAbsolutePosition" inherited="1" name="getAbsolutePosition" source="jsx3.gui.Painted"/>
  <method id="method:getAttribute" idfk="method:getAttribute" inherited="1" name="getAttribute" source="jsx3.gui.Painted"/>
  <method id="method:getAttributes" idfk="method:getAttributes" inherited="1" name="getAttributes" source="jsx3.gui.Painted"/>
  <method id="method:getDynamicProperty" idfk="method:getDynamicProperty" inherited="1" name="getDynamicProperty" source="jsx3.gui.Painted"/>
  <method id="method:getRendered" idfk="method:getRendered" inherited="1" name="getRendered" source="jsx3.gui.Painted"/>
  <method deprecated="1" id="method:insertHTML" idfk="method:insertHTML" inherited="1" name="insertHTML" source="jsx3.gui.Painted"/>
  <method id="method:onAfterPaint" idfk="method:onAfterPaint" inherited="1" name="onAfterPaint" source="jsx3.gui.Painted"/>
  <method id="method:onAfterRestoreView" idfk="method:onAfterRestoreView" inherited="1" name="onAfterRestoreView" source="jsx3.gui.Painted"/>
  <method id="method:paintChild" idfk="method:paintChild" inherited="1" name="paintChild" source="jsx3.gui.Painted"/>
  <method id="method:paintChildren" idfk="method:paintChildren" inherited="1" name="paintChildren" source="jsx3.gui.Painted"/>
  <method id="method:recalcBox" idfk="method:recalcBox" inherited="1" name="recalcBox" source="jsx3.gui.Painted"/>
  <method id="method:removeAttribute" idfk="method:removeAttribute" inherited="1" name="removeAttribute" source="jsx3.gui.Painted"/>
  <method id="method:removeAttributes" idfk="method:removeAttributes" inherited="1" name="removeAttributes" source="jsx3.gui.Painted"/>
  <method id="method:setAttribute" idfk="method:setAttribute" inherited="1" name="setAttribute" source="jsx3.gui.Painted"/>
  <method id="method:setDynamicProperty" idfk="method:setDynamicProperty" inherited="1" name="setDynamicProperty" source="jsx3.gui.Painted"/>
  <method id="method:adoptChild" idfk="method:adoptChild" inherited="1" name="adoptChild" source="jsx3.app.Model"/>
  <method id="method:doClone" idfk="method:doClone" inherited="1" name="doClone" source="jsx3.app.Model"/>
  <method id="method:findAncestor" idfk="method:findAncestor" inherited="1" name="findAncestor" source="jsx3.app.Model"/>
  <method id="method:findDescendants" idfk="method:findDescendants" inherited="1" name="findDescendants" source="jsx3.app.Model"/>
  <method id="method:getAncestorOfName" idfk="method:getAncestorOfName" inherited="1" name="getAncestorOfName" source="jsx3.app.Model"/>
  <method id="method:getAncestorOfType" idfk="method:getAncestorOfType" inherited="1" name="getAncestorOfType" source="jsx3.app.Model"/>
  <method id="method:getChild" idfk="method:getChild" inherited="1" name="getChild" source="jsx3.app.Model"/>
  <method id="method:getChildIndex" idfk="method:getChildIndex" inherited="1" name="getChildIndex" source="jsx3.app.Model"/>
  <method id="method:getChildren" idfk="method:getChildren" inherited="1" name="getChildren" source="jsx3.app.Model"/>
  <method id="method:getDescendantOfName" idfk="method:getDescendantOfName" inherited="1" name="getDescendantOfName" source="jsx3.app.Model"/>
  <method id="method:getDescendantsOfType" idfk="method:getDescendantsOfType" inherited="1" name="getDescendantsOfType" source="jsx3.app.Model"/>
  <method id="method:getFirstChild" idfk="method:getFirstChild" inherited="1" name="getFirstChild" source="jsx3.app.Model"/>
  <method id="method:getFirstChildOfType" idfk="method:getFirstChildOfType" inherited="1" name="getFirstChildOfType" source="jsx3.app.Model"/>
  <method id="method:getHelpId" idfk="method:getHelpId" inherited="1" name="getHelpId" source="jsx3.app.Model"/>
  <method id="method:getId" idfk="method:getId" inherited="1" name="getId" source="jsx3.app.Model"/>
  <method id="method:getLastChild" idfk="method:getLastChild" inherited="1" name="getLastChild" source="jsx3.app.Model"/>
  <method id="method:getLoadType" idfk="method:getLoadType" inherited="1" name="getLoadType" source="jsx3.app.Model"/>
  <method id="method:getMetaValue" idfk="method:getMetaValue" inherited="1" name="getMetaValue" source="jsx3.app.Model"/>
  <method id="method:getNS" idfk="method:getNS" inherited="1" name="getNS" source="jsx3.app.Model"/>
  <method id="method:getName" idfk="method:getName" inherited="1" name="getName" source="jsx3.app.Model"/>
  <method id="method:getNextSibling" idfk="method:getNextSibling" inherited="1" name="getNextSibling" source="jsx3.app.Model"/>
  <method final="1" id="method:getParent" idfk="method:getParent" inherited="1" name="getParent" source="jsx3.app.Model"/>
  <method id="method:getPersistence" idfk="method:getPersistence" inherited="1" name="getPersistence" source="jsx3.app.Model"/>
  <method id="method:getPreviousSibling" idfk="method:getPreviousSibling" inherited="1" name="getPreviousSibling" source="jsx3.app.Model"/>
  <method id="method:getServer" idfk="method:getServer" inherited="1" name="getServer" source="jsx3.app.Model"/>
  <method id="method:getUriResolver" idfk="method:getUriResolver" inherited="1" name="getUriResolver" source="jsx3.app.Model"/>
  <method id="method:insertBefore" idfk="method:insertBefore" inherited="1" name="insertBefore" source="jsx3.app.Model"/>
  <method id="method:load" idfk="method:load" inherited="1" name="load" source="jsx3.app.Model"/>
  <method id="method:loadAndCache" idfk="method:loadAndCache" inherited="1" name="loadAndCache" source="jsx3.app.Model"/>
  <method id="method:loadXML" idfk="method:loadXML" inherited="1" name="loadXML" source="jsx3.app.Model"/>
  <method id="method:onAfterAssemble" idfk="method:onAfterAssemble" inherited="1" name="onAfterAssemble" source="jsx3.app.Model"/>
  <method id="method:onAfterAttach" idfk="method:onAfterAttach" inherited="1" name="onAfterAttach" source="jsx3.app.Model"/>
  <method id="method:onBeforeAssemble" idfk="method:onBeforeAssemble" inherited="1" name="onBeforeAssemble" source="jsx3.app.Model"/>
  <method id="method:onChangeServer" idfk="method:onChangeServer" inherited="1" name="onChangeServer" source="jsx3.app.Model"/>
  <method id="method:onChildAdded" idfk="method:onChildAdded" inherited="1" name="onChildAdded" source="jsx3.app.Model"/>
  <method id="method:onDestroy" idfk="method:onDestroy" inherited="1" name="onDestroy" source="jsx3.app.Model"/>
  <method id="method:onRemoveChild" idfk="method:onRemoveChild" inherited="1" name="onRemoveChild" source="jsx3.app.Model"/>
  <method id="method:onSetChild" idfk="method:onSetChild" inherited="1" name="onSetChild" source="jsx3.app.Model"/>
  <method id="method:onSetParent" idfk="method:onSetParent" inherited="1" name="onSetParent" source="jsx3.app.Model"/>
  <method id="method:removeChild" idfk="method:removeChild" inherited="1" name="removeChild" source="jsx3.app.Model"/>
  <method id="method:removeChildren" idfk="method:removeChildren" inherited="1" name="removeChildren" source="jsx3.app.Model"/>
  <method id="method:selectDescendants" idfk="method:selectDescendants" inherited="1" name="selectDescendants" source="jsx3.app.Model"/>
  <method id="method:setChild" idfk="method:setChild" inherited="1" name="setChild" source="jsx3.app.Model"/>
  <method id="method:setHelpId" idfk="method:setHelpId" inherited="1" name="setHelpId" source="jsx3.app.Model"/>
  <method id="method:setLoadType" idfk="method:setLoadType" inherited="1" name="setLoadType" source="jsx3.app.Model"/>
  <method id="method:setMetaValue" idfk="method:setMetaValue" inherited="1" name="setMetaValue" source="jsx3.app.Model"/>
  <method id="method:setName" idfk="method:setName" inherited="1" name="setName" source="jsx3.app.Model"/>
  <method id="method:setPersistence" idfk="method:setPersistence" inherited="1" name="setPersistence" source="jsx3.app.Model"/>
  <method id="method:toString" idfk="method:toString" inherited="1" name="toString" source="jsx3.app.Model"/>
  <method id="method:toXML" idfk="method:toXML" inherited="1" name="toXML" source="jsx3.app.Model"/>
  <method id="method:toXMLDoc" idfk="method:toXMLDoc" inherited="1" name="toXMLDoc" source="jsx3.app.Model"/>
  <method id="method:publish" idfk="method:publish" inherited="1" name="publish" source="jsx3.util.EventDispatcher"/>
  <method id="method:subscribe" idfk="method:subscribe" inherited="1" name="subscribe" source="jsx3.util.EventDispatcher"/>
  <method id="method:unsubscribe" idfk="method:unsubscribe" inherited="1" name="unsubscribe" source="jsx3.util.EventDispatcher"/>
  <method id="method:unsubscribeAll" idfk="method:unsubscribeAll" inherited="1" name="unsubscribeAll" source="jsx3.util.EventDispatcher"/>
  <method id="method:clone" idfk="method:clone" inherited="1" name="clone" source="jsx3.lang.Object"/>
  <method id="method:equals" idfk="method:equals" inherited="1" name="equals" source="jsx3.lang.Object"/>
  <method id="method:eval" idfk="method:eval" inherited="1" name="eval" source="jsx3.lang.Object"/>
  <method id="method:getClass" idfk="method:getClass" inherited="1" name="getClass" source="jsx3.lang.Object"/>
  <method deprecated="1" id="method:getInstanceOf" idfk="method:getInstanceOf" inherited="1" name="getInstanceOf" source="jsx3.lang.Object"/>
  <method deprecated="1" id="method:getInstanceOfClass" idfk="method:getInstanceOfClass" inherited="1" name="getInstanceOfClass" source="jsx3.lang.Object"/>
  <method deprecated="1" id="method:getInstanceOfPackage" idfk="method:getInstanceOfPackage" inherited="1" name="getInstanceOfPackage" source="jsx3.lang.Object"/>
  <method id="method:instanceOf" idfk="method:instanceOf" inherited="1" name="instanceOf" source="jsx3.lang.Object"/>
  <method deprecated="1" id="method:isInstanceOf" idfk="method:isInstanceOf" inherited="1" name="isInstanceOf" source="jsx3.lang.Object"/>
  <method deprecated="1" id="method:isSubclassOf" idfk="method:isSubclassOf" inherited="1" name="isSubclassOf" source="jsx3.lang.Object"/>
  <method deprecated="1" id="method:jsxmix" idfk="method:jsxmix" inherited="1" name="jsxmix" source="jsx3.lang.Object"/>
  <method id="method:jsxsuper" idfk="method:jsxsuper" inherited="1" name="jsxsuper" source="jsx3.lang.Object"/>
  <method id="method:jsxsupermix" idfk="method:jsxsupermix" inherited="1" name="jsxsupermix" source="jsx3.lang.Object"/>
  <method deprecated="1" id="method:setInstanceOf" idfk="method:setInstanceOf" inherited="1" name="setInstanceOf" source="jsx3.lang.Object"/>
</class>
