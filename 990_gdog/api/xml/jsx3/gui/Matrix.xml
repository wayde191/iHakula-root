<?xml version="1.0" encoding="UTF-8"?>
<class access="public" id="class:jsx3.gui.Matrix" name="jsx3.gui.Matrix" package="jsx3.gui" shortname="Matrix" since="3.2&#10; ">
  <text>The Matrix control is the standard visual interface for the Common Data Format (CDF), providing grid and tree-grid functionality that mirrors the
the record and attribute structures used by the CDF. Instances of this class can be used to create editable grids, selectable lists, trees, tables, etc.
In addtion to providing layout, selection, and editing schemes, the Matrix also provides various paging models to help optimize
how (and how much) data is rendered on-screen. The Matrix class is always used in conjunction with <b>jsx3.gui.Matrix.Column</b>, which describes
how data for a given series should be rendered on-screen. While the Matrix manages data and user interactions, Column
manages the on-screen format for how the data is presented.</text>
  <superclass id="super:0" loaded="1" name="Object"/>
  <superclass id="super:1" loaded="1" name="jsx3.lang.Object"/>
  <superclass id="super:2" loaded="1" name="jsx3.app.Model"/>
  <superclass id="super:3" loaded="1" name="jsx3.gui.Painted"/>
  <superclass direct="1" id="super:4" loaded="1" name="jsx3.gui.Block"/>
  <implements direct="1" id="implements:0" loaded="1" name="jsx3.gui.Form"/>
  <implements id="implements:1" loaded="1" name="jsx3.gui.Interactive"/>
  <implements id="implements:2" loaded="1" name="jsx3.util.EventDispatcher"/>
  <implements direct="1" id="implements:3" loaded="1" name="jsx3.xml.CDF"/>
  <implements direct="1" id="implements:4" loaded="1" name="jsx3.xml.Cacheable"/>
  <field access="public" class="jsx3.gui.Matrix" fullname="jsx3.gui.Matrix.AUTO_SCROLL_INTERVAL" id="sfield:AUTO_SCROLL_INTERVAL" name="AUTO_SCROLL_INTERVAL" static="1" value="50">
    <type class="Number" link="1" name="int"/>
    <text> 50
   </text>
  </field>
  <field access="public" class="jsx3.gui.Matrix" fullname="jsx3.gui.Matrix.SELECTION_BG" id="sfield:SELECTION_BG" name="SELECTION_BG" static="1" value="&quot;jsx:///images/matrix/select.gif&quot;">
    <type link="1" name="String"/>
    <text> jsx:///images/matrix/select.gif
   </text>
  </field>
  <field access="public" class="jsx3.gui.Matrix" fullname="jsx3.gui.Matrix.INSERT_BEFORE_IMG" id="sfield:INSERT_BEFORE_IMG" name="INSERT_BEFORE_IMG" static="1">
    <type link="1" name="String"/>
    <text> jsx:///images/matrix/insert_before.gif
   </text>
  </field>
  <field access="public" class="jsx3.gui.Matrix" fullname="jsx3.gui.Matrix.APPEND_IMG" id="sfield:APPEND_IMG" name="APPEND_IMG" static="1">
    <type link="1" name="String"/>
    <text> jsx:///images/matrix/append.gif
   </text>
  </field>
  <field access="public" class="jsx3.gui.Matrix" fullname="jsx3.gui.Matrix.FOCUS_STYLE" id="sfield:FOCUS_STYLE" name="FOCUS_STYLE" static="1" value="&quot;font-weight:bold&quot;">
    <type link="1" name="String"/>
    <text> font-weight:bold
   </text>
  </field>
  <field access="public" class="jsx3.gui.Matrix" fullname="jsx3.gui.Matrix.ICON_MINUS" id="sfield:ICON_MINUS" name="ICON_MINUS" static="1" value="&quot;jsx:///images/matrix/minus.gif&quot;">
    <type link="1" name="String"/>
    <text> jsx:///images/matrix/minus.gif (default)
   </text>
  </field>
  <field access="public" class="jsx3.gui.Matrix" fullname="jsx3.gui.Matrix.ICON_PLUS" id="sfield:ICON_PLUS" name="ICON_PLUS" static="1" value="&quot;jsx:///images/matrix/plus.gif&quot;">
    <type link="1" name="String"/>
    <text> jsx:///images/matrix/plus.gif (default)
   </text>
  </field>
  <field access="public" class="jsx3.gui.Matrix" fullname="jsx3.gui.Matrix.ICON" id="sfield:ICON" name="ICON" static="1" value="&quot;jsx:///images/matrix/file.gif&quot;">
    <type link="1" name="String"/>
    <text> jsx:///images/matrix/file.gif (default)
   </text>
  </field>
  <field access="public" class="jsx3.gui.Matrix" final="1" fullname="jsx3.gui.Matrix.SORT_ASCENDING" id="sfield:SORT_ASCENDING" name="SORT_ASCENDING" static="1" value="&quot;ascending&quot;">
    <type link="1" name="String"/>
    <text> ascending</text>
  </field>
  <field access="public" class="jsx3.gui.Matrix" final="1" fullname="jsx3.gui.Matrix.SORT_DESCENDING" id="sfield:SORT_DESCENDING" name="SORT_DESCENDING" static="1" value="&quot;descending&quot;">
    <type link="1" name="String"/>
    <text> descending</text>
  </field>
  <field access="public" class="jsx3.gui.Matrix" fullname="jsx3.gui.Matrix.SORT_DESCENDING_IMG" id="sfield:SORT_DESCENDING_IMG" name="SORT_DESCENDING_IMG" static="1">
    <type link="1" name="String"/>
    <text> jsx:///images/matrix/sort_desc.gif (default)
   </text>
  </field>
  <field access="public" class="jsx3.gui.Matrix" fullname="jsx3.gui.Matrix.SORT_ASCENDING_IMG" id="sfield:SORT_ASCENDING_IMG" name="SORT_ASCENDING_IMG" static="1">
    <type link="1" name="String"/>
    <text> jsx:///images/matrix/sort_asc.gif (default)
   </text>
  </field>
  <field access="public" class="jsx3.gui.Matrix" final="1" fullname="jsx3.gui.Matrix.MINIMUM_COLUMN_WIDTH" id="sfield:MINIMUM_COLUMN_WIDTH" name="MINIMUM_COLUMN_WIDTH" static="1" value="8">
    <type link="1" name="String"/>
    <text> 4. minimum width of a column when minimized (set Display to 'none' to completely hide a column)</text>
  </field>
  <field access="public" class="jsx3.gui.Matrix" fullname="jsx3.gui.Matrix.DEFAULT_HEADER_HEIGHT" id="sfield:DEFAULT_HEADER_HEIGHT" name="DEFAULT_HEADER_HEIGHT" static="1" value="20">
    <type class="Number" link="1" name="int"/>
    <text> 20
   </text>
  </field>
  <field access="public" class="jsx3.gui.Matrix" final="1" fullname="jsx3.gui.Matrix.AUTOROW_NONE" id="sfield:AUTOROW_NONE" name="AUTOROW_NONE" static="1" value="0">
    <type class="Number" link="1" name="int"/>
    <text> 0</text>
  </field>
  <field access="public" class="jsx3.gui.Matrix" final="1" fullname="jsx3.gui.Matrix.AUTOROW_LAST_ROW" id="sfield:AUTOROW_LAST_ROW" name="AUTOROW_LAST_ROW" static="1" value="1">
    <type class="Number" link="1" name="int"/>
    <text> 1</text>
  </field>
  <field access="public" class="jsx3.gui.Matrix" final="1" fullname="jsx3.gui.Matrix.AUTOROW_FIRST_ROW" id="sfield:AUTOROW_FIRST_ROW" name="AUTOROW_FIRST_ROW" static="1" value="2">
    <type class="Number" link="1" name="int"/>
    <text> 2</text>
  </field>
  <field access="public" class="jsx3.gui.Matrix" deprecated="1" fullname="jsx3.gui.Matrix.DEFAULT_INFO_LABEL" id="sfield:DEFAULT_INFO_LABEL" name="DEFAULT_INFO_LABEL" static="1" value="&quot;Viewing rows {0} to {1} of {2}&quot;">
    <type link="1" name="String"/>
    <text> "Viewing rows {0} to {1} of {2}".
<br/>Wildcards are as follows:
<ul>
        <li>
          <b>{0}</b> The index position of the first visible on-screen row</li>
<li>
          <b>{1}</b> The index position of the last visible on-screen row</li>
<li>
          <b>{2}</b> Total count of all records in the list</li>
      </ul>
    </text>
    <deprecated>This value is localized.
   </deprecated>
  </field>
  <field access="public" class="jsx3.gui.Matrix" final="1" fullname="jsx3.gui.Matrix.ON_PAINT_PAGE" id="sfield:ON_PAINT_PAGE" name="ON_PAINT_PAGE" static="1" value="&quot;jsxpaintpage&quot;">
    <type link="1" name="String"/>
    <text> jsxpaintpage. Event to subscribe to each time a page of content is about to be painted on-screen</text>
  </field>
  <field access="public" class="jsx3.gui.Matrix" final="1" fullname="jsx3.gui.Matrix.PAGING_OFF" id="sfield:PAGING_OFF" name="PAGING_OFF" static="1" value="0">
    <type class="Number" link="1" name="int"/>
    <text> Default. All data is painted at once with the outer container.</text>
  </field>
  <field access="public" class="jsx3.gui.Matrix" final="1" fullname="jsx3.gui.Matrix.PAGING_2PASS" id="sfield:PAGING_2PASS" name="PAGING_2PASS" static="1" value="1">
    <type class="Number" link="1" name="int"/>
    <text> The outer container is first painted and then the entirety of the data is painted during a second pass</text>
  </field>
  <field access="public" class="jsx3.gui.Matrix" final="1" fullname="jsx3.gui.Matrix.PAGING_CHUNKED" id="sfield:PAGING_CHUNKED" name="PAGING_CHUNKED" static="1" value="2">
    <type class="Number" link="1" name="int"/>
    <text> The outer container is first painted. Chunked sets of data are painted on-screen during repeated passes until
      all data is painted</text>
  </field>
  <field access="public" class="jsx3.gui.Matrix" final="1" fullname="jsx3.gui.Matrix.PAGING_PAGED" id="sfield:PAGING_PAGED" name="PAGING_PAGED" static="1" value="3">
    <type class="Number" link="1" name="int"/>
    <text> The outer container is first painted. The first and last panels are painted during a second pass. As the user
      scrolls, relevant panels are added and unused panels are collected. (NOTE: Requires that row height be fixed.)</text>
  </field>
  <field access="public" class="jsx3.gui.Matrix" final="1" fullname="jsx3.gui.Matrix.PAGING_STEPPED" id="sfield:PAGING_STEPPED" name="PAGING_STEPPED" static="1" value="4">
    <type class="Number" link="1" name="int"/>
    <text> The outer container is painted along with any rows which are immediate children of the rendering context and those
      descendant rows that have an open path to the context node. All other rows will be fetched when the state for
      their on-screen parent row is toggled to open.</text>
  </field>
  <field access="public" class="jsx3.gui.Matrix" final="1" fullname="jsx3.gui.Matrix.SELECTION_UNSELECTABLE" id="sfield:SELECTION_UNSELECTABLE" name="SELECTION_UNSELECTABLE" static="1" value="0">
    <type class="Number" link="1" name="int"/>
    <text> 0</text>
  </field>
  <field access="public" class="jsx3.gui.Matrix" final="1" fullname="jsx3.gui.Matrix.SELECTION_ROW" id="sfield:SELECTION_ROW" name="SELECTION_ROW" static="1" value="1">
    <type class="Number" link="1" name="int"/>
    <text> 1 (default)</text>
  </field>
  <field access="public" class="jsx3.gui.Matrix" final="1" fullname="jsx3.gui.Matrix.SELECTION_MULTI_ROW" id="sfield:SELECTION_MULTI_ROW" name="SELECTION_MULTI_ROW" static="1" value="2">
    <type class="Number" link="1" name="int"/>
    <text> 2</text>
  </field>
  <field access="public" class="jsx3.gui.Matrix" fullname="jsx3.gui.Matrix.DEFAULT_ROW_HEIGHT" id="sfield:DEFAULT_ROW_HEIGHT" name="DEFAULT_ROW_HEIGHT" static="1" value="20">
    <type class="Number" link="1" name="int"/>
    <text> 20
   </text>
  </field>
  <field access="public" class="jsx3.gui.Matrix" fullname="jsx3.gui.Matrix.DEFAULT_PANEL_POOL_COUNT" id="sfield:DEFAULT_PANEL_POOL_COUNT" name="DEFAULT_PANEL_POOL_COUNT" static="1" value="5">
    <type class="Number" link="1" name="int"/>
    <text> 18. number of panels allowed on-screen before destroying the panel most distant from the current panel index
   </text>
  </field>
  <field access="public" class="jsx3.gui.Matrix" fullname="jsx3.gui.Matrix.DEFAULT_ROWS_PER_PANEL" id="sfield:DEFAULT_ROWS_PER_PANEL" name="DEFAULT_ROWS_PER_PANEL" static="1" value="50">
    <type class="Number" link="1" name="int"/>
    <text> 50. number of rows in a given panel
   </text>
  </field>
  <field access="public" class="jsx3.gui.Matrix" fullname="jsx3.gui.Matrix.DEFAULT_REAPER_INTERVAL" id="sfield:DEFAULT_REAPER_INTERVAL" name="DEFAULT_REAPER_INTERVAL" static="1" value="250">
    <type class="Number" link="1" name="int"/>
    <text> 250. number of milliseconds between the time a new panel is added and the reaper checks for content exceeding <code>jsx3.gui.Matrix.DEFAULT_PANEL_POOL_COUNT</code>
   </text>
  </field>
  <field access="public" class="jsx3.gui.Matrix" fullname="jsx3.gui.Matrix.DEFAULT_PANEL_QUEUE_SIZE" id="sfield:DEFAULT_PANEL_QUEUE_SIZE" name="DEFAULT_PANEL_QUEUE_SIZE" static="1" value="3">
    <type class="Number" link="1" name="int"/>
    <text> 3. number of panels in the paint queue. As new panels are added to the queue to be painted, older, less-relevant panels in the queue are removed
   </text>
  </field>
  <field access="public" class="jsx3.gui.Matrix" fullname="jsx3.gui.Matrix.DEFAULTXSLURL" id="sfield:DEFAULTXSLURL" name="DEFAULTXSLURL" static="1">
    <type link="1" name="String"/>
    <text>   </text>
  </field>
  <field access="public" class="jsx3.gui.Matrix" deprecated="1" fullname="jsx3.gui.Matrix.DEFAULT_XSL_URL" id="sfield:DEFAULT_XSL_URL" name="DEFAULT_XSL_URL" static="1">
    <type link="1" name="String"/>
    <deprecated>Renamed to &lt;code&gt;DEFAULTXSLURL&lt;/code&gt;.
   </deprecated>
  </field>
  <constructor access="public" id="method:init" name="init">
    <param name="strName" text="unique name distinguishing this object from all other JSX GUI objects in the JSX application&#10;   ">
      <type link="1" name="String"/>
    </param>
    <text>instance initializer</text>
  </constructor>
  <method access="public" id="method:paint" name="paint">
    <return text="DHTML&#10;   ">
      <type link="1" name="String"/>
    </return>
    <text>Returns the DHTML, used for this object's on-screen VIEW</text>
    <overrides id="overrides:paint" idfk="method:paint" name="paint" source="jsx3.gui.Block"/>
  </method>
  <method access="public" id="method:resetMask" name="resetMask">
    <text>Ends any existing edit session and hides the active mask. This is a carryover method from grid.
   </text>
  </method>
  <method access="public" id="method:repaintData" name="repaintData">
    <text>Paints only the data rows.  Call for quick repainting of the data rows when only the source data
has changed. Does not recalculate and reprofile the box profile and resulting XSLT. Retains scroll position when possible.
   </text>
  </method>
  <method access="public" id="method:repaintHead" name="repaintHead">
    <text>Repaints the header row for improved runtime efficiency. For example, a minor text change to a label in a header row shouldn't repaint the entirety of the instance
   </text>
  </method>
  <method access="public" id="method:doSort" name="doSort">
    <param name="intSortDir" text="&lt;code&gt;jsx3.gui.Matrix.SORT_ASCENDING&lt;/code&gt; or &lt;code&gt;jsx3.gui.Matrix.SORT_DESCENDING&lt;/code&gt;.">
      <type link="1" name="String"/>
    </param>
    <text>Sorts according to the current sort path. If no sort direction is specified, the value will be toggled.</text>
    <see idfk="sfield:SORT_ASCENDING" source="jsx3.gui.Matrix">SORT_ASCENDING</see>
    <see idfk="sfield:SORT_DESCENDING" source="jsx3.gui.Matrix">SORT_DESCENDING</see>
  </method>
  <method access="public" id="method:getSortPath" name="getSortPath">
    <return text="">
      <type link="1" name="String"/>
    </return>
    <text>Returns the name of the CDF attribute to sort on. If no value is set an empty string is returned by default.</text>
    <see idfk="method:getSortPath" source="jsx3.gui.Matrix.Column">jsx3.gui.Matrix.Column.getSortPath()</see>
  </method>
  <method access="public" id="method:setSortPath" name="setSortPath">
    <param name="strAttr" text="">
      <type link="1" name="String"/>
    </param>
    <text>Sets the name of the CDF attribute to sort on. The records in the data source of this matrix are sorted
on this attribute before being painted to screen.</text>
    <see idfk="method:setSortPath" source="jsx3.gui.Matrix.Column">jsx3.gui.Matrix.Column.setSortPath()</see>
  </method>
  <method access="public" id="method:getSortType" name="getSortType">
    <return text="&lt;code&gt;jsx3.gui.Matrix.Column.TYPE_TEXT&lt;/code&gt; or &lt;code&gt;jsx3.gui.Matrix.Column.TYPE_NUMBER&lt;/code&gt;&#10;   ">
      <type link="1" name="String"/>
    </return>
    <text>Returns the data type to be used for sorting this list. This value is either the one explicitly set with
<code>setSortType()</code> or the data type of the current sort.</text>
  </method>
  <method access="public" id="method:setSortType" name="setSortType">
    <param name="DATATYPE" text="data type for this column's data; ; valid types include: jsx3.gui.Matrix.Column.TYPE_TEXT and jsx3.gui.Matrix.Column.TYPE_NUMBER&#10;   ">
      <type link="1" name="String"/>
    </param>
    <text>Sets the data type for the list. This explicit value will override any column data type if set. If it is not set
the data type specific to the sort column is used for sorting.</text>
  </method>
  <method access="public" id="method:getSortDirection" name="getSortDirection">
    <return text="one of: jsx3.gui.Matrix.SORT_ASCENDING or jsx3.gui.Matrix.SORT_DESCENDING&#10;   ">
      <type link="1" name="String"/>
    </return>
    <text>Returns the direction (jsx3.gui.Matrix.SORT_ASCENDING or jsx3.gui.Matrix.SORT_DESCENDING) for the sorted column; if no direction specified, ascending is returned</text>
  </method>
  <method access="public" id="method:setSortDirection" name="setSortDirection">
    <param name="intSortDir" text="one of: jsx3.gui.Matrix.SORT_ASCENDING or jsx3.gui.Matrix.SORT_DESCENDING&#10;   ">
      <type link="1" name="String"/>
    </param>
    <text>Sets the direction (ascending or descending) for the sorted column.</text>
  </method>
  <method access="public" id="method:getCanSort" name="getCanSort">
    <return text="">
      <type class="Number" link="1" name="int"/>
    </return>
    <text>Returns whether the list will render with sortable columns. If <code>null</code> or <code>jsx3.Boolean.TRUE</code>, the instance is sortable.</text>
  </method>
  <method access="public" id="method:setCanSort" name="setCanSort">
    <param name="SORT" text="one of &lt;code&gt;jsx3.Boolean.TRUE&lt;/code&gt; or &lt;code&gt;jsx3.Boolean.FALSE&lt;/code&gt;&#10;   ">
      <type class="Number" link="1" name="int"/>
    </param>
    <text>Sets whether the list will render with sortable columns.</text>
  </method>
  <method access="public" id="method:adoptChild" name="adoptChild">
    <param name="objChild" text="the child to adopt">
      <type link="1" name="jsx3.app.Model"/>
    </param>
    <param name="bRepaint" text="if &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;null&lt;/code&gt;, the object being adopted will be added to&#10;   the parent's view via the parent's &lt;code&gt;paintChild()&lt;/code&gt; method.&#10;   This parameter is made available for those situations where a loop is executing and multiple&#10;   objects are being adopted.  As view operations are the most CPU intensive, passing &lt;code&gt;false&lt;/code&gt;&#10;   while looping through a collection of child objects to adopt will improve performance. After the&#10;   last child is adopted, simply call &lt;code&gt;repaint()&lt;/code&gt; on the parent to immediately synchronize the view.">
      <type class="Boolean" link="1" name="boolean"/>
    </param>
    <param name="bForce" text="if true, the adoption is forced, even if the parent/child don't accept such adoptions (&lt;code&gt;onSetChild()&lt;/code&gt; and &lt;code&gt;onSetParent()&lt;/code&gt; will still be called)">
      <type class="Boolean" link="1" name="boolean"/>
    </param>
    <text>Instance override</text>
    <see>#setChild()</see>
    <overrides id="overrides:adoptChild" idfk="method:adoptChild" name="adoptChild" source="jsx3.app.Model"/>
  </method>
  <method access="public" id="method:insertBefore" name="insertBefore">
    <param name="objMoveChild" text="the one being moved">
      <type link="1" name="jsx3.app.Model"/>
    </param>
    <param name="objPrecedeChild" text="the one to insert before">
      <type link="1" name="jsx3.app.Model"/>
    </param>
    <param name="bRepaint" text="if &lt;code&gt;false&lt;/code&gt; the repaint will be suppressed&#10;   ">
      <type class="Boolean" link="1" name="boolean"/>
    </param>
    <text>Assigns objMoveChild as the previousSibling of objPrecedeChild</text>
    <overrides id="overrides:insertBefore" idfk="method:insertBefore" name="insertBefore" source="jsx3.app.Model"/>
  </method>
  <method access="public" id="method:getCanReorder" name="getCanReorder">
    <return text="one of: jsx3.Boolean.TRUE or jsx3.Boolean.FALSE&#10;   ">
      <type class="Number" link="1" name="int"/>
    </return>
    <text>Returns whether the column children can be reordered via user interaction. If no value is supplied
the isntance will allow child columns to be reordered.</text>
  </method>
  <method access="public" id="method:setCanReorder" name="setCanReorder">
    <param name="REORDER" text="one of: jsx3.Boolean.TRUE or jsx3.Boolean.FALSE&#10;   ">
      <type class="Number" link="1" name="int"/>
    </param>
    <text>Sets whether the columns in the list can be re-ordered via user interaction with the VIEW</text>
  </method>
  <method access="public" id="method:focusRowById" name="focusRowById">
    <param name="strCdfId" text="jsxid property for CDF record">
      <type link="1" name="String"/>
    </param>
    <text>Applies focus to the on-screen row that corresponds to the element in the CDF source document identified by
<code>strCdfId</code>. Note that since only cells can receive focus, this method will apply focus to the
first cell child in the row.</text>
    <see idfk="method:focusCellByIndex" source="jsx3.gui.Matrix">focusCellByIndex()</see>
  </method>
  <method access="public" id="method:focusCellById" name="focusCellById">
    <param name="strCdfId" text="jsxid property for CDF record">
      <type link="1" name="String"/>
    </param>
    <param name="strAttName" text="attribute name on the CDF record. For example, &lt;code&gt;jsxtext&lt;/code&gt;&#10;   ">
      <type link="1" name="String"/>
    </param>
    <text>Applies focus to the on-screen cell that corresponds to the intersection of the element in the CDF source
document identified by <code>strCdfId</code>, and the first column mapped to <code>strAttName</code>.</text>
  </method>
  <method access="public" id="method:focusCellByIndex" name="focusCellByIndex">
    <param name="strCdfId" text="jsxid property for CDF record">
      <type link="1" name="String"/>
    </param>
    <param name="intCellIndex" text="zero-based index of cell (on-screen).&#10;   ">
      <type class="Number" link="1" name="int"/>
    </param>
    <text>Applies focus to the on-screen cell that corresponds to the intersection of
the element in the CDF source document identified by <code>strCdfId</code>, and the cell at the given index.</text>
  </method>
  <method access="public" id="method:getFocusStyle" name="getFocusStyle">
    <param name="strDefault" text="The default value to use if null (Matrix.FOCUS_STYLE)">
      <type link="1" name="String"/>
    </param>
    <return text="">
      <type link="1" name="String"/>
    </return>
    <text>Returns the CSS string to apply to a Row/Cell when it has focus</text>
  </method>
  <method access="public" id="method:setFocusStyle" name="setFocusStyle">
    <param name="strCSS" text="Valid CSS. For example: font-weight:bold;color:orange;&#10;   ">
      <type link="1" name="String"/>
    </param>
    <text>Sets the CSS string to apply to a Row/Cell when it has focus. NOTE: Passing
styles that affect position, left, top, width, height, border, background-image, padding, and margin
(those reserved by the class) can have undesired effects.</text>
  </method>
  <method access="public" id="method:resetFocusContext" name="resetFocusContext">
    <param name="strId"/>
    <text>Removes the focus style from whichever cell is designated to have focus context. Once focus context
is applied to the active cell in a matrix, the focus style will continue to be applied to
the active cell until another cell is set as the active cell or the Matrix is repainted via
a call to repaint or repaintData.
   </text>
  </method>
  <method access="public" id="method:executeRecord" name="executeRecord">
    <param name="strRecordId" text="the jsxid of the CDF record to execute.&#10;   ">
      <type link="1" name="String"/>
    </param>
    <text>Evaluates the JavaScript code in the <code>jsxexecute</code> attribute of one CDF record of this list.</text>
  </method>
  <method access="public" id="method:getSelectionBG" name="getSelectionBG">
    <param name="strDefault" text="The default value to use if null (Matrix.SELECTION_BG)">
      <type link="1" name="String"/>
    </param>
    <return text="">
      <type link="1" name="String"/>
    </return>
    <text>Returns the CSS string to apply to a Row/Cell when it has focus</text>
  </method>
  <method access="public" id="method:setSelectionBG" name="setSelectionBG">
    <param name="strURL" text="">
      <type link="1" name="String"/>
    </param>
    <text>Sets the URL for the image to use (as the repeating background image) to denote selection.</text>
  </method>
  <method access="public" id="method:getSelectedNodes" name="getSelectedNodes">
    <return text="">
      <type link="1" name="jsx3.util.List">
        <type link="1" name="jsx3.xml.Entity"/>
      </type>
    </return>
    <text>Returns the collection of selected records.</text>
  </method>
  <method access="public" id="method:getSelectedIds" name="getSelectedIds">
    <return text="JavaScript array of stings&#10;   ">
      <type link="1" name="Array">
        <type link="1" name="String"/>
      </type>
    </return>
    <text>Returns the <b>jsxid(s)</b> for the selected record(s). Equivalent to <code>this.getValue()</code> except that the return value is always an Array.</text>
  </method>
  <method access="public" id="method:selectRecord" name="selectRecord">
    <param name="strRecordId" text="the jsxid of the record to select.&#10;   ">
      <type link="1" name="String"/>
    </param>
    <text>Selects a CDF record of this list. The item will be highlighted in the view and the CDF data will be updated
accordingly. If this list is a multi-select list then this selection will be added to any previous selection.</text>
  </method>
  <method access="public" id="method:deselectRecord" name="deselectRecord">
    <param name="strRecordId" text="the jsxid of the record to deselect.&#10;   ">
      <type link="1" name="String"/>
    </param>
    <text>Deselects a CDF record within the Matrix. Both the view and the data model (CDF) will be updated</text>
  </method>
  <method access="public" id="method:deselectAllRecords" name="deselectAllRecords">
    <text>Deselects all selected CDF records.
   </text>
  </method>
  <method access="public" id="method:getAutoRowSession" name="getAutoRowSession">
    <return text="">
      <type link="1" name="Object"/>
    </return>
    <text>Returns an object array of name/value pairs representing the current auto row session. When the session is committed, this
object will be converted into a CDF Record for the instance.</text>
  </method>
  <method access="public" id="method:commitAutoRowSession" name="commitAutoRowSession">
    <param name="objEvent" text="If passed, Allows Model Event to fire.">
      <type link="1" name="jsx3.gui.Event"/>
    </param>
    <param name="intCellIndex" text="Focus will be applied to the autorow cell at this index (zero-based)&#10;   ">
      <type class="Number" link="1" name="int"/>
    </param>
    <text>Commits any active autorow session.</text>
  </method>
  <method access="public" id="method:toggleItem" name="toggleItem">
    <param name="strRecordId" text="the 'jsxid' attribute on the given CDF record to toggle">
      <type link="1" name="String"/>
    </param>
    <param name="bOpen" text="if null, the open state will be toggled&#10;   ">
      <type class="Boolean" link="1" name="boolean"/>
    </param>
    <text>Toggles the open/closed state for a node in the Matrix</text>
  </method>
  <method access="public" id="method:revealRecord" name="revealRecord">
    <param name="strRecordId" text="the id of the record to reveal&#10;   ">
      <type link="1" name="String"/>
    </param>
    <text>Reveals a record by toggling parent nodes open (if rendering hierarcally) and scrolling the record into view.</text>
  </method>
  <method access="public" id="method:getResizable" name="getResizable">
    <return text="">
      <type class="Number" link="1" name="int"/>
    </return>
    <text>Returns whether or not this column can be resized by the user. If not set, the column will be assumed resizable</text>
  </method>
  <method access="public" id="method:setResizable" name="setResizable">
    <param name="RESIZE" text="">
      <type class="Number" link="1" name="int"/>
    </param>
    <text>Sets whether or not this column can be resized by the user. If not set, the column will be assumed resizable. Note that if the parent Matrix
is set as NOT resizable, this setting is ignored and no child columns can be resized</text>
  </method>
  <method access="public" id="method:getAutoRow" name="getAutoRow">
    <return text="&lt;code&gt;jsx3.Boolean.TRUE&lt;/code&gt; or &lt;code&gt;jsx3.Boolean.FALSE&lt;/code&gt;&#10;   ">
      <type class="Number" link="1" name="int"/>
    </return>
    <text>Returns whether or not an 'auto append' row will be rendered, allowing the user to automatically add new rows to the instance.</text>
  </method>
  <method access="public" id="method:setAutoRow" name="setAutoRow">
    <param name="intBoolean" text="jsx3.Boolean.TRUE if the column widths should be adjusted to fully fit within the viewport&#10;   ">
      <type class="Number" link="1" name="int"/>
    </param>
    <text>Sets whether or not an 'auto append' row will be rendered, allowing the user to automatically add new rows to the instance. Note
that if the rendering model is hierarchical or the paging model is <code>jsx3.gui.Matrix.PAGING_PAGED</code>, the auto row
feature is disabled.  The CSS style for the auto row (a TR element) can be modified via the XSL Parameters palette, via the XSL
parameter, <code>jsx_autorow_style</code>
    </text>
  </method>
  <method access="public" id="method:getContentElement" name="getContentElement">
    <param name="strCdfId" text="jsxid property for CDF record">
      <type link="1" name="String"/>
    </param>
    <param name="strAttName" text="attribute name on the CDF record. For example, &lt;code&gt;jsxtext&lt;/code&gt;">
      <type link="1" name="String"/>
    </param>
    <return text="">
      <type link="1" name="HTMLElement"/>
    </return>
    <text>Returns the HTML element that represents the intersection of the row identified
by <code>strCdfId</code> and the first column mapped to the named CDF attribute, <code>strAttName</code>.</text>
  </method>
  <method access="public" id="method:resetXmlCacheData" name="resetXmlCacheData">
    <param name="objServer" text="the server owning the cache to modify. This is a required argument only if&#10;   &lt;code&gt;this.getServer()&lt;/code&gt; does not returns a server instance.&#10;   ">
      <type link="1" name="jsx3.app.Server"/>
    </param>
    <text>Removes the XML source document stored under the XML ID of this object from the server cache.</text>
    <overridesmix id="overrides:resetXmlCacheData" idfk="method:resetXmlCacheData" name="resetXmlCacheData" source="jsx3.xml.Cacheable"/>
  </method>
  <method access="public" id="method:resetCacheData" name="resetCacheData">
    <param name="objServer" text="the server owning the cache to modify. This is a required argument only if&#10;   &lt;code&gt;this.getServer()&lt;/code&gt; does not returns a server instance.&#10;   ">
      <type link="1" name="jsx3.app.Server"/>
    </param>
    <text>Removes the XML source document stored under the XML ID of this object from the server cache.</text>
    <overridesmix id="overrides:resetCacheData" idfk="method:resetCacheData" name="resetCacheData" source="jsx3.xml.Cacheable"/>
  </method>
  <method access="public" id="method:setXMLId" name="setXMLId">
    <param name="strXMLId" text="">
      <type link="1" name="String"/>
    </param>
    <return text="this object.">
      <type link="1" name="jsx3.xml.Cacheable"/>
    </return>
    <text>Sets the XML ID of this object. This value is the key under which the XML source document of this object is
saved in the cache of the server owning this object. The developer may specify either a unique or shared value.
If no value is specified, a unique id is generated.</text>
    <see>#getXML()</see>
    <overridesmix id="overrides:setXMLId" idfk="method:setXMLId" name="setXMLId" source="jsx3.xml.Cacheable"/>
  </method>
  <method access="public" id="method:repaint" name="repaint">
    <return text="the result of calling &lt;code&gt;paint()&lt;/code&gt; or &lt;code&gt;null&lt;/code&gt; if this object is not displayed.">
      <type link="1" name="String"/>
    </return>
    <text>Updates the view of this object by calling <code>paint()</code> and replacing the current view with the
returned HTML. This method has no effect if this object is not currently displayed.</text>
    <see idfk="method:paint" source="jsx3.gui.Matrix">paint()</see>
    <overrides id="overrides:repaint" idfk="method:repaint" name="repaint" source="jsx3.gui.Painted"/>
  </method>
  <method access="public" id="method:setXMLString" name="setXMLString">
    <param name="strXML" text="&lt;code&gt;null&lt;/code&gt; or a well-formed serialized XML element.">
      <type link="1" name="String"/>
    </param>
    <return text="this object.">
      <type link="1" name="jsx3.xml.Cacheable"/>
    </return>
    <text>Sets the XML string of this object. Setting this value to the string serialization of an XML document is one
way of specifying the source XML document of this object.</text>
    <see>#getXML()</see>
    <overridesmix id="overrides:setXMLString" idfk="method:setXMLString" name="setXMLString" source="jsx3.xml.Cacheable"/>
  </method>
  <method access="public" id="method:setXMLURL" name="setXMLURL">
    <param name="strXMLURL" text="&lt;code&gt;null&lt;/code&gt; or a URI that when resolved against the server owning this object&#10;  specifies a valid XML document.">
      <type link="1" name="String"/>
    </param>
    <return text="this object.">
      <type link="1" name="jsx3.xml.Cacheable"/>
    </return>
    <text>Sets the XML URL of this object. Settings this value to the URI of an XML document is one way of specifying the
source XML document of this object.</text>
    <see>#getXML()</see>
    <overridesmix id="overrides:setXMLURL" idfk="method:setXMLURL" name="setXMLURL" source="jsx3.xml.Cacheable"/>
  </method>
  <method access="public" deprecated="1" id="method:getXSL" name="getXSL">
    <return text="jsx3.xml.Document instance containing valid XSL stylesheet">
      <type link="1" name="jsx3.xml.Document"/>
    </return>
    <text>Returns XSLT, prioritizing the acquisition in the following order: 1) check cache; 2) check jsxxsl; 3) check jsxxslurl; 4) use default</text>
    <deprecated>Per-instance control of the XSL template is deprecated
   </deprecated>
    <overridesmix id="overrides:getXSL" idfk="method:getXSL" name="getXSL" source="jsx3.xml.Cacheable"/>
  </method>
  <method access="public" id="method:getSortedIds" name="getSortedIds">
    <return text="">
      <type link="1" name="Array"/>
    </return>
    <text>Returns an array of all jsxid attributes in the source CDF in the order they would appear if painted on-screen</text>
  </method>
  <method access="public" id="method:getSelectionModel" name="getSelectionModel">
    <param name="strDefault" text="The default value to use if null">
      <type link="1" name="String"/>
    </param>
    <return text="">
      <type class="Number" link="1" name="int"/>
    </return>
    <text>Returns the selection model. If no selection type is specified, the instance will employ single row selection (<code>jsx3.gui.Matrix.SELECTION_ROW</code>)</text>
  </method>
  <method access="public" id="method:setSelectionModel" name="setSelectionModel">
    <param name="intType" text="one of: jsx3.gui.Matrix.SELECTION_UNSELECTABLE, jsx3.gui.Matrix.SELECTION_ROW, jsx3.gui.Matrix.SELECTION_MULTI_ROW&#10;   ">
      <type class="Number" link="1" name="int"/>
    </param>
    <text>Sets the selection model</text>
  </method>
  <method access="public" id="method:getRowHeight" name="getRowHeight">
    <param name="strDefault" text="The default value to use if null">
      <type link="1" name="String"/>
    </param>
    <return text="">
      <type class="Number" link="1" name="int"/>
    </return>
    <text>Returns the row height</text>
  </method>
  <method access="public" id="method:setRowHeight" name="setRowHeight">
    <param name="intHeight" text="height in pixels">
      <type class="Number" link="1" name="int"/>
    </param>
    <param name="bSuppressRepaint" text="Pass &lt;code&gt;true&lt;/code&gt; to stop the default repaint from occurring.&#10;Typically property updates that affect the browser-specific box model (such as padding) are repainted&#10;immediately to keep the box model abstraction in synch with the native view. However, the repaint can be&#10;suppressed to avoid unnecessary reparsing of the XSLT during repeated property updates.&#10;   ">
      <type class="Boolean" link="1" name="boolean"/>
    </param>
    <text>Sets the on-screen row height. If row height is null, the default row height will be used (<code>jsx3.gui.Matrix.DEFAULT_ROW_HEIGHT</code>).
If row height is <code>0</code>, the row height is flexible and the row's height will expand to fit the content.</text>
  </method>
  <method access="public" id="method:getRowsPerPanel" name="getRowsPerPanel">
    <param name="strDefault" text="The default value to use if null">
      <type link="1" name="String"/>
    </param>
    <return text="">
      <type class="Number" link="1" name="int"/>
    </return>
    <text>Returns the number of rows each panel should contain.  If null, the default value will be used: <code>jsx3.gui.Matrix.DEFAULT_ROWS_PER_PANEL</code>
    </text>
  </method>
  <method access="public" id="method:setRowsPerPanel" name="setRowsPerPanel">
    <param name="intCount" text="">
      <type class="Number" link="1" name="int"/>
    </param>
    <param name="bSuppressRepaint" text="Pass &lt;code&gt;true&lt;/code&gt; to stop the default repaint from occurring.&#10;   ">
      <type class="Boolean" link="1" name="boolean"/>
    </param>
    <text>Sets the number of rows each panel should contain.</text>
  </method>
  <method access="public" id="method:getPanelQueueSize" name="getPanelQueueSize">
    <param name="strDefault" text="The default value to use if null">
      <type link="1" name="String"/>
    </param>
    <return text="">
      <type class="Number" link="1" name="int"/>
    </return>
    <text>Sets the number of panels that are allowed in the queue waiting to be painted. If null, the default value will be used: <code>jsx3.gui.Matrix.DEFAULT_PANEL_QUEUE_SIZE</code>
Note that this is different from the number of painted panels allowed on screen (e.g., <code>getPanelPoolSize()</code>).</text>
  </method>
  <method access="public" id="method:setPanelQueueSize" name="setPanelQueueSize">
    <param name="intCount" text="">
      <type class="Number" link="1" name="int"/>
    </param>
    <text>Sets the number of panels that are allowed in the queue waiting to be painted. Can be tuned up or down to optimize performance given the amount of data, connection speed, etc</text>
  </method>
  <method access="public" id="method:getReaperInterval" name="getReaperInterval">
    <param name="strDefault" text="The default value to use if null">
      <type link="1" name="String"/>
    </param>
    <return text="">
      <type class="Number" link="1" name="int"/>
    </return>
    <text>Returns the the number of milliseconds to wait before checking for inactive panels to garbage collect.  If null, the default value will be used: <code>jsx3.gui.Matrix.DEFAULT_REAPER_INTERVAL</code>
    </text>
  </method>
  <method access="public" id="method:setReaperInterval" name="setReaperInterval">
    <param name="intInterval" text="number of milliseconds&#10;   ">
      <type class="Number" link="1" name="int"/>
    </param>
    <text>Sets the the number of milliseconds to wait before checking for inactive panels to garbage collect.</text>
  </method>
  <method access="public" id="method:getPanelPoolSize" name="getPanelPoolSize">
    <param name="strDefault" text="The default value to use if null">
      <type link="1" name="String"/>
    </param>
    <return text="">
      <type class="Number" link="1" name="int"/>
    </return>
    <text>Returns the number panels (a panel contains a collection of rows--<code>getRowsPerPanel()</code>) that should be part of the pool.  If a panel count greater
than this value exists, the panels furthest away (as calculated by the scroll position) from the active panel will be destroyed. If this value is null,
the value defined by the constant, <code>jsx3.gui.Matrix.DEFAULT_PANEL_POOL_COUNT</code>, will be used.</text>
  </method>
  <method access="public" id="method:setPanelPoolSize" name="setPanelPoolSize">
    <param name="intCount" text="">
      <type class="Number" link="1" name="int"/>
    </param>
    <text>Sets the number panels (a panel contains a collection of rows--<code>getRowsPerPanel()</code>) that should be part of the pool.</text>
  </method>
  <method access="public" id="method:getPagingModel" name="getPagingModel">
    <param name="strDefault" text="The default value to use if null">
      <type link="1" name="String"/>
    </param>
    <return text="">
      <type class="Number" link="1" name="int"/>
    </return>
    <text>Returns how data should be painted on-screen.  If no value is specified, <code>jsx3.gui.Matrix.PAGING_OFF</code> will be applied. Note that the rendering model limits the available paging models:
<ul>
        <li>Matrix.PAGING_OFF: Paint everthing to screen at once (container and data) <i>(rendering model: all)</i>
        </li>
<li>Matrix.PAGING_2PASS: Paint outer container and then perform a second pass to paint the data.  <i>(rendering model: deep, shallow)</i>
        </li>
<li>Matrix.PAGING_CHUNKED: Paint outer container and then perform repeated paints until all data has been painted, regardless of scroll position.  <i>(rendering model: deep, shallow)</i>
        </li>
<li>Matrix.PAGING_PAGED: Paint outer container. Paint First and last panels during second pass.  Paint relevant panels when user scrolls to a given position. Discard excess panels. <i>(rendering model: deep, shallow)</i>
        </li>
<li>Matrix.PAGING_STEPPED: Paint root nodes and any open descendants. Paint others as they are toggled open. <i>(rendering model: hierarchical)</i>
        </li>
      </ul>
    </text>
    <see idfk="method:getRenderingModel" source="jsx3.gui.Matrix">getRenderingModel()</see>
  </method>
  <method access="public" id="method:setPagingModel" name="setPagingModel">
    <param name="intModel" text="one of: Matrix. PAGING_OFF, PAGING_2PASS, PAGING_CHUNKED, PAGING_PAGED, PAGING_STEPPED&#10;   ">
      <type class="Number" link="1" name="int"/>
    </param>
    <text>Sets how data should be painted on-screen.  If no value is specified, <code>jsx3.gui.Matrix.PAGING_OFF</code> will be applied.</text>
  </method>
  <method access="public" id="method:getHeaderHeight" name="getHeaderHeight">
    <param name="strDefault" text="The default value to use if null">
      <type link="1" name="String"/>
    </param>
    <return text="">
      <type class="Number" link="1" name="int"/>
    </return>
    <text>Returns the height of the header row in pixels. If this value is not set (<code>null</code>), the list will render with
the default value of <code>jsx3.gui.Matrix.DEFAULT_HEADER_HEIGHT</code>.</text>
  </method>
  <method access="public" id="method:setHeaderHeight" name="setHeaderHeight">
    <param name="intHeight" text="">
      <type class="Number" link="1" name="int"/>
    </param>
    <param name="bSuppressRepaint" text="Pass &lt;code&gt;true&lt;/code&gt; to stop the default repaint from occurring.&#10;Typically property updates that affect the browser-specific box model (such as height) are repainted&#10;immediately to keep the box model abstraction in sync with the native view. However, the repaint can be&#10;suppressed to avoid unnecessary reparsing of the XSLT during repeated property updates.&#10;   ">
      <type class="Boolean" link="1" name="boolean"/>
    </param>
    <text>Sets the height of the header row in pixels. Set to zero (0) to hide the header row and only render the body rows.</text>
  </method>
  <method access="public" id="method:getScrollInfoLabel" name="getScrollInfoLabel">
    <param name="strDefault" text="The default value to use if null">
      <type link="1" name="String"/>
    </param>
    <return text="">
      <type class="Number" link="1" name="int"/>
    </return>
    <text>Returns the <i>info label</i> to display when scrolling a paged instance, in order to show the scroll position.</text>
  </method>
  <method access="public" id="method:setScrollInfoLabel" name="setScrollInfoLabel">
    <param name="strLabel" text="valid HTML/Text.  Set to an empty string to suppress any label from displaying.&#10;&lt;br/&gt;Wildcards are as follows:&#10;&lt;ul&gt;&lt;li&gt;&lt;b&gt;{0}&lt;/b&gt; The index position of the first visible on-screen row&lt;/li&gt;&#10;&lt;li&gt;&lt;b&gt;{1}&lt;/b&gt; The index position of the last visible on-screen row&lt;/li&gt;&#10;&lt;li&gt;&lt;b&gt;{2}&lt;/b&gt; Total count of all records in the list&lt;/li&gt;&lt;/ul&gt;&#10;   ">
      <type link="1" name="String"/>
    </param>
    <text>Sets the standard info label to display when scrolling to show the scroll position.  If no label is supplied
an appropriate localized value will be used. Set to an empty string to suppress any label from displaying.</text>
  </method>
  <method access="public" id="method:getScrollLeft" name="getScrollLeft">
    <return text="a non-negative number&#10;   ">
      <type class="Number" link="1" name="int"/>
    </return>
    <text>Returns the horizontal scroll position of the list.</text>
  </method>
  <method access="public" id="method:setScrollLeft" name="setScrollLeft">
    <param name="intScrollLeft" text="a non-negative number&#10;   ">
      <type class="Number" link="1" name="int"/>
    </param>
    <text>Sets the horizontal scroll position.</text>
  </method>
  <method access="public" id="method:getScrollTop" name="getScrollTop">
    <return text="a non-negative number&#10;   ">
      <type class="Number" link="1" name="int"/>
    </return>
    <text>Returns the vertical scroll position.</text>
  </method>
  <method access="public" id="method:setScrollTop" name="setScrollTop">
    <param name="intScrollTop" text="a non-negative number">
      <type class="Number" link="1" name="int"/>
    </param>
    <param name="objGUI" text="">
      <type link="1" name="HTMLElement"/>
    </param>
    <text>Sets the vertical scroll position.</text>
  </method>
  <method access="public" id="method:synchronizeVScroller" name="synchronizeVScroller">
    <text>Updates the scroll height and scroll position of the vertical scrollbar. When a Matrix instance has
a display property of <b>none</b> (or is contained by an ancestor with a display of none) and the Matrix is repainted (repaint/repaintData),
the browser will misreport how large the content actually is.  When the Matrix is then restored the scrollbars will be disabled.
By calling this method after the view has been restored (i.e., when display is set to <b>block</b>), the scrollbars will reflect the accurate height.
   </text>
  </method>
  <method access="public" id="method:getScaleWidth" name="getScaleWidth">
    <return text="">
      <type class="Number" link="1" name="int"/>
    </return>
    <text>Returns whether or not the column widths should be adjusted (decremented) such that all columns fit within the viewport.
If <code>null</code> or <code>jsx3.Boolean.FALSE</code>, scale width will <b>not</b> be used and the column widths will render
fully, displaying a horizontal scrollbar when necessary. In such a case, all wildcard columns (e.g., *) will be resolved to the value,
<code>jsx3.gui.Matrix.Column.DEFAULT_WIDTH</code>.</text>
  </method>
  <method access="public" id="method:setScaleWidth" name="setScaleWidth">
    <param name="intBoolean" text="One of: &lt;code&gt;jsx3.Boolean.TRUE&lt;/code&gt; or &lt;code&gt;jsx3.Boolean.FALSE&lt;/code&gt;&#10;   ">
      <type class="Number" link="1" name="int"/>
    </param>
    <text>Sets whether or not the column widths should be adjusted such that all columns visually display within the viewport.
Defaults to <code>jsx3.Boolean.FALSE</code> if not set, meaning a horizontal scrollbar will appear if the aggregate column widths
exceed the available width of the viewport.</text>
  </method>
  <method access="public" id="method:paintChild" name="paintChild">
    <param name="objJSX" text="direct child whose generated VIEW will be directly inserted into the DOM to provide more efficient screen updates as repaint is costly for large applications&#10;   ">
      <type link="1" name="jsx3.app.Model"/>
    </param>
    <param name="bGroup"/>
    <text>inserts DHTML (as string) into IE's on-screen DOM as a child of the object's on-screen VIEW</text>
    <overrides id="overrides:paintChild" idfk="method:paintChild" name="paintChild" source="jsx3.gui.Painted"/>
  </method>
  <method access="public" id="method:getHeaderBorder" name="getHeaderBorder">
    <return text="">
      <type link="1" name="String"/>
    </return>
    <text>Returns CSS property value(s) for a border (border: solid 1px #000000)</text>
  </method>
  <method access="public" id="method:setHeaderBorder" name="setHeaderBorder">
    <param name="strCSS" text="valid CSS property value for a border (border: solid 1px #000000)&#10;   ">
      <type link="1" name="String"/>
    </param>
    <text>Sets CSS property value(s) for a border on the header row (<code>border: solid 1px #000000</code>). Updates both model and view.</text>
  </method>
  <method access="public" id="method:getBodyBorder" name="getBodyBorder">
    <return text="">
      <type link="1" name="String"/>
    </return>
    <text>Returns CSS property value(s) for a border (border: solid 1px #000000)</text>
  </method>
  <method access="public" id="method:setBodyBorder" name="setBodyBorder">
    <param name="strCSS" text="valid CSS property value for a border (border: solid 1px #000000)">
      <type link="1" name="String"/>
    </param>
    <param name="bSuppressRepaint" text="Pass &lt;code&gt;true&lt;/code&gt; to stop the default repaint from occurring.&#10;Typically property updates that affect the browser-specific box model (such as borders) are repainted&#10;immediately to keep the box model abstraction in synch with the native view. However, the repaint can be&#10;suppressed to avoid unnecessary reparsing of the XSLT during repeated property updates.">
      <type class="Boolean" link="1" name="boolean"/>
    </param>
    <return text="this object&#10;   ">
      <type link="1" name="jsx3.gui.Block"/>
    </return>
    <text>Sets CSS property value(s) for a border (<code>border: solid 1px #000000</code>). Updates MODEL and VIEW (unless repaint is suppressed).</text>
  </method>
  <method access="public" id="method:getValue" name="getValue">
    <return text="">
      <type link="1" name="String"/>
      <type link="1" name="Array">
        <type link="1" name="String"/>
      </type>
    </return>
    <text>Returns an array of selected values (or empty array) if the selection model is <code>jsx3.gui.Matrix.SELECTION_MULTI_ROW</code>. Returns a string (or null)
for the other selection models</text>
    <overridesmix id="overrides:getValue" idfk="method:getValue" name="getValue" source="jsx3.gui.Form"/>
  </method>
  <method access="public" id="method:doValidate" name="doValidate">
    <return text="&lt;code&gt;jsx3.gui.Form.STATEINVALID&lt;/code&gt; or &lt;code&gt;jsx3.gui.Form.STATEVALID&lt;/code&gt;.&#10;   ">
      <type class="Number" link="1" name="int"/>
    </return>
    <text>
      <code>STATEINVALID</code> is returned if the <code>required</code> property of this control is
<code>true</code> and no selection is made.</text>
    <overridesmix id="overrides:doValidate" idfk="method:doValidate" name="doValidate" source="jsx3.gui.Form"/>
  </method>
  <method access="public" id="method:getRenderingModel" name="getRenderingModel">
    <param name="strDefault" text="The default value to use if null">
      <type link="1" name="String"/>
    </param>
    <return text="">
      <type link="1" name="String"/>
    </return>
    <text>Returns the rendering model (how rows will be painted on-screen). If not set, the instance will render <b>deep</b>, meaning all descendants
of the <b>rendering context</b> will be painted on-screen.</text>
  </method>
  <method access="public" id="method:setRenderingModel" name="setRenderingModel">
    <param name="MODEL" text="one of: shallow, deep, or hierarchical">
      <type link="1" name="String"/>
    </param>
    <param name="bSuppressRepaint" text="Pass &lt;code&gt;true&lt;/code&gt; to stop the default repaint from occurring.&#10;   ">
      <type class="Boolean" link="1" name="boolean"/>
    </param>
    <text>Sets the rendering model (how rows will be painted on-screen).</text>
  </method>
  <method access="public" id="method:getRenderingContext" name="getRenderingContext">
    <param name="strDefault" text="The default value to use if null">
      <type link="1" name="String"/>
    </param>
    <return text="">
      <type link="1" name="String"/>
    </return>
    <text>Returns the jsxid of the CDF record that will serve as the <b>origin</b> when rendering the data on-screen. If not set, the
id, <b>jsxroot</b>, (which is the id for the root node, &lt;data&gt;) will be used.</text>
  </method>
  <method access="public" id="method:setRenderingContext" name="setRenderingContext">
    <param name="strJsxId" text="jsxid property for the CDF record to use as the contextual root when rendering data on-screen.">
      <type link="1" name="String"/>
    </param>
    <param name="bSuppressRepaint" text="Pass &lt;code&gt;true&lt;/code&gt; to stop the default repaint from occurring.&#10;   ">
      <type class="Boolean" link="1" name="boolean"/>
    </param>
    <text>Sets the jsxid of the CDF record that will serve as the <b>origin</b> when rendering the data on-screen.</text>
  </method>
  <method access="public" id="method:getSuppressHScroller" name="getSuppressHScroller">
    <param name="strDefault" text="The default value to use if null">
      <type link="1" name="String"/>
    </param>
    <return text="&lt;code&gt;jsx3.Boolean.TRUE&lt;/code&gt; or &lt;code&gt;jsx3.Boolean.FALSE&lt;/code&gt;&#10;   ">
      <type class="Number" link="1" name="int"/>
    </return>
    <text>Returns whether or not to supress display of the horizontal scrollbar. When not set, the scrollbar will display as needed.</text>
  </method>
  <method access="public" id="method:setSuppressHScroller" name="setSuppressHScroller">
    <param name="intTrueFalse" text="&lt;code&gt;jsx3.Boolean.TRUE&lt;/code&gt; or &lt;code&gt;jsx3.Boolean.FALSE&lt;/code&gt;&#10;   ">
      <type class="Number" link="1" name="int"/>
    </param>
    <text>Sets whether or not to supress display of the horizontal scrollbar. Updates both model and view</text>
  </method>
  <method access="public" id="method:getSuppressVScroller" name="getSuppressVScroller">
    <param name="strDefault" text="The default value to use if null">
      <type link="1" name="String"/>
    </param>
    <return text="&lt;code&gt;jsx3.Boolean.TRUE&lt;/code&gt; or &lt;code&gt;jsx3.Boolean.FALSE&lt;/code&gt;&#10;   ">
      <type class="Number" link="1" name="int"/>
    </return>
    <text>Returns whether or not to supress display of the vertical scrollbar. When not set, the scrollbar will display as needed.</text>
  </method>
  <method access="public" id="method:setSuppressVScroller" name="setSuppressVScroller">
    <param name="intTrueFalse" text="&lt;code&gt;jsx3.Boolean.TRUE&lt;/code&gt; or &lt;code&gt;jsx3.Boolean.FALSE&lt;/code&gt;">
      <type class="Number" link="1" name="int"/>
    </param>
    <param name="bSuppressRepaint" text="Pass &lt;code&gt;true&lt;/code&gt; to stop the default repaint from occurring.&#10;Typically property updates that affect the browser-specific box model (such as rendering the vertical scrollbar) are repainted&#10;immediately to keep the box model abstraction in synch with the native view. However, the repaint can be&#10;suppressed to avoid unnecessary reparsing of the XSLT during repeated property updates.&#10;   ">
      <type class="Boolean" link="1" name="boolean"/>
    </param>
    <text>Sets whether or not to supress display of the vertical scrollbar. Updates both model and view.</text>
  </method>
  <method access="public" id="method:getFixedColumnIndex" name="getFixedColumnIndex">
    <param name="strDefault" text="The default value to use if null">
      <type link="1" name="String"/>
    </param>
    <return text="positive integer&#10;   ">
      <type class="Number" link="1" name="int"/>
    </return>
    <text>Returns the zero-based index of the on-screen column(s), to the left of which will be fixed and cannot be reordered.  For example, if this value
is set to <code>1</code>, the first column can never be reordered and will always remain the first column.  If this value is set to <code>2</code>,
the first two columns will be fixed.  Setting this value to <code>0</code> is effectively the same as setting it to <code>null</code>
    </text>
  </method>
  <method access="public" id="method:setFixedColumnIndex" name="setFixedColumnIndex">
    <param name="intIndex" text="positive integer&#10;   ">
      <type class="Number" link="1" name="int"/>
    </param>
    <text>Sets the zero-based index of the on-screen column(s), to the left of which will be fixed and cannot be reordered.</text>
  </method>
  <method access="public" id="method:getRenderNavigators" name="getRenderNavigators">
    <param name="strDefault" text="The default value to use if null">
      <type link="1" name="String"/>
    </param>
    <return text="&lt;code&gt;jsx3.Boolean.TRUE&lt;/code&gt; or &lt;code&gt;jsx3.Boolean.FALSE&lt;/code&gt;&#10;   ">
      <type class="Number" link="1" name="int"/>
    </return>
    <text>Returns whether or not to render the navigation controls that are applied to the first column when rendering model is <b>hierarchical</b>.  When not set the navigators are rendered.</text>
  </method>
  <method access="public" id="method:setRenderNavigators" name="setRenderNavigators">
    <param name="intTrueFalse" text="&lt;code&gt;jsx3.Boolean.TRUE&lt;/code&gt; or &lt;code&gt;jsx3.Boolean.FALSE&lt;/code&gt;">
      <type class="Number" link="1" name="int"/>
    </param>
    <param name="bSuppressRepaint" text="Pass &lt;code&gt;true&lt;/code&gt; to stop the default repaint from occurring.&#10;Typically property updates that affect the browser-specific box model (such as rendering the navigational controls) are repainted&#10;immediately to keep the box model abstraction in synch with the native view. However, the repaint can be&#10;suppressed to avoid unnecessary reparsing of the XSLT during repeated property updates.&#10;   ">
      <type class="Boolean" link="1" name="boolean"/>
    </param>
    <text>Sets whether or not to render the navigation controls on the first column when being rendered in <b>hierarchical</b> mode.</text>
  </method>
  <method access="public" id="method:getIcon" name="getIcon">
    <param name="strDefault" text="The default value to use if null">
      <type link="1" name="String"/>
    </param>
    <return text="URL for icon to use. If null, &lt;code&gt;jsx3.gui.Matrix.ICON&lt;/code&gt; will be applied when rendered.&#10;   ">
      <type link="1" name="String"/>
    </return>
    <text>Returns the icon to use for those CDF records that do not explicitly specify an icon via the <b>jsximg</b> attribute</text>
  </method>
  <method access="public" id="method:setIcon" name="setIcon">
    <param name="strURL" text="URL for icon to use&#10;   ">
      <type link="1" name="String"/>
    </param>
    <text>Sets the icon to use for those CDF records that do not explicitly specify an icon via the <b>jsximg</b> attribute</text>
  </method>
  <method access="public" id="method:getIconMinus" name="getIconMinus">
    <param name="strDefault" text="The default value to use if null">
      <type link="1" name="String"/>
    </param>
    <return text="URL for icon. If null, &lt;code&gt;jsx3.gui.Matrix.ICON_MINUS&lt;/code&gt; will be applied when rendered.&#10;   ">
      <type link="1" name="String"/>
    </return>
    <text>Returns the icon to use when the given tree node is in an open state.</text>
  </method>
  <method access="public" id="method:setIconMinus" name="setIconMinus">
    <param name="strURL" text="URL (preferably relative)&#10;   ">
      <type link="1" name="String"/>
    </param>
    <text>Sets the icon to use when the given tree node is in an open state.</text>
  </method>
  <method access="public" id="method:getIconPlus" name="getIconPlus">
    <param name="strDefault" text="The default value to use if null">
      <type link="1" name="String"/>
    </param>
    <return text="URL for icon to use. If null, &lt;code&gt;jsx3.gui.Matrix.ICON_PLUS&lt;/code&gt; will be applied when rendered.&#10;   ">
      <type link="1" name="String"/>
    </return>
    <text>Returns the icon to use when the given tree node is in a closed state.</text>
  </method>
  <method access="public" id="method:setIconPlus" name="setIconPlus">
    <param name="strURL" text="URL (preferably relative)&#10;   ">
      <type link="1" name="String"/>
    </param>
    <text>Sets the icon to use when the given tree node is in a closed state.</text>
  </method>
  <method access="public" id="method:deleteRecord" name="deleteRecord">
    <param name="strRecordId" text="the &lt;code&gt;jsxid&lt;/code&gt; attribute of the data record to remove.">
      <type link="1" name="String"/>
    </param>
    <param name="bRedraw" text="if &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;null&lt;/code&gt;, the on-screen view of this object is&#10;   immediately updated to reflect the deleted record.">
      <type class="Boolean" link="1" name="boolean"/>
    </param>
    <return text="the record removed from the data source or &lt;code&gt;null&lt;/code&gt; if no such record found.&#10;   ">
      <type link="1" name="jsx3.xml.Entity"/>
    </return>
    <text>Removes a record from the XML data source of this object.</text>
    <overridesmix id="overrides:deleteRecord" idfk="method:deleteRecord" name="deleteRecord" source="jsx3.xml.CDF"/>
  </method>
  <method access="public" id="method:insertRecordProperty" name="insertRecordProperty">
    <param name="strRecordId" text="the &lt;code&gt;jsxid&lt;/code&gt; attribute of the data record to modify.">
      <type link="1" name="String"/>
    </param>
    <param name="strPropName" text="the name of the property to insert into the record.">
      <type link="1" name="String"/>
    </param>
    <param name="strPropValue" text="the value of the property to insert.">
      <type link="1" name="String"/>
    </param>
    <param name="bRedraw" text="if &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;null&lt;/code&gt;, the on-screen view of this object is&#10;   immediately updated to reflect the inserted property.">
      <type class="Boolean" link="1" name="boolean"/>
    </param>
    <return text="this object.&#10;   ">
      <type link="1" name="jsx3.xml.CDF"/>
    </return>
    <text>Inserts a new property into an existing record with <code>jsxid</code> equal to <code>strRecordId</code>.
If the property already exists, the existing property value will be updated. If no such record exists
in the XML document, this method fails quietly.</text>
    <overridesmix id="overrides:insertRecordProperty" idfk="method:insertRecordProperty" name="insertRecordProperty" source="jsx3.xml.CDF"/>
  </method>
  <method access="public" id="method:redrawCell" name="redrawCell">
    <param name="strRecordId" text="&lt;code&gt;jsxid&lt;/code&gt; value for the record node (according to the CDF) corresponding to the on-screen row to update">
      <type link="1" name="String"/>
    </param>
    <param name="objColumn" text="Column instance to update. Any sibling Columns that map to the same named attribute as &lt;b&gt;objColumn&lt;/b&gt;&#10;(e.g., &lt;code&gt;[objColumn].getPath()&lt;/code&gt;) as well as all sibling Columns that are triggered by the named attribute&#10;(e.g., &lt;code&gt;[objColumn].getTriggers()&lt;/code&gt;) will also be redrawn.">
      <type link="1" name="jsx3.gui.Matrix.Column"/>
    </param>
    <param name="bSuppressTriggers" text="if true, no other sibling Columns will be updated, even if they share a common path or designate the path as one of their triggers.">
      <type class="Boolean" link="1" name="boolean"/>
    </param>
    <param name="objTRXML" text="if present, use instead of generating the row XHTML via XSLT">
      <type link="1" name="jsx3.xml.Entity"/>
    </param>
    <text>Updates the on-screen cell to reflect the value in the CDF document to which the cell is mapped.</text>
    <see idfk="method:setPath" source="jsx3.gui.Matrix.Column">jsx3.gui.Matrix.Column.setPath()</see>
    <see idfk="method:setTriggers" source="jsx3.gui.Matrix.Column">jsx3.gui.Matrix.Column.setTriggers()</see>
  </method>
  <method access="public" id="method:redrawMappedCells" name="redrawMappedCells">
    <param name="strRecordId" text="The &lt;code&gt;jsxid&lt;/code&gt; value for the record node (according to the CDF) corresponding to the on-screen row to update">
      <type link="1" name="String"/>
    </param>
    <param name="strAttName" text="Named attribute on the CDF record. All Column children that map to this named attribute&#10;(e.g., &lt;code&gt;[objColumn].getPath()&lt;/code&gt;) as well as all Column children that are triggered by the named attribute&#10;(e.g., &lt;code&gt;[objColumn].getTriggers()&lt;/code&gt;) will be redrawn.">
      <type link="1" name="String"/>
    </param>
    <text>Updates the on-screen cell to reflect the value in the CDF document to which the cell is mapped.</text>
    <see idfk="method:setPath" source="jsx3.gui.Matrix.Column">jsx3.gui.Matrix.Column.setPath()</see>
    <see idfk="method:setTriggers" source="jsx3.gui.Matrix.Column">jsx3.gui.Matrix.Column.setTriggers()</see>
  </method>
  <method access="public" id="method:redrawRecord" name="redrawRecord">
    <param name="strRecordId" text="&lt;code&gt;jsxid&lt;/code&gt; value for the record node (according to the CDF) to redraw">
      <type link="1" name="String"/>
    </param>
    <param name="intAction" text="&lt;code&gt;jsx3.xml.CDF.INSERT&lt;/code&gt;, &lt;code&gt;jsx3.xml.CDF.INSERTBEFORE&lt;/code&gt;, &lt;code&gt;jsx3.xml.CDF.DELETE&lt;/code&gt;, or &lt;code&gt;jsx3.xml.CDF.UPDATE&lt;/code&gt;.">
      <type class="Number" link="1" name="int"/>
    </param>
    <param name="bRecurse" text="if != false, any necessary recursion for flattened inserts will be automatically handled&#10;   ">
      <type class="Boolean" link="1" name="boolean"/>
    </param>
    <text>Matrix implementation.</text>
    <overridesmix id="overrides:redrawRecord" idfk="method:redrawRecord" name="redrawRecord" source="jsx3.xml.CDF"/>
  </method>
  <method access="public" id="method:setValue" name="setValue">
    <param name="strId" text="jsxid attribute for the CDF record(s) to select">
      <type link="1" name="String"/>
      <type link="1" name="Array">
        <type link="1" name="String"/>
      </type>
    </param>
    <return text="this object.&#10;   ">
      <type link="1" name="jsx3.gui.Matrix"/>
    </return>
    <text>Sets the value of this matrix. Deselects all existing selections. Scrolls the first record into view.</text>
    <overridesmix id="overrides:setValue" idfk="method:setValue" name="setValue" source="jsx3.gui.Form"/>
  </method>
  <nested access="public" id="nested:jsx3.gui.Matrix.ColumnFormat" loaded="1" name="jsx3.gui.Matrix.ColumnFormat" shortname="Matrix.ColumnFormat" since="3.2&#10; " type="class">
    <text>A class that defines the methods required for an object to be used by <code>jsx3.gui.Matrix.Column</code> instances to
format cells of data.</text>
  </nested>
  <nested access="public" id="nested:jsx3.gui.Matrix.EditMask" loaded="1" name="jsx3.gui.Matrix.EditMask" shortname="Matrix.EditMask" since="3.2&#10; " type="interface">
    <text>The interface defining the methods that affect the behavior of an object used as an edit mask in a matrix column.</text>
    <see source="jsx3.gui.Matrix.BlockMask">jsx3.gui.Matrix.BlockMask</see>
  </nested>
  <nested access="public" id="nested:jsx3.gui.Matrix.BlockMask" loaded="1" name="jsx3.gui.Matrix.BlockMask" shortname="Matrix.BlockMask" since="3.2&#10; " type="interface">
    <text>The interface that defines the methods that affect the behavior of a composite object used as an edit mask of a
matrix column.</text>
  </nested>
  <nested access="public" id="nested:jsx3.gui.Matrix.Column" loaded="1" name="jsx3.gui.Matrix.Column" shortname="Matrix.Column" since="3.2&#10; " type="class">
    <text>Column control for use as a child of a jsx3.gui.Matrix class</text>
  </nested>
  <method id="method:doKeyBinding" idfk="method:doKeyBinding" inherited="1" name="doKeyBinding" source="jsx3.gui.Form"/>
  <method id="method:doReset" idfk="method:doReset" inherited="1" name="doReset" source="jsx3.gui.Form"/>
  <method id="method:getDisabledBackgroundColor" idfk="method:getDisabledBackgroundColor" inherited="1" name="getDisabledBackgroundColor" source="jsx3.gui.Form"/>
  <method id="method:getDisabledColor" idfk="method:getDisabledColor" inherited="1" name="getDisabledColor" source="jsx3.gui.Form"/>
  <method id="method:getEnabled" idfk="method:getEnabled" inherited="1" name="getEnabled" source="jsx3.gui.Form"/>
  <method id="method:getKeyBinding" idfk="method:getKeyBinding" inherited="1" name="getKeyBinding" source="jsx3.gui.Form"/>
  <method id="method:getRequired" idfk="method:getRequired" inherited="1" name="getRequired" source="jsx3.gui.Form"/>
  <method id="method:getValidationState" idfk="method:getValidationState" inherited="1" name="getValidationState" source="jsx3.gui.Form"/>
  <method id="method:setDisabledBackgroundColor" idfk="method:setDisabledBackgroundColor" inherited="1" name="setDisabledBackgroundColor" source="jsx3.gui.Form"/>
  <method id="method:setDisabledColor" idfk="method:setDisabledColor" inherited="1" name="setDisabledColor" source="jsx3.gui.Form"/>
  <method id="method:setEnabled" idfk="method:setEnabled" inherited="1" name="setEnabled" source="jsx3.gui.Form"/>
  <method id="method:setKeyBinding" idfk="method:setKeyBinding" inherited="1" name="setKeyBinding" source="jsx3.gui.Form"/>
  <method id="method:setRequired" idfk="method:setRequired" inherited="1" name="setRequired" source="jsx3.gui.Form"/>
  <method id="method:setValidationState" idfk="method:setValidationState" inherited="1" name="setValidationState" source="jsx3.gui.Form"/>
  <method id="method:clearXmlData" idfk="method:clearXmlData" inherited="1" name="clearXmlData" source="jsx3.xml.Cacheable"/>
  <method deprecated="1" id="method:getNodeSet" idfk="method:getNodeSet" inherited="1" name="getNodeSet" source="jsx3.xml.Cacheable"/>
  <method id="method:getShareResources" idfk="method:getShareResources" inherited="1" name="getShareResources" source="jsx3.xml.Cacheable"/>
  <method id="method:getXML" idfk="method:getXML" inherited="1" name="getXML" source="jsx3.xml.Cacheable"/>
  <method id="method:getXMLId" idfk="method:getXMLId" inherited="1" name="getXMLId" source="jsx3.xml.Cacheable"/>
  <method id="method:getXMLString" idfk="method:getXMLString" inherited="1" name="getXMLString" source="jsx3.xml.Cacheable"/>
  <method id="method:getXMLTransformers" idfk="method:getXMLTransformers" inherited="1" name="getXMLTransformers" source="jsx3.xml.Cacheable"/>
  <method id="method:getXMLURL" idfk="method:getXMLURL" inherited="1" name="getXMLURL" source="jsx3.xml.Cacheable"/>
  <method id="method:getXSLId" idfk="method:getXSLId" inherited="1" name="getXSLId" source="jsx3.xml.Cacheable"/>
  <method id="method:getXSLParams" idfk="method:getXSLParams" inherited="1" name="getXSLParams" source="jsx3.xml.Cacheable"/>
  <method deprecated="1" id="method:getXSLString" idfk="method:getXSLString" inherited="1" name="getXSLString" source="jsx3.xml.Cacheable"/>
  <method deprecated="1" id="method:getXSLURL" idfk="method:getXSLURL" inherited="1" name="getXSLURL" source="jsx3.xml.Cacheable"/>
  <method id="method:getXmlAsync" idfk="method:getXmlAsync" inherited="1" name="getXmlAsync" source="jsx3.xml.Cacheable"/>
  <method id="method:getXmlBind" idfk="method:getXmlBind" inherited="1" name="getXmlBind" source="jsx3.xml.Cacheable"/>
  <method id="method:onXmlBinding" idfk="method:onXmlBinding" inherited="1" name="onXmlBinding" source="jsx3.xml.Cacheable"/>
  <method id="method:removeXSLParam" idfk="method:removeXSLParam" inherited="1" name="removeXSLParam" source="jsx3.xml.Cacheable"/>
  <method id="method:removeXSLParams" idfk="method:removeXSLParams" inherited="1" name="removeXSLParams" source="jsx3.xml.Cacheable"/>
  <method deprecated="1" id="method:resetData" idfk="method:resetData" inherited="1" name="resetData" source="jsx3.xml.Cacheable"/>
  <method deprecated="1" id="method:resetXslCacheData" idfk="method:resetXslCacheData" inherited="1" name="resetXslCacheData" source="jsx3.xml.Cacheable"/>
  <method deprecated="1" id="method:setNodeSet" idfk="method:setNodeSet" inherited="1" name="setNodeSet" source="jsx3.xml.Cacheable"/>
  <method id="method:setShareResources" idfk="method:setShareResources" inherited="1" name="setShareResources" source="jsx3.xml.Cacheable"/>
  <method id="method:setSourceXML" idfk="method:setSourceXML" inherited="1" name="setSourceXML" source="jsx3.xml.Cacheable"/>
  <method id="method:setXMLTransformers" idfk="method:setXMLTransformers" inherited="1" name="setXMLTransformers" source="jsx3.xml.Cacheable"/>
  <method deprecated="1" id="method:setXSLId" idfk="method:setXSLId" inherited="1" name="setXSLId" source="jsx3.xml.Cacheable"/>
  <method id="method:setXSLParam" idfk="method:setXSLParam" inherited="1" name="setXSLParam" source="jsx3.xml.Cacheable"/>
  <method deprecated="1" id="method:setXSLString" idfk="method:setXSLString" inherited="1" name="setXSLString" source="jsx3.xml.Cacheable"/>
  <method deprecated="1" id="method:setXSLURL" idfk="method:setXSLURL" inherited="1" name="setXSLURL" source="jsx3.xml.Cacheable"/>
  <method id="method:setXmlAsync" idfk="method:setXmlAsync" inherited="1" name="setXmlAsync" source="jsx3.xml.Cacheable"/>
  <method id="method:setXmlBind" idfk="method:setXmlBind" inherited="1" name="setXmlBind" source="jsx3.xml.Cacheable"/>
  <method id="method:adoptRecord" idfk="method:adoptRecord" inherited="1" name="adoptRecord" source="jsx3.xml.CDF"/>
  <method id="method:adoptRecordBefore" idfk="method:adoptRecordBefore" inherited="1" name="adoptRecordBefore" source="jsx3.xml.CDF"/>
  <method id="method:convertProperties" idfk="method:convertProperties" inherited="1" name="convertProperties" source="jsx3.xml.CDF"/>
  <method id="method:deleteRecordProperty" idfk="method:deleteRecordProperty" inherited="1" name="deleteRecordProperty" source="jsx3.xml.CDF"/>
  <method id="method:getRecord" idfk="method:getRecord" inherited="1" name="getRecord" source="jsx3.xml.CDF"/>
  <method id="method:getRecordIds" idfk="method:getRecordIds" inherited="1" name="getRecordIds" source="jsx3.xml.CDF"/>
  <method id="method:getRecordNode" idfk="method:getRecordNode" inherited="1" name="getRecordNode" source="jsx3.xml.CDF"/>
  <method id="method:insertRecord" idfk="method:insertRecord" inherited="1" name="insertRecord" source="jsx3.xml.CDF"/>
  <method id="method:insertRecordBefore" idfk="method:insertRecordBefore" inherited="1" name="insertRecordBefore" source="jsx3.xml.CDF"/>
  <method id="method:insertRecordNode" idfk="method:insertRecordNode" inherited="1" name="insertRecordNode" source="jsx3.xml.CDF"/>
  <method deprecated="1" id="method:reloadFromSource" idfk="method:reloadFromSource" inherited="1" name="reloadFromSource" source="jsx3.xml.CDF"/>
  <method id="method:getBackground" idfk="method:getBackground" inherited="1" name="getBackground" source="jsx3.gui.Block"/>
  <method id="method:getBackgroundColor" idfk="method:getBackgroundColor" inherited="1" name="getBackgroundColor" source="jsx3.gui.Block"/>
  <method id="method:getBorder" idfk="method:getBorder" inherited="1" name="getBorder" source="jsx3.gui.Block"/>
  <method id="method:getCDFAttribute" idfk="method:getCDFAttribute" inherited="1" name="getCDFAttribute" source="jsx3.gui.Block"/>
  <method id="method:getCDFId" idfk="method:getCDFId" inherited="1" name="getCDFId" source="jsx3.gui.Block"/>
  <method id="method:getCSSOverride" idfk="method:getCSSOverride" inherited="1" name="getCSSOverride" source="jsx3.gui.Block"/>
  <method id="method:getClassName" idfk="method:getClassName" inherited="1" name="getClassName" source="jsx3.gui.Block"/>
  <method id="method:getColor" idfk="method:getColor" inherited="1" name="getColor" source="jsx3.gui.Block"/>
  <method id="method:getCursor" idfk="method:getCursor" inherited="1" name="getCursor" source="jsx3.gui.Block"/>
  <method id="method:getDimensions" idfk="method:getDimensions" inherited="1" name="getDimensions" source="jsx3.gui.Block"/>
  <method id="method:getDisplay" idfk="method:getDisplay" inherited="1" name="getDisplay" source="jsx3.gui.Block"/>
  <method id="method:getFontName" idfk="method:getFontName" inherited="1" name="getFontName" source="jsx3.gui.Block"/>
  <method id="method:getFontSize" idfk="method:getFontSize" inherited="1" name="getFontSize" source="jsx3.gui.Block"/>
  <method id="method:getFontWeight" idfk="method:getFontWeight" inherited="1" name="getFontWeight" source="jsx3.gui.Block"/>
  <method id="method:getHeight" idfk="method:getHeight" inherited="1" name="getHeight" source="jsx3.gui.Block"/>
  <method id="method:getIndex" idfk="method:getIndex" inherited="1" name="getIndex" source="jsx3.gui.Block"/>
  <method id="method:getLeft" idfk="method:getLeft" inherited="1" name="getLeft" source="jsx3.gui.Block"/>
  <method id="method:getMargin" idfk="method:getMargin" inherited="1" name="getMargin" source="jsx3.gui.Block"/>
  <method id="method:getOverflow" idfk="method:getOverflow" inherited="1" name="getOverflow" source="jsx3.gui.Block"/>
  <method id="method:getPadding" idfk="method:getPadding" inherited="1" name="getPadding" source="jsx3.gui.Block"/>
  <method id="method:getRelativePosition" idfk="method:getRelativePosition" inherited="1" name="getRelativePosition" source="jsx3.gui.Block"/>
  <method id="method:getTagName" idfk="method:getTagName" inherited="1" name="getTagName" source="jsx3.gui.Block"/>
  <method id="method:getText" idfk="method:getText" inherited="1" name="getText" source="jsx3.gui.Block"/>
  <method id="method:getTextAlign" idfk="method:getTextAlign" inherited="1" name="getTextAlign" source="jsx3.gui.Block"/>
  <method id="method:getTip" idfk="method:getTip" inherited="1" name="getTip" source="jsx3.gui.Block"/>
  <method id="method:getTop" idfk="method:getTop" inherited="1" name="getTop" source="jsx3.gui.Block"/>
  <method id="method:getVisibility" idfk="method:getVisibility" inherited="1" name="getVisibility" source="jsx3.gui.Block"/>
  <method id="method:getWidth" idfk="method:getWidth" inherited="1" name="getWidth" source="jsx3.gui.Block"/>
  <method id="method:getZIndex" idfk="method:getZIndex" inherited="1" name="getZIndex" source="jsx3.gui.Block"/>
  <method id="method:hideMask" idfk="method:hideMask" inherited="1" name="hideMask" source="jsx3.gui.Block"/>
  <method id="method:setBackground" idfk="method:setBackground" inherited="1" name="setBackground" source="jsx3.gui.Block"/>
  <method id="method:setBackgroundColor" idfk="method:setBackgroundColor" inherited="1" name="setBackgroundColor" source="jsx3.gui.Block"/>
  <method id="method:setBorder" idfk="method:setBorder" inherited="1" name="setBorder" source="jsx3.gui.Block"/>
  <method id="method:setCDFAttribute" idfk="method:setCDFAttribute" inherited="1" name="setCDFAttribute" source="jsx3.gui.Block"/>
  <method id="method:setCDFId" idfk="method:setCDFId" inherited="1" name="setCDFId" source="jsx3.gui.Block"/>
  <method id="method:setCSSOverride" idfk="method:setCSSOverride" inherited="1" name="setCSSOverride" source="jsx3.gui.Block"/>
  <method id="method:setClassName" idfk="method:setClassName" inherited="1" name="setClassName" source="jsx3.gui.Block"/>
  <method id="method:setColor" idfk="method:setColor" inherited="1" name="setColor" source="jsx3.gui.Block"/>
  <method id="method:setCursor" idfk="method:setCursor" inherited="1" name="setCursor" source="jsx3.gui.Block"/>
  <method id="method:setDimensions" idfk="method:setDimensions" inherited="1" name="setDimensions" source="jsx3.gui.Block"/>
  <method id="method:setDisplay" idfk="method:setDisplay" inherited="1" name="setDisplay" source="jsx3.gui.Block"/>
  <method id="method:setFontName" idfk="method:setFontName" inherited="1" name="setFontName" source="jsx3.gui.Block"/>
  <method id="method:setFontSize" idfk="method:setFontSize" inherited="1" name="setFontSize" source="jsx3.gui.Block"/>
  <method id="method:setFontWeight" idfk="method:setFontWeight" inherited="1" name="setFontWeight" source="jsx3.gui.Block"/>
  <method id="method:setHeight" idfk="method:setHeight" inherited="1" name="setHeight" source="jsx3.gui.Block"/>
  <method id="method:setIndex" idfk="method:setIndex" inherited="1" name="setIndex" source="jsx3.gui.Block"/>
  <method id="method:setLeft" idfk="method:setLeft" inherited="1" name="setLeft" source="jsx3.gui.Block"/>
  <method id="method:setMargin" idfk="method:setMargin" inherited="1" name="setMargin" source="jsx3.gui.Block"/>
  <method id="method:setOverflow" idfk="method:setOverflow" inherited="1" name="setOverflow" source="jsx3.gui.Block"/>
  <method id="method:setPadding" idfk="method:setPadding" inherited="1" name="setPadding" source="jsx3.gui.Block"/>
  <method id="method:setRelativePosition" idfk="method:setRelativePosition" inherited="1" name="setRelativePosition" source="jsx3.gui.Block"/>
  <method id="method:setTagName" idfk="method:setTagName" inherited="1" name="setTagName" source="jsx3.gui.Block"/>
  <method id="method:setText" idfk="method:setText" inherited="1" name="setText" source="jsx3.gui.Block"/>
  <method id="method:setTextAlign" idfk="method:setTextAlign" inherited="1" name="setTextAlign" source="jsx3.gui.Block"/>
  <method id="method:setTip" idfk="method:setTip" inherited="1" name="setTip" source="jsx3.gui.Block"/>
  <method id="method:setTop" idfk="method:setTop" inherited="1" name="setTop" source="jsx3.gui.Block"/>
  <method id="method:setVisibility" idfk="method:setVisibility" inherited="1" name="setVisibility" source="jsx3.gui.Block"/>
  <method id="method:setWidth" idfk="method:setWidth" inherited="1" name="setWidth" source="jsx3.gui.Block"/>
  <method id="method:setZIndex" idfk="method:setZIndex" inherited="1" name="setZIndex" source="jsx3.gui.Block"/>
  <method id="method:showMask" idfk="method:showMask" inherited="1" name="showMask" source="jsx3.gui.Block"/>
  <method id="method:doEvent" idfk="method:doEvent" inherited="1" name="doEvent" source="jsx3.gui.Interactive"/>
  <method id="method:getCanDrag" idfk="method:getCanDrag" inherited="1" name="getCanDrag" source="jsx3.gui.Interactive"/>
  <method id="method:getCanDrop" idfk="method:getCanDrop" inherited="1" name="getCanDrop" source="jsx3.gui.Interactive"/>
  <method id="method:getCanMove" idfk="method:getCanMove" inherited="1" name="getCanMove" source="jsx3.gui.Interactive"/>
  <method id="method:getCanSpy" idfk="method:getCanSpy" inherited="1" name="getCanSpy" source="jsx3.gui.Interactive"/>
  <method id="method:getEvent" idfk="method:getEvent" inherited="1" name="getEvent" source="jsx3.gui.Interactive"/>
  <method id="method:getEvents" idfk="method:getEvents" inherited="1" name="getEvents" source="jsx3.gui.Interactive"/>
  <method id="method:getMenu" idfk="method:getMenu" inherited="1" name="getMenu" source="jsx3.gui.Interactive"/>
  <method id="method:hasEvent" idfk="method:hasEvent" inherited="1" name="hasEvent" source="jsx3.gui.Interactive"/>
  <method id="method:registerHotKey" idfk="method:registerHotKey" inherited="1" name="registerHotKey" source="jsx3.gui.Interactive"/>
  <method id="method:removeEvent" idfk="method:removeEvent" inherited="1" name="removeEvent" source="jsx3.gui.Interactive"/>
  <method id="method:removeEvents" idfk="method:removeEvents" inherited="1" name="removeEvents" source="jsx3.gui.Interactive"/>
  <method id="method:setCanDrag" idfk="method:setCanDrag" inherited="1" name="setCanDrag" source="jsx3.gui.Interactive"/>
  <method id="method:setCanDrop" idfk="method:setCanDrop" inherited="1" name="setCanDrop" source="jsx3.gui.Interactive"/>
  <method id="method:setCanMove" idfk="method:setCanMove" inherited="1" name="setCanMove" source="jsx3.gui.Interactive"/>
  <method id="method:setCanSpy" idfk="method:setCanSpy" inherited="1" name="setCanSpy" source="jsx3.gui.Interactive"/>
  <method id="method:setEvent" idfk="method:setEvent" inherited="1" name="setEvent" source="jsx3.gui.Interactive"/>
  <method id="method:setMenu" idfk="method:setMenu" inherited="1" name="setMenu" source="jsx3.gui.Interactive"/>
  <method id="method:setSpyStyles" idfk="method:setSpyStyles" inherited="1" name="setSpyStyles" source="jsx3.gui.Interactive"/>
  <method id="method:showSpy" idfk="method:showSpy" inherited="1" name="showSpy" source="jsx3.gui.Interactive"/>
  <method id="method:focus" idfk="method:focus" inherited="1" name="focus" source="jsx3.gui.Painted"/>
  <method id="method:getAbsolutePosition" idfk="method:getAbsolutePosition" inherited="1" name="getAbsolutePosition" source="jsx3.gui.Painted"/>
  <method id="method:getAttribute" idfk="method:getAttribute" inherited="1" name="getAttribute" source="jsx3.gui.Painted"/>
  <method id="method:getAttributes" idfk="method:getAttributes" inherited="1" name="getAttributes" source="jsx3.gui.Painted"/>
  <method id="method:getDynamicProperty" idfk="method:getDynamicProperty" inherited="1" name="getDynamicProperty" source="jsx3.gui.Painted"/>
  <method id="method:getRendered" idfk="method:getRendered" inherited="1" name="getRendered" source="jsx3.gui.Painted"/>
  <method deprecated="1" id="method:insertHTML" idfk="method:insertHTML" inherited="1" name="insertHTML" source="jsx3.gui.Painted"/>
  <method id="method:onAfterPaint" idfk="method:onAfterPaint" inherited="1" name="onAfterPaint" source="jsx3.gui.Painted"/>
  <method id="method:onAfterRestoreView" idfk="method:onAfterRestoreView" inherited="1" name="onAfterRestoreView" source="jsx3.gui.Painted"/>
  <method id="method:paintChildren" idfk="method:paintChildren" inherited="1" name="paintChildren" source="jsx3.gui.Painted"/>
  <method id="method:recalcBox" idfk="method:recalcBox" inherited="1" name="recalcBox" source="jsx3.gui.Painted"/>
  <method id="method:removeAttribute" idfk="method:removeAttribute" inherited="1" name="removeAttribute" source="jsx3.gui.Painted"/>
  <method id="method:removeAttributes" idfk="method:removeAttributes" inherited="1" name="removeAttributes" source="jsx3.gui.Painted"/>
  <method id="method:setAttribute" idfk="method:setAttribute" inherited="1" name="setAttribute" source="jsx3.gui.Painted"/>
  <method id="method:setDynamicProperty" idfk="method:setDynamicProperty" inherited="1" name="setDynamicProperty" source="jsx3.gui.Painted"/>
  <method id="method:doClone" idfk="method:doClone" inherited="1" name="doClone" source="jsx3.app.Model"/>
  <method id="method:findAncestor" idfk="method:findAncestor" inherited="1" name="findAncestor" source="jsx3.app.Model"/>
  <method id="method:findDescendants" idfk="method:findDescendants" inherited="1" name="findDescendants" source="jsx3.app.Model"/>
  <method id="method:getAncestorOfName" idfk="method:getAncestorOfName" inherited="1" name="getAncestorOfName" source="jsx3.app.Model"/>
  <method id="method:getAncestorOfType" idfk="method:getAncestorOfType" inherited="1" name="getAncestorOfType" source="jsx3.app.Model"/>
  <method id="method:getChild" idfk="method:getChild" inherited="1" name="getChild" source="jsx3.app.Model"/>
  <method id="method:getChildIndex" idfk="method:getChildIndex" inherited="1" name="getChildIndex" source="jsx3.app.Model"/>
  <method id="method:getChildren" idfk="method:getChildren" inherited="1" name="getChildren" source="jsx3.app.Model"/>
  <method id="method:getDescendantOfName" idfk="method:getDescendantOfName" inherited="1" name="getDescendantOfName" source="jsx3.app.Model"/>
  <method id="method:getDescendantsOfType" idfk="method:getDescendantsOfType" inherited="1" name="getDescendantsOfType" source="jsx3.app.Model"/>
  <method id="method:getFirstChild" idfk="method:getFirstChild" inherited="1" name="getFirstChild" source="jsx3.app.Model"/>
  <method id="method:getFirstChildOfType" idfk="method:getFirstChildOfType" inherited="1" name="getFirstChildOfType" source="jsx3.app.Model"/>
  <method id="method:getHelpId" idfk="method:getHelpId" inherited="1" name="getHelpId" source="jsx3.app.Model"/>
  <method id="method:getId" idfk="method:getId" inherited="1" name="getId" source="jsx3.app.Model"/>
  <method id="method:getLastChild" idfk="method:getLastChild" inherited="1" name="getLastChild" source="jsx3.app.Model"/>
  <method id="method:getLoadType" idfk="method:getLoadType" inherited="1" name="getLoadType" source="jsx3.app.Model"/>
  <method id="method:getMetaValue" idfk="method:getMetaValue" inherited="1" name="getMetaValue" source="jsx3.app.Model"/>
  <method id="method:getNS" idfk="method:getNS" inherited="1" name="getNS" source="jsx3.app.Model"/>
  <method id="method:getName" idfk="method:getName" inherited="1" name="getName" source="jsx3.app.Model"/>
  <method id="method:getNextSibling" idfk="method:getNextSibling" inherited="1" name="getNextSibling" source="jsx3.app.Model"/>
  <method final="1" id="method:getParent" idfk="method:getParent" inherited="1" name="getParent" source="jsx3.app.Model"/>
  <method id="method:getPersistence" idfk="method:getPersistence" inherited="1" name="getPersistence" source="jsx3.app.Model"/>
  <method id="method:getPreviousSibling" idfk="method:getPreviousSibling" inherited="1" name="getPreviousSibling" source="jsx3.app.Model"/>
  <method id="method:getServer" idfk="method:getServer" inherited="1" name="getServer" source="jsx3.app.Model"/>
  <method id="method:getUriResolver" idfk="method:getUriResolver" inherited="1" name="getUriResolver" source="jsx3.app.Model"/>
  <method id="method:load" idfk="method:load" inherited="1" name="load" source="jsx3.app.Model"/>
  <method id="method:loadAndCache" idfk="method:loadAndCache" inherited="1" name="loadAndCache" source="jsx3.app.Model"/>
  <method id="method:loadXML" idfk="method:loadXML" inherited="1" name="loadXML" source="jsx3.app.Model"/>
  <method id="method:onAfterAssemble" idfk="method:onAfterAssemble" inherited="1" name="onAfterAssemble" source="jsx3.app.Model"/>
  <method id="method:onAfterAttach" idfk="method:onAfterAttach" inherited="1" name="onAfterAttach" source="jsx3.app.Model"/>
  <method id="method:onBeforeAssemble" idfk="method:onBeforeAssemble" inherited="1" name="onBeforeAssemble" source="jsx3.app.Model"/>
  <method id="method:onChangeServer" idfk="method:onChangeServer" inherited="1" name="onChangeServer" source="jsx3.app.Model"/>
  <method id="method:onChildAdded" idfk="method:onChildAdded" inherited="1" name="onChildAdded" source="jsx3.app.Model"/>
  <method id="method:onDestroy" idfk="method:onDestroy" inherited="1" name="onDestroy" source="jsx3.app.Model"/>
  <method id="method:onRemoveChild" idfk="method:onRemoveChild" inherited="1" name="onRemoveChild" source="jsx3.app.Model"/>
  <method id="method:onSetChild" idfk="method:onSetChild" inherited="1" name="onSetChild" source="jsx3.app.Model"/>
  <method id="method:onSetParent" idfk="method:onSetParent" inherited="1" name="onSetParent" source="jsx3.app.Model"/>
  <method id="method:removeChild" idfk="method:removeChild" inherited="1" name="removeChild" source="jsx3.app.Model"/>
  <method id="method:removeChildren" idfk="method:removeChildren" inherited="1" name="removeChildren" source="jsx3.app.Model"/>
  <method id="method:selectDescendants" idfk="method:selectDescendants" inherited="1" name="selectDescendants" source="jsx3.app.Model"/>
  <method id="method:setChild" idfk="method:setChild" inherited="1" name="setChild" source="jsx3.app.Model"/>
  <method id="method:setHelpId" idfk="method:setHelpId" inherited="1" name="setHelpId" source="jsx3.app.Model"/>
  <method id="method:setLoadType" idfk="method:setLoadType" inherited="1" name="setLoadType" source="jsx3.app.Model"/>
  <method id="method:setMetaValue" idfk="method:setMetaValue" inherited="1" name="setMetaValue" source="jsx3.app.Model"/>
  <method id="method:setName" idfk="method:setName" inherited="1" name="setName" source="jsx3.app.Model"/>
  <method id="method:setPersistence" idfk="method:setPersistence" inherited="1" name="setPersistence" source="jsx3.app.Model"/>
  <method id="method:toString" idfk="method:toString" inherited="1" name="toString" source="jsx3.app.Model"/>
  <method id="method:toXML" idfk="method:toXML" inherited="1" name="toXML" source="jsx3.app.Model"/>
  <method id="method:toXMLDoc" idfk="method:toXMLDoc" inherited="1" name="toXMLDoc" source="jsx3.app.Model"/>
  <method id="method:publish" idfk="method:publish" inherited="1" name="publish" source="jsx3.util.EventDispatcher"/>
  <method id="method:subscribe" idfk="method:subscribe" inherited="1" name="subscribe" source="jsx3.util.EventDispatcher"/>
  <method id="method:unsubscribe" idfk="method:unsubscribe" inherited="1" name="unsubscribe" source="jsx3.util.EventDispatcher"/>
  <method id="method:unsubscribeAll" idfk="method:unsubscribeAll" inherited="1" name="unsubscribeAll" source="jsx3.util.EventDispatcher"/>
  <method id="method:clone" idfk="method:clone" inherited="1" name="clone" source="jsx3.lang.Object"/>
  <method id="method:equals" idfk="method:equals" inherited="1" name="equals" source="jsx3.lang.Object"/>
  <method id="method:eval" idfk="method:eval" inherited="1" name="eval" source="jsx3.lang.Object"/>
  <method id="method:getClass" idfk="method:getClass" inherited="1" name="getClass" source="jsx3.lang.Object"/>
  <method deprecated="1" id="method:getInstanceOf" idfk="method:getInstanceOf" inherited="1" name="getInstanceOf" source="jsx3.lang.Object"/>
  <method deprecated="1" id="method:getInstanceOfClass" idfk="method:getInstanceOfClass" inherited="1" name="getInstanceOfClass" source="jsx3.lang.Object"/>
  <method deprecated="1" id="method:getInstanceOfPackage" idfk="method:getInstanceOfPackage" inherited="1" name="getInstanceOfPackage" source="jsx3.lang.Object"/>
  <method id="method:instanceOf" idfk="method:instanceOf" inherited="1" name="instanceOf" source="jsx3.lang.Object"/>
  <method deprecated="1" id="method:isInstanceOf" idfk="method:isInstanceOf" inherited="1" name="isInstanceOf" source="jsx3.lang.Object"/>
  <method deprecated="1" id="method:isSubclassOf" idfk="method:isSubclassOf" inherited="1" name="isSubclassOf" source="jsx3.lang.Object"/>
  <method deprecated="1" id="method:jsxmix" idfk="method:jsxmix" inherited="1" name="jsxmix" source="jsx3.lang.Object"/>
  <method id="method:jsxsuper" idfk="method:jsxsuper" inherited="1" name="jsxsuper" source="jsx3.lang.Object"/>
  <method id="method:jsxsupermix" idfk="method:jsxsupermix" inherited="1" name="jsxsupermix" source="jsx3.lang.Object"/>
  <method deprecated="1" id="method:setInstanceOf" idfk="method:setInstanceOf" inherited="1" name="setInstanceOf" source="jsx3.lang.Object"/>
</class>
