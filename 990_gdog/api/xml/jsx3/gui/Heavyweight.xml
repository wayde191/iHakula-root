<?xml version="1.0" encoding="UTF-8"?>
<class access="public" id="class:jsx3.gui.Heavyweight" name="jsx3.gui.Heavyweight" package="jsx3.gui" shortname="Heavyweight" since="3.0&#10; ">
  <text>GUI utility class that provides a way to display HTML content on-screen in an HTML equivalent of a heavyweight container.
Instances of this class are often used to display menu lists, select lists, spyglass, and focus-rectangles.
An instance of this class cannot be serialized, it is merely a run-time construct similar to an alert or input box.</text>
  <superclass id="super:0" loaded="1" name="Object"/>
  <superclass direct="1" id="super:1" loaded="1" name="jsx3.lang.Object"/>
  <field access="public" class="jsx3.gui.Heavyweight" fullname="jsx3.gui.Heavyweight.DEFAULTZINDEX" id="sfield:DEFAULTZINDEX" name="DEFAULTZINDEX" static="1" value="32000">
    <type class="Number" link="1" name="int"/>
    <text> 32000
   </text>
  </field>
  <constructor access="public" id="method:init" name="init">
    <param name="strId" text="id to identify this HW instance among all others; this id will be used by both jsx3.gui.Heavyweight (to index it in the hash) and by the browser as the HTML tag's &quot;id&quot; attribute. If no ID is passed, a unique ID will be assigned by the system and is available by calling, [object].getId();">
      <type link="1" name="String"/>
    </param>
    <param name="objOwner" text="">
      <type link="1" name="jsx3.gui.Painted"/>
    </param>
    <text>instance initializer</text>
  </constructor>
  <method access="public" id="smethod:GO" name="GO" static="1">
    <param name="strId" text="unique ID for the heavyweight instance">
      <type link="1" name="String"/>
    </param>
    <return text="">
      <type link="1" name="jsx3.gui.Heavyweight"/>
    </return>
    <text>Returns the instance of the heavyweight object with the given ID; to get the on-screen HTML instance call: jsx3.gui.Heavyweight.GO([id]).getRendered()</text>
  </method>
  <method access="public" id="method:show" name="show">
    <param name="bDisplay" text="true if null; if true, the heavyweight container is positioned and displayed immediately; if false, the container is painted on-screen, but its CSS 'visibility' property is set to 'hidden', allowing the developer to adjust as needed (via 2-pass, etc) before actually displaying;&#10;   ">
      <type class="Boolean" link="1" name="boolean"/>
    </param>
    <text>Sets the text/HTML for the control to be displayed on-screen; returns reference to self to facilitate method chaining;</text>
  </method>
  <method access="public" id="method:applyRatio" name="applyRatio">
    <param name="objGUI"/>
    <text>can be called if show() has been called; resets the ratio (width/total) of the VIEW to be that of [object].getRatio()
   </text>
  </method>
  <method access="public" id="method:applyRules" name="applyRules">
    <param name="strAxis" text="character (string) representing whether the rule is for the X or Y axis. Rememeber to capitalize!&#10;   ">
      <type link="1" name="String"/>
    </param>
    <param name="intSize"/>
    <text>can be called if show() has been called; allows an existing HW window to re-apply its rules (used for complex layouts requiring a multi-pass)</text>
  </method>
  <method access="public" id="method:hide" name="hide">
    <text>destorys the on-screen VIEW for the HW container; Hide() only affects the VIEW; this is not the same as setting visibility to "hidden", which doesn't actually destroy the VIEW
   </text>
  </method>
  <method access="public" id="method:destroy" name="destroy">
    <text>destroy's the on-screen VIEW for the HW container AND removes any reference to the instance from the hash; Destroy() affects the MODEL and the VIEW
   </text>
  </method>
  <method access="public" id="method:getRendered" name="getRendered">
    <param name="objGUI" text="optional argument improves efficiency if provided.">
      <type link="1" name="jsx3.gui.Event"/>
      <type link="1" name="HTMLElement"/>
      <type link="1" name="HTMLDocument"/>
    </param>
    <return text="Browser-Native DHTML object&#10;   ">
      <type link="1" name="HTMLElement"/>
    </return>
    <text>Returns handle/reference to the Heavyweight Object's on-screen counterpartâ€”basically a handle to a DHTML SPAN;</text>
  </method>
  <method access="public" id="method:getId" name="getId">
    <return text="">
      <type link="1" name="String"/>
    </return>
    <text>Returns the unique id for this heavyweight instance</text>
  </method>
  <method access="public" id="method:getHTML" name="getHTML">
    <return text="">
      <type link="1" name="String"/>
    </return>
    <text>Returns the HTML content to display inside the HW instance on-screen</text>
  </method>
  <method access="public" id="method:setHTML" name="setHTML">
    <param name="strHTML" text="HTML">
      <type link="1" name="String"/>
    </param>
    <param name="bRepaint"/>
    <return text="this&#10;   ">
      <type link="1" name="jsx3.gui.Heavyweight"/>
    </return>
    <text>Sets the HTML content to display inside the HW instance on-screen; returns ref to self</text>
  </method>
  <method access="public" id="method:getDomParent" name="getDomParent">
    <return text="">
      <type link="1" name="HTMLElement"/>
    </return>
    <text>Returns an object reference to the Browser Element parent to be used; if none specified, the browser BODY will be used</text>
  </method>
  <method access="public" id="method:setDomParent" name="setDomParent">
    <param name="objGUI" text="HTML element in the browser">
      <type link="1" name="HTMLElement"/>
    </param>
    <return text="this&#10;   ">
      <type link="1" name="jsx3.gui.Heavyweight"/>
    </return>
    <text>Sets an object reference to the Browser Element parent to be used; if none specified, the browser BODY will be used.
Note that this method must be called before setting any point rules for the hW instance, so those functions know the true origin from which to calculate left/top positions; returns ref to self</text>
  </method>
  <method access="public" id="method:getRatio" name="getRatio">
    <return text="">
      <type link="1" name="Number"/>
    </return>
  </method>
  <method access="public" id="method:setRatio" name="setRatio">
    <param name="vntRatio" text="">
      <type link="1" name="Number"/>
    </param>
    <return text="this object.&#10;   ">
      <type link="1" name="jsx3.gui.Heavyweight"/>
    </return>
    <text>Sets the desired ratio of the width to the height of this heavyweight. This class will attempt to resize the 
content to fit inside a box with this width to height ratio.</text>
  </method>
  <method access="public" id="method:getOverflow" name="getOverflow">
    <return text="[jsx3.gui.Block.OVERFLOWSCROLL, jsx3.gui.Block.OVERFLOWHIDDEN, jsx3.gui.Block.OVERFLOWEXPAND]&#10;   ">
      <type link="1" name="String"/>
    </return>
    <text>Returns the overflow property for CONTENTS of the HW container; it is assumed that anytime a perfect fit cannot occur that the content will have its overflow property set to 'auto' unless specified otherwise</text>
  </method>
  <method access="public" id="method:setOverflow" name="setOverflow">
    <param name="strOverflow" text="[jsx3.gui.Block.OVERFLOWSCROLL, jsx3.gui.Block.OVERFLOWHIDDEN, jsx3.gui.Block.OVERFLOWEXPAND]">
      <type link="1" name="String"/>
    </param>
    <return text="this object&#10;   ">
      <type link="1" name="jsx3.gui.Heavyweight"/>
    </return>
    <text>Sets the overflow property for CONTENTS of the HW container; it is assumed that anytime a perfect fit cannot occur that the content will have its overflow property set to 'auto' unless specified otherwise
           returns reference to self to facilitate method chaining;</text>
  </method>
  <method access="public" id="method:setVisibility" name="setVisibility">
    <param name="strVisibility" text="[jsx3.gui.Block.VISIBILITYVISIBLE, jsx3.gui.Block.VISIBILITYHIDDEN]">
      <type link="1" name="String"/>
    </param>
    <return text="this object&#10;   ">
      <type link="1" name="jsx3.gui.Heavyweight"/>
    </return>
    <text>if the HW instance has an on-screen VIEW, this method can be used to toggle its visibility; it has no effect on the MODEL; it is most commonly used when "[object].show(false);" is called, allowing the developer to manually adjust layout before actually showing the HW instance.
           returns a ref to self for method chaining</text>
  </method>
  <method access="public" id="method:getZIndex" name="getZIndex">
    <return text="">
      <type class="Number" link="1" name="int"/>
    </return>
    <text>Returns the z-index property; assumes jsx3.gui.Heavyweight.DEFAULTZINDEX if none supplied</text>
  </method>
  <method access="public" id="method:setZIndex" name="setZIndex">
    <param name="intZIndex" text="z-index value&#10;   ">
      <type class="Number" link="1" name="int"/>
    </param>
    <text>Sets the CSS z-index for the object; if null, is passed, jsx3.gui.Heavyweight.DEFAULTZINDEX will be used as the default value</text>
  </method>
  <method access="public" id="method:getWidth" name="getWidth">
    <return text="width (in pixels)&#10;   ">
      <type class="Number" link="1" name="int"/>
    </return>
    <text>Returns the CSS width property (in pixels); if this value is set, it is assumed that the Heavyweight container will not have its width lessened to fit on-screen.</text>
  </method>
  <method access="public" id="method:setWidth" name="setWidth">
    <param name="intWidth" text="width (in pixels)&#10;   ">
      <type class="Number" link="1" name="int"/>
    </param>
    <text>Sets the CSS width property (in pixels); if this value is set, it is assumed that the Heavyweight container will not have its width lessened to fit on-screen.</text>
  </method>
  <method access="public" id="method:getHeight" name="getHeight">
    <return text="height (in pixels)&#10;   ">
      <type class="Number" link="1" name="int"/>
    </return>
    <text>Returns the CSS height property (in pixels); if this value is set, it is assumed that the Heavyweight container will not have its height lessened to fit on-screen.</text>
  </method>
  <method access="public" id="method:setHeight" name="setHeight">
    <param name="intHeight" text="height (in pixels)">
      <type class="Number" link="1" name="int"/>
    </param>
    <return text="this object&#10;   ">
      <type link="1" name="jsx3.gui.Heavyweight"/>
    </return>
    <text>Sets the CSS height property (in pixels); if this value is set, it is assumed that the Heavyweight container will not have its height lessened to fit on-screen.
           returns reference to self to facilitate method chaining;</text>
  </method>
  <method access="public" id="method:addXRule" name="addXRule">
    <param name="objAnchor" text="Either an event, or an on-screen HTML element">
      <type link="1" name="Object"/>
      <type link="1" name="jsx3.gui.Event"/>
    </param>
    <param name="strAnchorPoint" text="REQUIRED if @objAnchor is an HTML element; when used, defines one of  the valid 9 compass points: 4 primary: (N, S, E, W); 4 secondary: (NE, SE, SW, NW); and origin: (O). Note that it&#10;           is from this point (on @objAnchor) that the heavyweight item will try to position itself">
      <type link="1" name="String"/>
    </param>
    <param name="strPoint" text="Defines one of  the valid 9 compass points: 4 primary: (N, S, E, W); 4 secondary: (NE, SE, SW, NW); and origin: (O). Note that it&#10;           is from this point (on the Heavyweight instance) that the heavyweight item will try to position itself">
      <type link="1" name="String"/>
    </param>
    <param name="intOff" text="offset (in pixels) by which to nudge the horizontal placement of the HW instance before displaying (useful for submenus, for example, where their left has a -10px offset to overlay the parent menu item)">
      <type class="Number" link="1" name="int"/>
    </param>
    <return text="this object (this)&#10;   ">
      <type link="1" name="jsx3.gui.Heavyweight"/>
    </return>
    <text>adds a POSITION RULE ruleset (X value) (a simple structure/hash) to the array of position rules; Note that POSITION RULE objects are used by the show() method to determine the best possible location for a heavyweight item</text>
  </method>
  <method access="public" id="method:addYRule" name="addYRule">
    <param name="objAnchor" text="Either an event or an on-screen HTML element">
      <type link="1" name="Object"/>
      <type link="1" name="jsx3.gui.Event"/>
    </param>
    <param name="strAnchorPoint" text="REQUIRED if @objAnchor is an HTML element; when used, defines one of  the valid 9 compass points: 4 primary: (N, S, E, W); 4 secondary: (NE, SE, SW, NW); and origin: (O). Note that it&#10;           is from this point (on @objAnchor) that the heavyweight item will try to position itself">
      <type link="1" name="String"/>
    </param>
    <param name="strPoint" text="Defines one of  the valid 9 compass points: 4 primary: (N, S, E, W); 4 secondary: (NE, SE, SW, NW); and origin: (O). Note that it&#10;           is from this point (on the Heavyweight instance) that the heavyweight item will try to position itself">
      <type link="1" name="String"/>
    </param>
    <param name="intOff" text="offset (in pixels) by which to nudge the vertical placement of the HW instance before displaying (useful for submenus, for example, where their left has a -10px offset to overlay the parent menu item)">
      <type class="Number" link="1" name="int"/>
    </param>
    <return text="this object (this)&#10;   ">
      <type link="1" name="jsx3.gui.Heavyweight"/>
    </return>
    <text>adds a POSITION RULE ruleset (Y value) (a simple structure/hash) to the array of position rules; Note that POSITION RULE objects are used by the show() method to determine the best possible location for a heavyweight item</text>
  </method>
  <method access="public" id="method:addRule" name="addRule">
    <param name="intPixel" text="left position (in pixels) for the anchorpoint the heavyweight instance will try to layout in context of">
      <type class="Number" link="1" name="int"/>
    </param>
    <param name="strPoint" text="Defines one of  the valid 9 compass points: 4 primary: (N, S, E, W); 4 secondary: (NE, SE, SW, NW); and origin: (O). Note that it&#10;           is from this point (on the Heavyweight instance) that the heavyweight item will try to position itself">
      <type link="1" name="String"/>
    </param>
    <param name="intOff" text="offset (in pixels) by which to nudge the vertical placement of the HW instance before displaying (useful for submenus, for example, where their left has a -10px offset to overlay the parent menu item)">
      <type class="Number" link="1" name="int"/>
    </param>
    <param name="strAxis" text="character (string) representing whether the rule is for the X or Y axis. Rememeber to capitalize!">
      <type link="1" name="String"/>
    </param>
    <return text="this object (this)&#10;   ">
      <type link="1" name="jsx3.gui.Heavyweight"/>
    </return>
    <text>adds a POSITION RULE ruleset (a simple structure/hash) to the array of position rules; Note that POSITION RULE objects are used by the show() method to determine the best possible location for a heavyweight item</text>
  </method>
  <method access="public" id="method:getPositionRule" name="getPositionRule">
    <param name="intIndex" text="the index (in rank order of execution) of the POSITION RULEing rule set to apply (it is assumed that at least one POSITION RULE ruleset exists)">
      <type class="Number" link="1" name="int"/>
    </param>
    <param name="strAxis" text="character (string) representing whether the rule is for the X or Y axis. Rememeber to capitalize!">
      <type link="1" name="String"/>
    </param>
    <return text="">
      <type link="1" name="String"/>
    </return>
    <text>Returns a POSITION RULE object at the given index; Note that POSITION RULE objects are JavaScript objects that implement the following 3 properties: _pixel (the on-screen point around which to pivot/place), _offset (amount to nudge the placement), _point (compass direction)</text>
  </method>
  <method access="public" id="method:getPositionRules" name="getPositionRules">
    <return text="">
      <type link="1" name="Object">
        <type link="1" name="String"/>
        <type link="1" name="Array"/>
      </type>
    </return>
    <text>Returns a JavaScript object array (hash).  This hash contains the Y rules and the X rules for positioning the object</text>
  </method>
  <method access="public" id="method:getPoint" name="getPoint">
    <param name="objGUI" text="GUI object in the browser DOM (typically an HTML element such as a DIV or SPAN) for which to provide the X,Y for">
      <type link="1" name="HTMLElement"/>
      <type link="1" name="jsx3.gui.Block"/>
      <type class="Number" link="1" name="int"/>
    </param>
    <param name="strPoint" text="a character denoting one of the valid 9 compass points: 4 primary: (N, S, E, W); 4 secondary: (NE, SE, SW, NW); and origin: (O)&#10;   ">
      <type link="1" name="String"/>
    </param>
    <text>Returns a JavaScript object with properties:  X,Y (Left and Top); relating to the 4 primary (N, S, E, W), 4 secondary (NE, SE, SW, NW), and origin (O) compass positions for O</text>
  </method>
  <method access="public" id="method:toString" name="toString">
    <return text="object profile as a string&#10;   ">
      <type link="1" name="String"/>
    </return>
    <text>converts the object to a string representation more useful than the default implementation provided by the native JS engine</text>
    <overrides id="overrides:toString" idfk="method:toString" name="toString" source="jsx3.lang.Object"/>
  </method>
  <method access="public" deprecated="1" id="smethod:getVersion" name="getVersion" static="1">
    <return text="">
      <type link="1" name="String"/>
    </return>
    <text>Returns the release/build for the class (i.e., "2.2.00")</text>
  </method>
  <method id="method:clone" idfk="method:clone" inherited="1" name="clone" source="jsx3.lang.Object"/>
  <method id="method:equals" idfk="method:equals" inherited="1" name="equals" source="jsx3.lang.Object"/>
  <method id="method:eval" idfk="method:eval" inherited="1" name="eval" source="jsx3.lang.Object"/>
  <method id="method:getClass" idfk="method:getClass" inherited="1" name="getClass" source="jsx3.lang.Object"/>
  <method deprecated="1" id="method:getInstanceOf" idfk="method:getInstanceOf" inherited="1" name="getInstanceOf" source="jsx3.lang.Object"/>
  <method deprecated="1" id="method:getInstanceOfClass" idfk="method:getInstanceOfClass" inherited="1" name="getInstanceOfClass" source="jsx3.lang.Object"/>
  <method deprecated="1" id="method:getInstanceOfPackage" idfk="method:getInstanceOfPackage" inherited="1" name="getInstanceOfPackage" source="jsx3.lang.Object"/>
  <method id="method:instanceOf" idfk="method:instanceOf" inherited="1" name="instanceOf" source="jsx3.lang.Object"/>
  <method deprecated="1" id="method:isInstanceOf" idfk="method:isInstanceOf" inherited="1" name="isInstanceOf" source="jsx3.lang.Object"/>
  <method deprecated="1" id="method:isSubclassOf" idfk="method:isSubclassOf" inherited="1" name="isSubclassOf" source="jsx3.lang.Object"/>
  <method deprecated="1" id="method:jsxmix" idfk="method:jsxmix" inherited="1" name="jsxmix" source="jsx3.lang.Object"/>
  <method id="method:jsxsuper" idfk="method:jsxsuper" inherited="1" name="jsxsuper" source="jsx3.lang.Object"/>
  <method id="method:jsxsupermix" idfk="method:jsxsupermix" inherited="1" name="jsxsupermix" source="jsx3.lang.Object"/>
  <method deprecated="1" id="method:setInstanceOf" idfk="method:setInstanceOf" inherited="1" name="setInstanceOf" source="jsx3.lang.Object"/>
</class>
